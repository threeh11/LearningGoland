
                             СКАНДИНАВСКИЕ САГИ




                      ЧАСТЬ ПЕРВАЯ. СКАЗАНИЯ О БОГАХ


                               СОЗДАНИЕ МИРА

     Сначала не было ничего: ни земли, ни песка, ни  холодных  волн.  Была
лишь одна черная бездна  Гиннунгагап.  К  северу  от  нее  лежало  царство
туманов Нифльхейм, а к югу - царство  огня  Муспельхейм.  Тихо,  светло  и
жарко было в Муспельхейме, так жарко, что никто, кроме детей этой  страны,
огненных  великанов,  не  мог  там  жить,  в  Нифльхейме   же,   напротив,
господствовали вечный холод и мрак.
     Но вот в царстве туманов забил родник Гергельмир.  Двенадцать  мощных
потоков, Эливагар, взяли из него свое начало и стремительно потекли к югу,
низвергаясь в бездну Гиннунгагап. Жестокий мороз царства туманов превращал
воду этих потоков в лед, но источник Гергельмир бил не переставая, ледяные
глыбы росли и все ближе и ближе подвигались к  Муспельхейму.  Наконец  лед
подошел так близко к царству огня, что стал таять.  Искры,  вылетающие  из
Муспельхейма, смешались с растаявшим льдом и  вдохнули  в  него  жизнь.  И
тогда над бескрайними ледяными  просторами  из  бездны  Гиннунгагап  вдруг
поднялась исполинская фигура. Это был великан Имир, первое живое  существо
в мире.
     В тот же день под левой рукой Имира появились мальчик и девочка, а от
его ног родился шестиголовый великан Трудгельмир. Так было положено начало
роду великанов - Гримтурсенов, жестоких и коварных, как лед  и  пламя,  их
создавшие.
     В одно время с великанами из таявшего льда возникла гигантская корова
Аудумбла. Четыре молочные реки потекли из сосков  ее  вымени,  давая  пищу
Имиру и его детям. Зеленых пастбищ еще не  было,  и  Аудумбла  паслась  на
льду, облизывая соленые ледяные глыбы. К  концу  первого  дня  на  вершине
одной из этих глыб появились волосы, на другой  день  -  целая  голова,  к
исходу же третьего дня из глыбы вышел могучий гигант  Бури.  Его  сын  Бер
взял себе в жены великаншу Беслу, и она  родила  ему  трех  сыновей-богов:
Одина, Вили и Ве.
     Братьям богам не нравился мир, в котором они жили,  не  пожелали  они
сносить и господство жестокого  Имира.  Они  восстали  против  первого  из
великанов и после долгой и жестокой борьбы убили его.
     Имир был так огромен, что в крови, хлынувшей из его ран, потонули все
остальные великаны, утонула и корова Аудумбла. Лишь одному из внуков Имира
- Бергельмиру удалось построить лодку, на которой он и  спасся  вместе  со
своей женой.
     Теперь уже никто не мешал богам устраивать мир по своему желанию. Они
сделали из тела Имира землю, в виде плоского круга, и поместили ее посреди
огромного моря, которое образовалось из  его  крови.  Боги  назвали  землю
"Митгард", что означает "средняя страна". Затем братья взяли череп Имира и
сделали из него небесный свод, из его костей они сделали горы, из волос  -
деревья, из зубов - камни, а из мозга - облака. Каждый  из  четырех  углов
небесного свода боги свернули в форме рога и  в  каждый  рог  посадили  по
ветру: в северный - Нордри, в южный - Судри,  в  западный  -  Вестри  и  в
восточный - Аустри. Из искр,  вылетавших  из  Муспельхейма,  боги  сделали
звезды и украсили ими небесный свод. Часть звезд они укрепили  неподвижно,
другие же, для того  чтобы  узнавать  время,  разместили  так,  чтобы  они
двигались по кругу, обходя его за один год.
     Сотворив мир, Один и его братья задумали  его  населить.  Однажды  на
берегу моря они нашли два дерева: ясень и ольху. Боги срубили их и сделали
из ясеня мужчину, а из ольхи - женщину. Затем один из богов вдохнул в  них
жизнь, другой дал им разум, а третий - кровь и румяные щеки. Так появились
первые люди, и звали их: мужчину - Аск, а женщину - Эмбла.
     Не забыли боги и великанов. За морем,  к  востоку  от  Митгарда,  они
создали страну Йотунхейм  и  отдали  ее  во  владение  Бергельмиру  и  его
потомкам.
     Со временем  богов  стало  больше:  у  старшего  из  братьев,  Одина,
родилось много детей, они построили для себя страну высоко  над  землей  и
назвали ее Асгардом, а себя Асами, но и об Асгарде и об Асах мы  расскажем
вам позже, а сейчас послушайте о том, как были созданы луна и солнце.



                          МУНДИЛЬФЕРИ И ЕГО ДЕТИ

     Невесело жилось первым людям. Во всем мире царила вечная ночь, и лишь
тусклый, мерцающий свет звезд немного рассеивал темноту. Солнца и луны еще
не было, а без них на полях  не  зеленели  посевы,  а  в  садах  не  цвели
деревья.  Тогда,  чтобы  осветить  землю,  Один  и  его  братья  добыли  в
Муспельхейме огонь и сделали из него луну и солнце, самое лучшее  и  самое
красивое из всего, что им когда-нибудь удавалось создать. Боги были  очень
довольны плодами своего труда, но никак не могли придумать, кто  же  будет
возить солнце и луну по небу.
     В это самое время жил на земле человек, по имени Мундильфери, и  были
у него дочь и сын необыкновенной красоты. Мундильфери  так  ими  гордился,
что, прослышав о замечательных творениях богов, назвал свою дочь Суль, что
означает солнце, а сына - Мани, то есть луна.
     "Пусть все знают,  что  сами  боги  не  могут  создать  ничего  более
прекрасного, чем мои дети", - думал он в своем  высокомерии.  Но,  однако,
вскоре ему и  этого  показалось  мало.  Узнав,  что  в  одном  из  селений
неподалеку живет юноша, лицо которого так красиво, что  сияет,  как  самая
яркая звезда, за что его и прозвали Глен, что  есть  "блеск",  Мундильфери
решил женить его на своей  дочери,  чтобы  дети  Глена  и  Суль  были  еще
красивее отца с матерью и все остальные  люди  на  земле  им  поклонялись.
Замысел гордеца стал известен богам, и вот в  тот  самый  день,  когда  он
собирался выдать дочь замуж, перед ним неожиданно появился Один.
     - Ты очень горд, Мундильфери, - сказал он, -  так  горд,  что  хочешь
сравниться с богами. Ты хочешь, чтобы люди поклонялись  не  нам,  а  твоим
детям и детям твоих детей и служили им. За это мы решили наказать тебя,  и
отныне Суль и Мани будут служить  людям,  возя  по  небу  луну  и  солнце,
именами которых они названы. Тогда все увидят, может ли их красота затмить
красоту того, что создано руками богов.
     Пораженный ужасом и горем, Мундильфери не  мог  вымолвить  ни  слова.
Один же взял Суль и Мани и поднялся с ними на небо. Там боги посадили Суль
в запряженную парой белых коней колесницу,  на  переднем  сиденье  которой
было  укреплено  солнце,  и  приказали  ей  весь  день  ездить  по   небу,
останавливаясь только на ночь. Чтобы солнце не сожгло девушку, братья-боги
закрыли ее большим круглым  щитом,  а  чтобы  коням  не  было  жарко,  они
повесили им на грудь кузнечные мехи, из которых все  время  дует  холодный
ветер. Мани тоже дали колесницу, на которой он должен был возить по  ночам
луну. С тех пор брат и сестра верно служат людям,  освещая  землю:  она  -
днем, а он - ночью. На полях весело зеленеют  хлеба,  в  садах  наливаются
соком  плоды,  и  никто  уже  не  помнит  того  времени,  когда   в   мире
господствовал мрак и всего этого не было.



                              ЭЛЬФЫ И ГНОМЫ

     С того дня, когда на небе впервые зажглось  солнце,  жизнь  на  земле
стала веселее и радостнее. Все люди мирно трудились на  своих  полях,  все
были довольны, никто не хотел стать знатнее и богаче другого. В те времена
боги часто покидали Асгард и странствовали по  свету.  Они  научили  людей
копать землю и добывать из нее  руду,  а  также  сделали  для  них  первую
наковальню, первый молот и первые клещи,  с  помощью  которых  были  потом
изготовлены все остальные орудия и инструменты. Тогда не было ни войн,  ни
грабежей, ни воровства, ни клятвопреступлений. В  горах  добывалось  много
золота, но его не копили, а делали из него посуду и домашнюю утварь -  вот
почему этот век и называется "золотым".
     Как-то раз, роясь в земле в поисках  железной  руды,  Один,  Вили  Ве
нашли в ней червей, которые завелись в мясе Имира. Глядя на эти  неуклюжие
существа, боги невольно задумались.
     - Что нам с ними делать, братья? - произнес  наконец  Ве.  -  Мы  уже
населили весь мир, и эти черви никому не нужны. Может быть, их надо просто
уничтожить?
     - Ты ошибаешься, - возразил Один. - Мы  населили  только  поверхность
земли, но забыли про ее недра. Давайте  лучше  сделаем  из  них  маленьких
человечков-гномов или черных эльфов  и  дадим  им  во  владение  подземное
царство, которое будет называться Свартальфахейм, то  есть  Страна  черных
эльфов.
     - А если им надоест там  жить  и  они  захотят  подняться  наверх,  к
солнцу? - спросил Вили.
     - Не бойся, брат, - ответил Один. - Я  сделаю  так,  чтобы  солнечные
лучи превращали их в камень. Тогда им  придется  всегда  жить  только  под
землей.
     - Я согласен с тобой, - сказал Ве. - Но мы забыли не только про недра
- мы забыли про воздух. Давайте превратим одних из этих  червей  в  черных
эльфов, или гномов, как сказал Один, а других - в светлых эльфов и поселим
их в воздухе между землей и  Асгардом,  в  Льесальфахейме,  или  в  Стране
Светлых эльфов.
     Остальные боги согласились с ним. Так появились в мире эльфы и  гномы
и две новые страны: Свартальфахейм и Льесальфахейм.
     Черные  эльфы,  которых  обычно  называют   гномами,   вскоре   стали
искуснейшими мастерами. Никто лучше их не  умел  обрабатывать  драгоценные
камни и металлы, и, как вы еще узнаете  впоследствии,  сами  боги  нередко
обращались к ним за помощью.
     В то время, как их собратья работали в недрах  земли,  светлые  эльфы
трудились на ее поверхности. Они научились  выращивать  самые  красивые  и
ароматные цветы и с тех пор каждый год покрывают ими землю, чтобы она была
еще лучше и еще прекраснее.



                                  НОРНЫ

     Беззаботно и счастливо жили  люди  в  золотом  веке,  но  недолго  он
продолжался. Однажды с востока, из страны великанов, в Митгард пришли  три
женщины. Одна из них была уже стара и дряхла и звалась  Урд  -  прошедшее,
другая была средних лет и ее звали Верданди - настоящее,  третья  же  была
совсем юна и носила имя Скульд -  будущее.  Эти  три  женщины  были  вещие
норны, волшебницы, наделенные чудесным даром определять судьбы мира, людей
и даже богов.
     - Скоро, очень скоро жажда золота, жажда наживы  проникнет  в  сердца
людей, и тогда золотой век окончится, - сказала старшая норна.
     - Люди будут убивать и  обманывать  друг  друга  ради  золота.  Много
славных героев ослепит оно своим блеском, и они погибнут в борьбе за него,
- произнесла средняя из них.
     - Да, все будет так, как вы сказали, - подтвердила младшая  норна.  -
Но пройдет время, когда золото потеряет свою власть над  людьми,  и  тогда
они снова будут счастливы, - добавила она.
     - Жажда золота овладеет не только людьми, но и  богами,  и  они  тоже
будут проливать кровь и нарушать свои клятвы, - вновь заговорила старшая.
     - Великаны начнут войну с богами. Эта война будет продолжаться  много
лет и закончится гибелью и богов и великанов, - сказала средняя.
     - Да, будет так, как вы сказали, но не все боги погибнут. Их  дети  и
те из них, кто не повинен в убийствах и клятвопреступлениях,  останутся  в
живых и будут править новым миром, который возникнет после гибели старого,
- возразила младшая.
     И вот все в мире стало происходить  так,  как  предопределили  норны.
Постепенно в сердца людей закралась алчность, жажда наживы. Многие из  них
оставили свой мирный труд и сменили сохи и лопаты на мечи и  копья,  чтобы
воевать друг с другом,  а  вместе  с  войнами  на  землю  пришли  нужда  и
преступления. Солнце на небе продолжало светить по-прежнему, но никто  под
ним уже не был так счастлив, как прежде.  Сбылось  и  другое  предсказание
норн:  между  богами  и  великанами  началась  жестокая  борьба,   которая
продолжается и по сей день. Бессильные достигнуть Асгарда и победить Асов,
Гримтурсены - так, если вы помните, называют себя великаны - обрушили весь
свой гнев на людей. Потомкам Имира, рожденного из льда и огня,  подвластны
все враждебные человеку стихии. Великаны посылают на землю мороз и засуху,
бури и град, а порой  сбрасывают  с  гор  огромные  лавины,  под  которыми
исчезают целые селения. Чтобы  защитить  Митгард  от  их  нападения,  боги
окружили его высоким кольцом гор, которые они сделали из бровей Имира,  но
великанам часто удается перебраться через них, и горе тому, кто  попадется
им на пути. Желая погубить мир, Гримтурсены натравили на луну и на  солнце
двух огромных волков: Скеля и Гети. С тех пор Скель гоняется за солнцем, а
Гети - за луной, и Суль и Мани вынуждены убегать от них до тех  пор,  пока
не скроются за горами. Лишь одного из Асов боятся великаны, и  этот  Ас  -
бог грома Тор. Но теперь нам пора уже рассказать вам об Асгарде и об Асах.



                               АСГАРД И АСЫ

     Высоко-высоко над облаками, так высоко, что ни один даже самый зоркий
человек не может ее увидеть, лежит прекрасная страна богов Асгард. Тонкий,
но прочный мост Бифрест - люди называют его радугой - соединяет  Асгард  с
землей, но плохо придется тому, кто осмелится по нему  подняться.  Красная
полоса, которая тянется вдоль, - это вечное, никогда не потухающее  пламя.
Безвредное для бог в, оно сожжет любого  смертного,  который  осмелится  к
нему прикоснуться.
     Посреди Асгарда  подымается  вершина  исполинского  ясеня  Игдразиля.
Ветви Игдразиля раскинулись над всем миром, а корни лежат в трех странах -
Нифльхейме, Йотунхельме и  Митгарде.  Из-под  этих  корней  бьют  чудесные
источники. Первый, Гергельмир, находился в  Нифльхейме  -  о  нем  вы  уже
слышали, второй течет в Йотунхейме. Это источник мудрости. Грозный великан
Мимир, самый могучий из всех великанов, стережет его воды и никому не дает
из него напиться. Вот почему источник мудрости называют  также  источником
Мимира.
     Третий источник, Урд, бьет в Митгарде. Он так прозрачен и  чист,  что
каждый, кто искупается в нем, становится белым как снег.  По  вечерам  над
Урдом густым туманом подымается медовая роса. Она окропляет все  цветы  на
земле, а потом ее собирают пчелы и делают мед.
     У источника Урд поселились вещие  норны.  Здесь  стоит  их  роскошный
дворец, в котором они определяют судьбы людей с первого дня  их  жизни  до
самой смерти.
     Вершина ясеня Игдразиля называется Лерад. На  ней  сидит  исполинский
орел, а по ее ветвям прыгает взад  и  вперед  проказница  белка  Ротатеск.
Около Лерада, на высочайшем месте  Асгарда,  стоит  трон  владыки  мира  и
старейшего из богов - Одина. С этого трона он видит все, что делается и  в
Асгарде, и в Митгарде, и даже в далеком Йотунхейме.
     Один - отец Асов и мудрейший из них. Когда-то, еще  в  молодости,  он
пришел к великану Мимиру и попросил у него разрешения напиться воды из его
источника.
     - Ничего не дается даром, а особенно ум, - отвечал великан. -  Скажи,
что я получу от тебя взамен?
     - Все, что хочешь, - сказал Один. - Мне ничего не  жаль,  потому  что
мудрость дороже всего.
     - Тогда отдай мне свой правый глаз, - потребовал Мимир.
     Один призадумался, но потом ответил:
     - Хорошо, Мимир, я согласен. Умный и одним глазом видит  больше,  чем
глупый двумя.
     С тех пор у одина остался один левый глаз, но зато он испил  воды  из
источника мудрости и для него  нет  больше  тайн  ни  в  настоящем,  ни  в
будущем.
     На плечах у владыки мира сидят два ворона: Гугин и Мумин, а у его ног
лежат волки Гери и Фреки. Гугин и Мумин каждый день облетают землю, а Гери
и Фреки каждую ночь обегают ее и рассказывают хозяину обо  всем,  что  они
видели и слышали.
     На голове Одина - крылатый золотой шлем, а в правой  руке  он  держит
копье Гунгнир, которое никогда не пролетает мимо цели и поражает  насмерть
всякого, в кого попадает.  Конь  отца  богов,  восьминогий  серый  жеребец
Слейпнир, может скакать не только по земле, но и по воздуху. Владыка  мира
часто объезжает на нем землю или, невидимый для людей, принимает участие в
их сражениях, помогая достойнейшим одержать победу.
     Один любит ходить пешком.  Под  видом  бедного  странника,  в  старой
широкополой шляпе и в таком же старом синем  плаще,  он  бродит  по  всему
свету, и плохо бывает тому, кто, забыв  законы  гостеприимства,  оттолкнет
его от своего порога.
     Дворец Одина, Валгалла, самый большей и красивый  в  Асгарде.  В  нем
пятьсот сорок просторных залов, в которых живут храбрые  воины,  павшие  в
битве с врагом. Здесь они едят мясо огромного  вепря  Сэримнира,  которого
каждый день режут и варят и который на следующее утро вновь оживает  точно
таким же, как и был, и пьют крепкое, как старый мед, молоко козы  Гейдрун,
которая пасется у вершины ясеня Игдразиля, обгладывая его ветви и  листья,
и дает столько молока, что его хватает на всех жителей Асгарда.
     Только старейший из Асов, Один, не нуждался в  пище:  он  никогда  не
ест, а живет лишь тем, что пьет мед или брагу.
     Кроме Одина, в Асгарде живут еще двенадцать богов-Асов.
     Первым из них по праву считается старший сын  Один,  бог  грома  Тор,
могучий рыжебородый богатырь. Он те так мудр, как его  отец,  но  зато  во
всем мире нет нет никого равного ему по силе, как нет на  земле  человека,
который бы смог перечислить все его подвиги. Тор - сын богини земли  Йорд.
Он покровительствует крестьянам-хлебопашцам и зорко  охраняет  их  дома  и
поля от нападений злобных великанов Гримтурсенов.  Недаром  люди  говорят,
что, если бы не было Тора, великаны уничтожили бы весь мир.
     Бог грома велик и тяжел, и его не может выдержать ни одна  лошадь,  а
поэтому он ходит пешком, или ездит  по  небу  в  своей  окованной  железом
колеснице, запряженной  двумя  козлами:  Тангиостом  и  Тангризниром.  Они
быстрее ветра, быстрее даже восьминогого жеребца Одина мчат своего хозяина
через моря, леса и горы.
     У Тора, есть волшебный пояс, который в два раза увеличивает его силу,
на руках у него толстые железные рукавицы, а вместо копья, меча, или  лука
он носит тяжелый железный  молот  Мйольнир,  разбивающий  вдребезги  самые
толстые и крепкие скалы.
     Тор редко бывает в Асгарде: он дни и  ночи  сражается  на  востоке  с
великанами. Но, когда Асам  угрожает  опасность,  им  стоит  только  вслух
произнести его имя, и бог грома сейчас же является на помощь.
     Младшего брата Тора, сына Одина и богини Фригг, зовут Бальдр. Он  так
красив и чист душой, что от него исходит сияние.  Бальдр  -  бог  весны  и
самый добрый среди Асов. С его приходом на земле пробуждается жизнь и  все
становится краше.
     Бог войны Тир, сын владыки мира и сестры морского великана Гимира,  -
третий из Асов после Одина и храбрейший среди них. У него одна левая рука,
так как правую он потерял, спасая богов от одного страшного чудовища -  от
какого, вы узнаете потом, - но это не мешает Тиру быть искусным  воином  и
принимать участие в сражениях.
     Хеймдалль - его называют также Мудрым Асом - верный  страж  радужного
моста. Он видит и днем и ночью на расстоянии ста миль и слышит, как растет
трава в поле и шерсть на овцах. Мудрый Ас спит меньше чем птицы, и сон его
так же чуток, как и у них. Его зубы из чистого золота, а у его пояса висит
золотой рог, звуки которого слышны во всех странах мира.
     Браги - бог поэтов и скальдов. Никто  не  умеет  так  хорошо  слагать
стихи и песни, как он, и всякий, кто хочет стать  поэтом,  должен  просить
его покровительства.
     Год, или Слепой Ас, так же как и Тир, Хеймдалль и Браги, - сын Одина.
Он обладает огромной силой, но никогда не покидает Асгард и редко  выходит
из своего дворца.
     Бога Видара зовут Молчаливым Асом, так как он не любит  говорить,  не
смотря на то, что очень  мудр  и  храбр.  Молчаливый  Ас  -  сын  Одина  и
великанши Грид - почти так же могуч как и бог грома Тор.
     Вали лучше всех владеет оружием и  в  сражениях  не  уступает  самому
Тиру, но он плохой советчик и не очень мудр.
     Пасынок Тора, Улль, - замечательный стрелок из лука. Все  его  стрелы
попадают в цель, как бы далека и мала она не была. Улль также быстрее всех
бегает на лыжах. От него этому искусству научились и люди.
     Бог Нйодр - не Ас. Он происходит из рода духов ванов,  о  которых  вы
услышите позже. Он покровительствует мореплаванию, и ему подвластны  ветры
и Море. Нйодр богаче всех Асов и, как все Ваны, очень добр.
     Его сын Фрейр, бог лета, мало уступает в красоте самому Бальдру и так
же добр, как и его отец Нйодр. Фрейр, посылает людям богатые урожаи. Он не
любит войн и ссор и покровительствует миру на земле как  между  отдельными
людьми, так и между целыми народами.
     Последний из богов, бог огня Локи, не Ас и не Ван. Он  происходит  из
рода великанов, но Асы уже давно разрешили ему жить с ними  в  Асгарде  за
его необыкновенный ум и хитрость. Локи высок ростом, смел и красив, но  он
очень зол и коварен. Своими проделками и шалостями он часто подвергал Асов
большим опасностям, из которых потом выручал их  своей  изворотливостью  и
сообразительностью. От бога огня всегда можно было  ожидать  и  плохого  и
хорошего, и поэтому никто не мог на него положиться.
     Над живущими в Асгарде богинями по праву царствует жена Одина, богиня
Фригг. Она столь же мудра, как и владыка мира, но  никогда  не  говорит  о
том, что знает. Подобно своему мужу, Фригг часто спускается  на  землю  и,
переодетая, бродит среди людей, внимая их горестям и заботам.
     Дочь Нйодра и сестра Фрейра, богиня любви Фрейя - ее  называют  также
Ванадис, потому что она тоже из рода  Ванов,  -  первая  в  Асгарде  после
Фригг. Равных ей по красоте не было и нет во всем мире ни среди богов,  ни
среди людей, а ее сердце так мягко  и  нежно,  что  сочувствует  страданию
каждого. У Фрейи есть волшебное  соколиное  оперение,  надев  которое  она
часто летает над облаками, и  чудесное  золотое  ожерелье  Бризингамен,  а
когда она плачет, из ее глаз капают золотые слезы.
     Жена Браги, нежная и  кроткая  Идун,  -  богиня  вечной  юности.  Она
скромна и тиха, но без нее Асов уже давно не было бы в живых. У Идун  есть
корзина с яблоками вечной  молодости,  которыми  она  угощает  богов.  Эта
корзина волшебная; она никогда не пустеет, так как взамен каждого вынутого
яблока в ней тот час же появляется новое.
     Богиня Эйр - покровительница врачей. Она  излечивает  все  болезни  и
раны.
     Мать Тора, Йорд, - богиня земли, а его жена Сиф, - богиня плодородия.
Красотой Сиф уступает лишь Фрейе, а таких волос, как у нее нет ни у кого в
мире.
     Богиня Лефн освящает браки между людьми; богиня Син охраняет их  дома
от воров, а Сйофн старается, чтобы они жили мирно и дружно.
     Богиня истины Вар выслушивает и записывает  клятвы  людей,  а  богини
Фулла, Сага, Глин и Гна прислуживают Фригг и выполняют ее поручения.
     Кроме богов и богинь, в Асгарде живут прекрасные  девы-воительницы  -
Валькирии. Их  предводительница  -  Фрейя.  Валькирии  невидимо  принимают
участие в каждой битве, давая победу тому,  кому  ее  присуждают  боги,  а
потом уносят павших воинов в Валгаллу и там прислуживают им за столом.
     Так устроен Асгард, и таковы его жители. А теперь,  когда  вы  знаете
всех Асов, послушайте рассказы об  их  замечательных  делах.  О  том,  что
случилось с богами раньше, о том, что с ними будет в последний день  мира.
О подвигах могучего Тора, о проделках коварного бога огня и о его страшных
детях.



                                 ДЕТИ ЛОКИ

     Однажды, это было еще до того, как великаны начали войну с Асами, бог
огня Локи, странствуя по свету, забрел в Йотунхейм и прожил там три года у
великанши Ангрбоды. За это время она родила ему трех детей: девочку  Хель,
змею Йормундгад и волчонка Фенриса. Вернувшись обратно в Асгард, бог  огня
никому не рассказал о своем пребывании в стране великанов,  но  всеведущий
Один скоро узнал о детях Локи и отправился к источнику Урд, чтобы спросить
вещих норн об их дальнейшей судьбе.
     - Смотрите, смотрите, сам мудрый отец  богов  пришел  к  нам!  Но  он
услышит от нас недобрые вестей, - едва увидев его, сказала старшая норна.
     - Он пришел услышать от нас  то,  что  надолго  лишит  его  покоя,  -
добавила средняя норна.
     - Да, он пришел услышать от нас о детях Локи и великанши Ангрбоды,  -
подтвердила младшая из норн.
     - Если вы знаете, зачем я к вам  пришел,  так  ответьте  мне  на  тот
вопрос, который я хотел вам задать, - сказал Один.
     - Да, мы ответим тебе, - вновь заговорила Урд. - Но лучше бы тебе  не
слышать наших слов. Знай, что те, о ком ты хотел спросить, принесут  богам
много несчастий.
     - Двое из них принесут смерть тебе и твоему старшему сыну,  а  третья
будет царствовать после вас, и ее царство будет царством тьмы и смерти,  -
добавила Верданди.
     - Да, волк убьет тебя, а змея - Тора,  но  и  они  сами  погибнут,  а
царство третьей будет недолгим: жизнь одержит победу над смертью, а свет -
над тьмой, - сказала Скульд.
     Печальный и озабоченный возвратился владыка мира в Асгард.  Здесь  он
созвал всех богов и поведал им  о  предсказании  норн,  а  Тора  послал  в
Йотунхейм за детьми Локи. С тревогой выслушали Асы  слова  Одина,  но  еще
больше испугались они, когда бог грома привез с собой на  своей  колеснице
Хель, Йормундгад и Фенриса.
     Еще совсем юная Хель была уже на две головы  выше  своей  исполинской
матери. Левая половина ее лица была красной, как сырое мясо,  а  правая  -
иссиня-черной, как беззвездное небо страны вечной ночи.  Змея  Йормундгад,
вторая дочь Ангрбоды, еще  не  успела  вырасти  -  в  ней  было  не  более
пятидесяти шагов, - однако из ее пасти уже сочился смертельный  яд,  а  ее
холодные светло-зеленые глаза сверкали беспощадной злобой. По сравнению  с
обеими  сестрами  их  младший  брат,  волчонок  Фенрис,   казался   совсем
безобидным. Ростом с обычного взрослого  волка,  веселый  и  ласковый,  он
понравился богам, которые не нашли в нем ничего опасного для себя.
     Один, сидя на своем троне, внимательно оглядел всех троих.
     - Слушай меня, Хель, - произнес он. - Ты так велика и сильна, что  мы
решили сделать тебя повелительницей целой страны. Эта страна лежит глубоко
под землей, и даже под Свартальфахеймом. Ее населяют  души  умерших,  тех,
кто не достоин жить с нами в Валгалле. Ступай туда  и  никогда  больше  не
появляйся на поверхности земли.
     - Я согласна, - сказала Хель, наклоняя голову.
     - Ты, Йормундгад, - продолжил Один, - будешь  жить  на  дне  мирового
моря. Там для тебя найдется довольно места и пищи.
     - Я согласссс-на, -  прошипела  Йормундгад,  сворачиваясь  кольцом  и
глядя на богов жестоким немигающим взглядом.
     - А ты, Фенрис, - промолвил Один, обращаясь к волчонку, - будешь жить
у нас в Асгарде, и мы воспитаем тебя сами.
     Фенрис ничего не ответил: он был так мал и  глуп,  что  еще  не  умел
говорить.
     В тот же день Хель отправилась в царство мертвых, где и живет до  сих
пор, повелевая душами умерших и зорко следя за тем, чтобы ни одна  из  них
не вырвалась на свободу.
     Змея Йормундгад опустилась на дно мирового моря. Там она все росла  и
росла, так что наконец опоясала кольцом всю землю  и  положила  голову  на
собственный хвост.  С  этого  дня  ее  перестали  называть  Йормундгад,  а
прозвали змея Митгард, что означает "Мировая змея".
     Фенрис целый год жил в Асгарде, но и он с каждым часом становился все
больше и больше,  и  вскоре  из  игривого  волчонка  превратился  в  такое
чудовище, что уже никто из богов,  кроме  бога  войны  Тира,  который  его
кормил, не решался подойти к нему близко.
     Тогда Асы решили привязать Фенриса и больше месяца трудились, пока не
сковали цепь, которая, как они  думали,  сможет  его  удержать.  Эта  цепь
называлась Лединг и была самой толстой цепью на свете.  Боги  принесли  ее
волчонку и сказали:
     - Ты уже вырос,  Фенрис.  Пора  тебе  испытать  свои  силы.  Попробуй
разорвать цепь, которую мы сделали, и тогда ты будешь достоин жить с  нами
в Асгарде.
     Фенрис внимательно звено за звеном осмотрел Лединг и ответил:
     - Хорошо, наденьте мне ее на шею.
     Довольные Асы сейчас же исполнили его желание и надели на него цепь.
     - А теперь отойдите подальше, - сказал волчонок.
     С этими словами он приподнялся, встряхнул головой, и Лединг со звоном
разлетелся на куски.
     - Вот видите, я достоин жить среди вас, - гордо заявил Фенрис,  снова
ложась на свое место.
     - Да, да, Фенрис, ты достоин жить среди нас, -  переглядываясь  между
собой, отвечали испуганные Асы  и  поспешили  уйти,  чтобы  начать  делать
вторую цепь.
     На этот раз они работали целых три месяца, и выкованная цепь, Дромми,
оказалась в три раза толще, чем Лединг.
     - Ну, уж ее-то Фенрису не  разорвать,  -  говорили  они  друг  другу,
весело неся Дромми волчонку.
     Однако, когда он встал, чтобы их поприветствовать,  и  они  заметили,
что его спина уже возвышается над гребнем крыше Валгаллы, веселость  богов
сразу прошла.
     Увидев Дромми, Фенрис оглядел ее так же внимательно, как  перед  этим
Лединг.
     - Ваша новая цепь намного толще старой, - сказал он, - но и мои  силы
прибавились, и я с удовольствием попробую.
     И он подставил богам свою  шею.  Асы  надели  на  нее  цепь,  и  едва
волчонок повернул голову, как цепь лопнула и упала на землю.
     Пораженные ужасом, боги снова собрались на совет.
     - Нам незачем делать третью цепь, - говорили они, - все  равно,  пока
мы ее скуем, Фенрис вырастет еще больше и разорвет ее так же,  как  и  две
первых.
     - Хорошо, тогда обратимся за помощью к гномам, - сказал Один. - Может
быть, им удастся то, что не удалось нам.
     И,  вызвав  к  себе  гонца  асов,   Скирнира,   он   послал   его   в
Свартальфахейм.
     Услышав просьбу отца богов, гномы долго спорили между собой, не зная,
из какого металла ковать цепь, но наконец старейший из них сказал:
     - Мы сделаем ее не из металла, а из корней гор, шума кошачьих  шагов,
бород женщин, слюны птиц, голоса рыб и сухожилий медведей, и я думаю,  что
такую цепь не разорвет даже Фенрис.
     Так и случилось, что спустя еще два месяца Скирнир принес богам  цепь
Глейпнир, сделанную по совету старейшего из гномов... А кошачьи шаги стали
с тех пор бесшумными, у женщин нет бород, у гор - корней, у птиц -  слюны,
у медведей - сухожилий, а у рыб - голоса.
     Когда Асы впервые увидели Глейпнир, они были очень удивлены. Эта цепь
была не толще руки и мягка, как шелк, однако чем сильнее  ее  растягивали,
тем прочнее  она  становилась.  Теперь  оставалось  только  надеть  ее  на
Фенриса, но боги решили сначала отвести его на остров  Лингви,  лежащий  в
мировом море, где бы волчонок не мог причинить вреда ни им, ни людям.
     - Ты должен подвергнуться  последнему  и  самому  важному  испытанию,
Фенрис, - объявили они младшему из детей Локи. - Если  ты  его  выдержишь,
твоя слава разнесется далеко по  всему  свету,  но  для  этого  ты  должен
последовать за нами туда, куда мы тебя отведем.
     - Я готов, - согласился Фенрис.
     Однако, когда Асы привели его на остров Лингви и хотели было накинуть
на него Глейпнир, волчонок сердито оскалил зубы.
     - Эта цепь так тонка, - заявил он, -  что,  если  она  не  волшебная,
разорвать ее ничего не стоит, а  если  она  волшебная,  то  я  могу  и  не
разорвать ее, несмотря на всю мою силу. Значит, я или  не  добуду  никакой
силы, или сделаюсь вашим пленником.
     - Ты ошибаешься, Фенрис, - возразил Один.  -  Если  ты  не  разорвешь
нашей цепи, значит ты настолько слаб, что нам нечего тебя бояться и мы тут
же дадим тебе свободу, если же ты ее разорвешь, то ты ничего не потеряешь.
     - Мудреные вещи ты говоришь,  -  усмехнулся  волчонок.  -  Хорошо,  я
позволю вам подвергнуть себя этому испытанию, только пускай кто-нибудь  из
вас вместо залога положит мне в пасть свою руку.
     Асы невольно  опустили  головы,  и  только  Тир  бесстрашно  выступил
вперед.
     - Я согласен, - сказал он и сунул свою руку в пасть Фенрису.
     Тот осторожно сжал ее своими острыми зубами.
     - А теперь наденьте на меня цепь, - произнес он глухо.
     Облегченно вздохнув, но со страхом поглядывая на Тира, боги  накинули
на шею  волчонку  Глейпнир,  другой  конец  которого  уже  заранее  прочно
прикрепили к огромной скале. Фенрис  потряс  головой,  потом  потянул  все
сильнее и сильнее, но чудесная цепь не разрывалась.
     - Нет, - прохрипел наконец полузадушенный волчонок, - я  не  могу  ее
разорвать, освободите меня!
     Асы не двинулись с места.
     - Ах, так, значит, вы меня обманули! - бешено зарычал Фенрис.
     Одним движением челюстей он откусил руку у Тира и,  скрежеща  зубами,
бросился на остальных Асов. Навстречу ему выступил Хеймдалль и воткнул ему
в пасть меч с двумя клинками. Концы этих клинков  вонзились  в  верхнюю  и
нижнюю челюсти волчонка, и тот, не в силах их закрыть,  завыл  от  боли  и
злобы.
     Пока одни из богов перевязывали рану Тира, другие, во главе с Одином,
взяли скалу, к которой был привязан Фенрис, и опустили  ее  вместе  с  ним
глубоко под землю, где этот страшный волк живет и поныне, продолжая  расти
и набираться сил и поджидая  той  минуты,  когда  исполнится  предсказание
норн.
     Так Асам удалось на долгое время избавиться от  страшных  детей  бога
огня, а вскоре они получили замечательное оружие и против великанов, и вот
как это случилось.



                                 ВОЛОСЫ СИФ

     Мы уже говорили о том, что жена Тора, богиня плодородия Сиф, уступает
по красоте лишь одной Фрейе и славится на весь мир  своими  замечательными
волосами. Теперь мы расскажем о том, как она их получила.
     Когда-то в старину у Сиф были длинные белокурые волосы, которыми  она
очень гордилась, но однажды Локи из зависти к Тору прокрался к ней ночью и
остриг спящую богиня наголо. Коварный бог еще не успел  далеко  уйти,  как
Сиф уже проснулась и, заметив пропаже своих волос, с громким плачем  стала
призывать Тора. Примчавшись на зов и увидев остриженную голову своей жены,
бог грома долго не мог прийти в себя от удивления, но потом понял,  в  чем
дело,  и  тогда  его  удивление  сменилось  яростью.  Тору  нетрудно  было
догадаться, кто сыграл с Сиф такую  злую  шутку,  и  он  тут  же  бросился
разыскивать Локи.
     Очень довольный своей проделкой, бог огня спокойно сидел под  ветвями
Лерада, с интересом глядя на забавные прыжки белки Ротатеск,  когда  перед
ним неожиданно появилась могучая фигура сильнейшего из Асов.
     Густые, жесткие волосы Тора стояли дыбом, глаза  налились  кровью,  и
даже его рыжая борода и та тряслась от бешенства.
     - Готовься к смерти, Локи, - прогремел он,  -  потому  что  сейчас  я
переломаю тебе все кости!
     - Пощади меня, Тор, - пролепетал не на шутку испуганный бог  огня.  -
Пощади меня, и я исправлю свою вину.
     - Ты лжешь, обманщик!  Как  сможешь  ты  вернуть  Сиф  ее  волосы?  -
возразил Тор.
     - Я сейчас же отправлюсь к гномам, Тор, - ответил Локи. - Ты  знаешь,
какие прекрасные вещи они делают. Они сумеют изготовить и волосы, и притом
из чистого золота. Клянусь тебе в этом!
     Тор знал, что даже  такой  отъявленный  лгун,  как  Локи,  и  тот  не
осмелится нарушить клятву, а поэтому сдержал свой гнев и отпустил  хитрого
бога.
     Довольный тем, что так легко отделался, Локи,  не  медля  ни  минуты,
стрелой помчался в страну гномов.
     Среди этих подземных жителей было немало замечательных  мастеров,  но
особенно славились среди них своим искусством братья Ивальди. К  ним-то  и
направился Локи. Услышав его просьбу, братья-гномы очень обрадовались.  Им
уже давно хотелось показать богам свое  необыкновенное  искусство,  и  они
сейчас же принялись за работу. Не прошло и часа, как волосы для  Сиф  были
уже готовы. Длинные и густые,  они  были  тоньше  паутины,  и,  что  самое
удивительное, стоило их приложить к  голове,  как  они  сейчас  же  к  ней
прирастали и начинали расти, как настоящие, хотя и были сделаны из чистого
золота.
     Облегченно вздохнув, бог огня встал и уже хотел было отнести их Тору,
но его остановил один из братьев.
     - Подожди немного, - сказал он, - мы еще не кончили свою работу.
     Локи послушался и остался, а гномы вновь  проворно  застучали  своими
небольшими молоточками и вскоре изготовили длинное,  покрытое  чудеснейшей
резьбой копье и корабль. Копье называлось Гунгнир. Оно обладало  волшебным
свойством поражать любую цель, пробивая самые толстые  щиты  и  панцири  и
разбивая на куски самые закаленные мечи. Еще замечательнее был корабль. Он
назывался "Скидбладнир", и в какую бы сторону он ни плыл, для него  всегда
дул попутный ветер. "Скидбладнир" был самым большим кораблем в мире, но  в
то же время он складывался так, как если бы был  сделан  из  обыкновенного
холста, и тогда становился таким маленьким, что его можно было заткнуть за
пояс, или положить за пазуху.
     Взяв корабль, копье и волосы, старший из братьев Ивальди передал  все
это Локи и сказал:
     - Эти изделия - наши подарки богам. Отнеси их в Асгард и отдай: копье
- Одину, корабль - Фрейру, а волосы - Тору.
     Локи поблагодарил братьев, взял их  подарки  и  весело  отправился  в
путь. Он уже почти дошел до границ подземного царства, как вдруг увидел  в
одной из пещер гнома Брока  и  его  брата  Синдри,  и  ему  захотелось  их
поддразнить.
     - Эй вы, горе-мастера! - закричал он. - Посмотрите-ка  сюда,  на  эти
прекрасные вещи, и поучитесь, как надо работать по-настоящему...
     Гном Синдри был опытный и искусный мастер.  Он  внимательно  осмотрел
волосы, корабль и копье, а потом сказал:
     - Спору нет, они сделаны прекрасно, но я могу  смастерить  и  кое-что
получше.
     - Ты просто жалкий хвастун! - воскликнул Локи. - Чего стоит все  твое
искусство по сравнению с искусством братьев Ивальди!  Я  готов  биться  об
заклад и ставлю свою голову против твоей,  что  тебе  никогда  не  удастся
сделать что-нибудь лучше этих волос, корабля и копья.
     - Ладно, - спокойно отвечал Синдри, -  поспорим  на  наши  головы;  и
предупреждаю тебя, что свою ты потеряешь,  потому  что  я  отрежу  ее  без
жалости. А теперь подожди немного, и ты увидишь, хвастун ли я.
     С  этими  словами,  Синдри  вошел  в  пещеру,  где   находилась   его
мастерская, положил в горящий горн кусок золота и приказал своему брату не
переставая, раздувать огонь кузнечными мехами.
     - Помни, что, если ты хотя бы на мгновение прервешь свою работу,  все
будет испорчено, - сказал он Броку и вышел из мастерской.
     Между тем Локи уже начал раскаиваться в том,  что  так  легкомысленно
прозакладывал свою голову, и решил во что бы то ни стало  помешать  Синдри
ее выиграть. Он превратился в муху и, усевшись на  лицо  Броку,  стал  изо
всех сил его щекотать. Брок морщился, тряс головой, но работы  не  бросал.
Вскоре в мастерскую вошел Синдри, и Локи  поспешил  принять  свой  обычный
вид.
     - Готово, - сказал Синдри. Он подошел к горну и вынул из него золотое
кольцо, красивее которого Локи еще не видел.  -  Это  кольцо  Драупнир,  -
продолжал Синдри. - Тому, кто наденет его на  палец,  оно  каждый  девятый
день будет приносить еще восемь точно таких же колец.
     - Сделано неплохо, - сказал  Локи,  -  но  корабль  и  копье  братьев
Ивальди сделаны лучше.
     Синдри ничего не ответил. Он положил в горн  старую  свиную  кожу  и,
повторив наказ брату ни в коем случае не прекращать работы,  снова  вышел.
Локи опять превратился в муху и с еще  большей  силой  принялся  кусать  и
щекотать лоб, щеки  и  шею  Брока.  Бедный  Брок  покраснел  как  рак.  Он
обливался потом и еле удерживался, чтобы не поднять  руку  и  не  прогнать
назойливую муху. Наконец, когда  его  терпение  уже  почти  истощилось,  в
мастерскую вошел Синдри и навстречу ему из горна выскочил огромный вепрь с
шерстью из чистого золота.
     - Это вепрь Гулинн-бурсти, - сказал гном. - Он быстр как  восьминогий
жеребец Одина, и может нести своего хозяина через леса, моря и горы так же
легко и свободно, как и по гладкой дороге.
     - Вепрь хорош, - сказал Локи, - но копье Гунгнир все-таки лучше.
     Синдри и на этот раз ничего не ответил. Он  положил  в  горн  большей
кусок железа и попросив своего брата  быть  особенно  внимательным,  опять
оставил его одного. Чувствуя, что его голова в опасности, Локи  под  видом
мухи еще яростнее набросился на Брока. Он уселся ему прямо на глаз и  стал
его безжалостно кусать. Брок взвыл от боли. Не в силах далее сдерживаться,
он бросил работу и схватился за глаз рукой, но в эту самую минуту в дверях
показался Синдри. Он быстро направился к горну и  вынул  из  него  тяжелый
железный молот.
     - Это молот Мйольнир, - сказал гном, обращаясь к  Локи,  который  уже
как ни в чем не бывало стоял в углу мастерской. - Во всем мире нет ничего,
что бы могло выдержать его удар, а поразив цель,  он  сам  возвращается  в
руки своего хозяина. Скажи-ка теперь, какое  из  изделий  братьев  Ивальди
может с ним сравниться?
     - Пойдем лучше к богам, - отвечал  смущенный  Локи,  -  и  пусть  они
решат, кто из нас выиграл спор.
     Синдри охотно согласился. Он взял молот, кольцо и  вепря,  а  Локи  -
волосы, копье и корабль, и оба тронулись в путь.
     Через несколько часов они пришли к источнику Урд, около которого боги
вершили свой суд, и увидели  здесь  Одина,  Фрейра  и  Тора,  сидевших  на
вершине одного из холмов. Локи выступил вперед и перевал:  Одину  -  копье
Гунгнир, Фрейру - корабль "Скидбладнир", а Тору - золотые волосы для  Сиф.
Затем к богам подошел Синдри. Он рассказал о своем споре с Локи  и  вручил
Одину кольцо Драупнир, Фрейру  -  вепря  Гулинн-бурсти,  а  Тору  -  молот
Мйольнир. Боги совещались недолго. Они единодушно признали Мйольнир лучшим
оружием против великанов, а поэтому и лучшим из  изделий  гномов  и  таким
образом решили спор в пользу Синдри.
     - Ну, Локи, - сказал довольный гном, -  прощайся  со  своей  головой,
потому что я ее отрежу.
     - Прежде чем отрезать мне  голову,  меня  нужно  сначала  поймать,  -
насмешливо отвечал Локи. - А для этого нужно бегать быстрее меня.
     С этими словами он надел свои крылатые сандалии и как  вихрь  умчался
прочь.
     - Это нечестно! - закричал Синдри. - Поймай его, Тор. Он проиграл мне
свою голову и должен ее отдать.
     Правда была на стороне Синдри, и Тор немедленно  бросился  в  погоню.
Ему нетрудно было поймать беглеца: как быстро  ни  мчался  бог  огня,  Тор
бежал еще скорее, и не прочло и получаса, как он вернулся назад,  таща  за
собой упирающегося Локи.
     - Теперь ты от меня не уйдешь! - радостно воскликнул Синдри, подбегая
к беглецу с ножом в руке.
     - Стой! - закричал Локи. - Стой! Я проиграл тебе только голову, а  не
шею. Шея моя, и ты не имеешь права ее трогать.
     Синдри остановился и задумался. Наконец он сказал:
     - Ты очень хитер и сумел спасти свою голову, потому что отрезать  ее,
не тронув шеи я не могу, но ты все же не уйдешь  безнаказанным.  Сейчас  я
зашью тебе твой лживый рот, чтобы ты уже никогда больше не мог хвастаться.
     С этими словами, Синдри достал из кармана шило, проткнул в нескольких
местах губы Локи и крепко сшил их ремнями. Увы! Не успел он  еще  скрыться
из глаз, как Локи уже освободился от ремней, стягивавших рот,  и  принялся
болтать и хвастаться по-прежнему.
     Боги не сердились на него за это. Как-никак, а ведь только  благодаря
его болтовне Один получил свое замечательное  кольцо,  Фрейр  -  не  менее
замечательного вепря, а Тор - молот, сделавший его грозой всех великанов.
     Не сердилась на Локи и Сиф. Да это и понятно: разве не  его  проделке
она обязана тем, что у нее теперь самые прекрасные волосы в мире.



                             "ПОЭТИЧЕСКИЙ МЕД"

     К западу от Асгарда с незапамятных  времен  лежит  Ванахейм,  царство
могучих и добрых духов Ванов. Эти духи никому не причиняют зла. Они  редко
выходят за пределы своей страны, и им не приходится встречаться с людьми и
великанами.
     Асы и Ваны долгие годы жили в мире друг с другом, но  как  только  из
Йотунхейма пришли норны  и  золотой  век  окончился,  Асы  все  с  большей
завистью стали смотреть на огромные  богатства  своих  соседей  и  наконец
решили отнять их силой.
     Получив от гномов Мйольнир, Тор тут же умчался на восток сражаться  с
великанами,  и  Один,  зная,  что  его  старший  сын  теперь  не  допустит
Гримтурсенов в Асгард, собрал богов и повел их в поход на Ванахейм.
     Духи смело вышли им навстречу, и владыка  мира,  метнув  в  них  свое
неотразимое копье, совершил первое  в  мире  убийство  из-за  золота.  Так
исполнилось еще одно предсказание норн - боги пролили кровь, за которую им
рано или поздно придется отдать свою.
     Начатая Асами война не принесла им ни желанного богатство, ни  славы.
Дружные и свободолюбивые Ваны отбили нападение богов и, прогнав их обратно
в Асгард, осадили его со всех сторон.  Тогда  Асы  поспешили  заключить  с
духами мир и обменялись с ними заложниками. Боги отдали  Ванам  Генира,  а
духи прислали им Нйодра вместе с его двумя детьми - Фрейром  и  Фрейей,  -
которые до сих пор живут в Асгарде. После этого все  Асы  и  Ваны  в  знак
вечной и нерушимой дружбы плюнули в большой золотой сосуд и из собранной в
нем слюны вылепили карлика Квазира.
     Сочетая в себе всю мудрость и все знания богов и  духов,  Квазир  был
самым умным и ученым существом на свете. Он был сведущ во  всех  науках  и
говорил на всех языках. Спустившись на землю, карлик некоторое время ходил
среди людей, пытаясь передать им свои огромные знания, но те думали только
о богатстве. Они торговали, воровали,  или  воевали  между  собой  и  мало
прислушивались к словам маленького  мудреца.  Тогда  Квазир  отправился  в
Свартальфахейм к черным гномам, но и они были заняты лишь тем, что усердно
собирали золото, серебро и драгоценные камни. Переходя  из  одного  жилища
гномов в другое, Квазир наконец пришел к двум братьям: Фйаляру и Галяру.
     - Я могу научить вас любой науке и любому искусству, - заявил  он.  -
Говорите, что бы вам хотелось узнать?
     - Разве ты так учен? - спросили его гномы.
     - Я ученей всех на свете! - гордо ответил маленький карлик.
     - Тогда расскажи нам, как устроен мир, - сказали братья.
     Радуясь, что нашел слушателей, Квазир заговорил об  ясене  Игдразиле,
об Асгарде и его чудесных дворцах, о богах и великанах  и  о  предсказании
норн.
     - Этот карлик и правда много знает, - шепнул Фйаляр на ухо брату, - и
из его крови можно приготовить напиток, который и нас  сделает  такими  же
мудрыми.
     - Ты прав, - отвечал Галяр.
     И, в то время как Квазир продолжал свой рассказ об  устройстве  мира,
братья-гномы бросились на него и убили.
     Потом они выпустили из карлика кровь, смешали ее с медом и  наполнили
ею два кувшина  и  котел.  Получившийся  от  этой  смеси  напиток  обладал
чудодейственным  свойством:  каждый,  кто  хотя  бы  раз   его   пробовал,
становился искусным  поэтом,  за  что  напиток  был  прозван  "поэтическим
медом".
     Боясь мести  богов,  гномы  скрыли  от  них  свое  преступление.  Они
распустили слух, что  ученый  карлик  умер,  задохнувшись  от  собственной
премудрости, так как не было на земле человека, с которым  бы  он  мог  ею
поделиться. Однако убийство Квазира недолго оставалось  тайной.  В  скором
времени Фйаляра и Галяра посетил великан Гиллинг,  и  они  не  удержались,
чтобы не похвастаться перед ним "поэтическим медом".
     - Дайте и мне его попробовать, - попросил великан.
     - Нет, - отвечали братья. - Этот мед дорого  стоит,  и  мы  не  хотим
отдавать его даром.
     - Хорошо, я принесу вам за него много золота, сказал Гиллинг.
     Он собрался уходить, но гномы уже жалели о том, что проболтались,  и,
боясь, что великан их выдаст, решили убить его так же, как и Квазира.
     - Подожди немного, - сказали они. - Мы собирались сегодня  покататься
на лодке. Не поедешь ли ты вместе с нами?
     Гиллинг охотно согласился, братья же, зная, что он не умеет  плавать,
отвезли его на глубокое место, а потом  неожиданно  перевернули  лодку,  и
великан камнем пошел на дно.
     Фйаляр и Галяр были хорошими пловцами и благополучно достигли берега,
но тут их уже поджидал старший сын Галлинга, Гуттунг.  Стоя  на  горе,  он
видел, как гномы убили его отца, и теперь желал отомстить.
     - Вы умрете  той  же  смертью,  какой  умер  ваш  гость!  -  в  гневе
воскликнул он. - Я привяжу вас обоих к скале,  которая  во  время  прилива
покрывается водой, и там вы будете томиться, пока вас не поглотит море или
взошедшее солнце не превратит в камни.
     - Пощади! - взмолилось братья.  -  За  нашу  жизнь  мы  отдадим  тебе
"поэтический мед" - напиток, которого нет даже у богов.  Один  его  глоток
сделает тебя замечательным поэтом.
     - Если у вас действительно есть такой мед, я согласен принять его как
выкуп за смерть отца, - отвечал Гуттунг. - Но вы  должны  отдать  мне  его
весь, до последней капли, и рассказать, как и из чего вы его сделали.
     Гномы  волей-неволей  приняли  его  условия,   и   Гуттунг,   получив
"поэтический мед", отправился с ним домой. Здесь он спрятал его в глубокой
пещере, стены, потолок и пол которой были из твердого гранита, а у входа в
нее посадил свою дочь Гуннлед.
     От Гуттунга и его дочери об убийстве Квазира и о  "поэтическом  меде"
постепенно узнали все великаны, а еще через несколько дней вороны и  волки
отца богов донесли эту весть до Асгарда.
     Один приказал сейчас же строго наказать Фйаляра и Галяра, а  сам  тем
временем решил похитить "поэтический мед" и перенести его в Валгаллу.
     Переодевшись  в  платье  бедного  странника,  он  долго   шел   через
Йотунхейм, пока не увидел большей луг, на котором девять великанов  косили
траву. Это были слуги младшего брата Гуттунга, Бауги, и Один заметил, что,
несмотря на ранний час, с них уже градом катится пот.
     - Почему вы так устали? - спросил он. - Ведь ваша  работа  совсем  не
тяжелая.
     - У нас очень тупые косы, - отвечал ему один из великанов, - а то  бы
мы уже давно скосили весь луг.
     - Этому горы легко помочь, -  возразил  Один,  вынимая  из-за  пазухи
точильный камень. - Вот, глядите! Стоит немного потереть этим камнем  ваши
косы, как они опять станут острыми.
     - Отдай его мне! - воскликнул один великан.
     - Нет, мне! - возразил другой.
     - Нет, мне! Нет, мне! Нет, мне! - хором закричали остальные косцы.
     - Пусть он достанется самому ловкому, - засмеялся Один и изо всех сил
подкинул камень вверх.
     Великаны бросились его ловить, потом стали вырывать его друг у  друга
и в конце концов  передрались  между  собой,  пустив  в  дело  свои  косы.
Гримтурсены бились столь яростно, что не прошло и десяти  минут,  как  все
они уже лежали на траве без признаков жизни.
     К полудню  на  луг  пришел  Бауги  и,  увидев  своих  слуг  мертвыми,
схватился за голову.
     - О, горе мне! - воскликнул он. - Кто же теперь будет косить мои луга
и убирать мой хлеб? Где я найду новых работников?
     - Не печалься, - сказал старейший из Асов, подходя  к  нему.  -  Если
хочешь, я буду работать на тебя все лето и сделаю один столько же, сколько
они сделали бы вдевятером.
     Великан с удивлением посмотрел на Одина.
     - Ты такой маленький и  берешься  заменить  мне  всех  моих  слуг?  -
спросил он. - Как же тебя зовут?
     - Меня зовут  Больверк,  -  отвечал  владыка  мира.  -  И  хотя  я  и
маленький, а сделаю то, что сказал.
     - А что ты хочешь получить за свою  работу?  -  нерешительно  спросил
Бауги.
     - Только один глоток того меда, который хранится у  твоего  брата,  -
сказал Один.
     - Я не могу обещать это, - промолвил  великан.  -  "Поэтический  мед"
принадлежит Гуттунгу, и он никому не дает его пить.
     - Тогда поклянись, что ты поможешь мне его добыть, - потребовал Один.
     - Хорошо, - согласился великан. - В этом я могу тебе поклясться.  Мне
и самому уже давно хочется его попробовать, и, если  мы  добудем  мед,  мы
поделим его пополам.
     На том они и порешили. Один остался  у  Бауги  до  глубокой  осени  и
работал один за девятерых. Он скосил на лугах траву, убрал на полях  хлеб,
а потом обмолотил его и свез в амбары. Наконец, когда с  деревьев  слетели
последние листья, а на речке появился первый ледок, отец  богов  пришел  к
Гримтурсену и потребовал, чтобы тот выполнил свое обещание.
     - Я бы с удовольствием тебе помог, - отвечал Бауги, да не  знаю,  как
это сделать. Дочь Гуттунга, Гуннлед, и день и  ночь  сидит  около  меда  и
никого к нему не подпускает.
     - Сначала отведи меня туда, где он спрятан, - заявил Один, - а там  я
придумаю, как его достать.
     Великан неохотно послушался и повел владыку мира к  горе,  в  которой
находилась пещера его брата. Внимательно оглядев ее со всех  сторон,  Один
достал заранее приготовленный им  длинный  бурав  и,  подавая  его  Бауги,
сказал:
     - Если мы не можем войти в пещеру спереди, войдем в нее сзади. Возьми
этот бурав и просверли им гору против того места, где хранится мед.
     - Но как же мы пролезем в  такое  маленькое  отверстие?  -  удивленно
спросил Гримтурсен.
     - Сначала сделай его и тогда увидим, - улыбнулся старейший из Асов.
     Великан недоверчиво покачал головой  и  принялся  за  работу,  однако
мысль о том, что его могут обмануть, не давала ему  покоя,  и  он  в  свою
очередь решил схитрить.
     - Я уже просверлил гору  насквозь,  Больверк,  -  сказал  он  немного
спустя, выдергивая бурав и кладя его на землю, - можешь доставать мед.
     Вместо ответа Один с силой дунул в просверленное отверстие.  Из  него
вылетели песок и искрошенные камешки.
     - Нет, ты еще не добрался до пещеры, - возразил он, - иначе весь этот
щебень полетел бы внутрь, а не наружу.
     Удивляясь про себя сообразительности своего  бывшего  слуги,  великан
снова взялся за бурав и на этот раз довел дело до конца.
     - Готово! - объявил он, оборачиваясь к Одину. -  Теперь  можешь  дуть
сколько хочешь.
     Отец богов дунул и убедился, что исполин сказал правду.
     - Как же ты собираешься достать мед, Больверк? - спросил Бауги.
     - А вот как, - отвечал Один  и,  превратившись  в  червяка,  поспешно
юркнул в отверстие.
     Великан понял, что его провели. Он схватил бурав и попытался  достать
им владыку мира, чтобы проколоть его насквозь, но тот уже достиг пещеры  и
благополучно спустился на пол.
     Услышав позади себя какой-то шорох, сидевшая у порога Гуннлед  тотчас
же встала и внимательно оглядела все углы.
     - Ах,  какой  противный  червяк!  -  воскликнула  она  и  уже  хотела
раздавить его ногой,  когда  червяк  на  ее  глазах  вдруг  превратился  в
прекрасного юношу.
     - Кто ты? - спросила пораженная девушка.
     - В той далекой стране,  откуда  я  родом,  меня  звали  Больверк,  -
отвечал Один. - Ну, а теперь прощай, Гуннлед. Я забрел к вам мимоходом,  и
мне нужно идти дальше.
     - Ах нет, останься со мной, милый юноша! - воскликнула  великанша,  с
восхищением смотря на незваного гостя. - Ты так хорош, что, глядя на себя,
забываешь обо всем на  свете.  Останься,  и  я  отдам  тебе  все,  что  ты
захочешь.
     - Только три дня я могу быть с тобой, Гуннлед, - сказал отец богов. -
И за эти три дня ты должна дать  мне  три  глотка  того  напитка,  который
хранится у твоего отца.
     - Хорошо, Больверк, - сказала девушка. -  Мой  отец  жестоко  накажет
меня за это, а три дня - это только три дня, но  даже  за  минуту  счастья
можно отдать многое. Пусть будет так, как ты хочешь.
     Назначенный Одином срок прошел быстро. Три раза заглядывало солнце  в
пещеру Гуттунга, когда же оно заглянуло  туда  в  четвертый  раз,  Гуннлед
подвела старейшего из Асов к сосудам и сказала:
     - Мне жаль с тобой расставаться, Больверк, но я дала слово и не  буду
тебя задерживать. Выпей три глотка меда и ступай куда хочешь.
     Как вы помните, "поэтический мед" хранился в двух кувшинах  и  котле.
Первым же глотком владыка мира осушил один  кувшин,  вторым  -  второй,  а
третьим - котел.
     - Прощай, Гуннлед, спасибо тебе за гостеприимство,  -  сказал  он  и,
превратившись в орла, вылетел из пещеры.
     - Прощай, Больверк! - со слезами  на  глазах  прошептала  девушка.  -
Неужели, ты приходишь только затем,  чтобы  я  потом  тосковала  всю  свою
жизнь?
     В это время в пещеру вбежал Гуттунг.  Возвращаясь  домой,  он  увидел
вылетевшего из нее Одина и заподозрил неладное.
     - Где мед? - спросил он у дочери.
     Гуннлед молча показала ему на пустые сосуды.
     Великан издал глухое  проклятие  и,  накинув  на  себя  свое  орлиное
оперение, помчался следом за отцом богов.
     Выпитый Одином мед мешал ему лететь, и,  когда  он  достиг  Митгарда,
Гуттунг стал его нагонять. Тогда, видя, что великан вот-вот  его  схватит,
Один выплюнул часть меда на  землю  и,  быстро  замахав  крыльями,  достиг
Асгарда. Здесь он наполнил принесенным им напитком большой золотой сосуд и
отдал его своему сыну, богу поэтов Браги.
     С того  дня  подлинное  поэтическое  искусство  существует  только  в
Асгарде или у тех, кого боги им наделяют. Правда, та часть  меда,  которую
выплюнул владыка мира, упала на землю и стала  достоянием  людей,  но  это
были подонки, отстоявшиеся на дне сосудов, - вот почему на свете так много
плохих поэтов.



                        КАК СТРОИЛАСЬ КРЕПОСТЬ АСОВ

     Тор все еще не вернулся из далеких краев, где он продолжал воевать  с
Гримтурсенами, когда Хеймдалль, стоя на страже у радужного моста,  увидел,
как к воротам Асгарда приближается какой-то великан.
     Сбежавшиеся на его зов Асы уже собрались было позвать Тора, но потом,
видя, что он великан безоружен, решили сначала спросить, что ему нужно.
     - Я каменщик, - отвечал тот. -  И  пришел  предложить  вам  построить
вокруг Асгарда стену, которую не сможет преодолеть ни один враг.
     - А что ты за это хочешь? - спросил Один.
     - Немного, - ответил исполин. - Я слышал,  что  у  вас  в  Асгарде  с
недавнего времени  живет  прекрасная  дочь  Нйодра,  богиня  любви  Фрейя.
Выдайте ее за меня замуж, а в приданое ей дайте луну и солнце.
     Предложение великана показалось  богам  настолько  дерзким,  что  они
рассердились.
     - Уходи прочь, пока мы не позвали Тора! - закричали они.
     - Постойте, не надо торопиться, - остановил их Локи. - Позвольте  мне
с ним договориться, - добавил он тихо, - и поверьте, что тогда нам  ничего
не придется платить.
     Боги, зная его хитрость, не возражали.
     - За сколько времени ты берешься построить такую стену, и  кто  будет
тебе помогать? - спросил бог огня у великана.
     - Я буду строить ее ровно полтора года, и мне не нужно никаких других
помощников, кроме моего коня Свадильфари, - отвечал исполинский каменщик.
     - Мы принимаем твои условия, - сказал Локи, - но помни, что,  если  к
назначенному сроку хотя бы одна часть стены не будет достроена, если в ней
не будет хватать хотя бы одного камня, ты ничего не получишь.
     - Хорошо, - усмехнулся великан. - Но и вы все поклянитесь в том,  что
не будете мне мешать, а после окончания работы отпустите домой с обещанным
вознаграждением, не причинив мне вреда.
     - Соглашайтесь на все, - посоветовал Локи богам. - Он  все  равно  не
успеет за полтора  года  построить  такую  длинную  и  высокую  стену  без
помощников, и мы сможем смело поклясться в чем угодно.
     - Ты прав, - произнес Один.
     - Ты прав, - повторили  за  ним  остальные  Асы  и  дали  Гримтурсену
требуемую им клятву.
     Великан ушел, но уже через несколько часов вернулся обратно вместе со
своим конем Свадильфари.
     Свадильфари был величиной с большую гору и так  умен,  что  сам,  без
понукания, не только подвозил к Асгарду целые скалы, но и  помогал  своему
хозяину при укладке стен, работая один за десятерых.
     Невольный страх проник в сердца Асов,  и,  по  мере  того  как  стены
вокруг  поднимались  все  выше  и  выше,  этот  страх  все  усиливался   и
усиливался. Глядя на великана и его могучего коня,  бедная  Фрейя  плакала
целыми днями, проливая свои золотые слезы, которых накопилось  так  много,
что на них можно было бы купить целое королевство на земле.
     - Скоро мне придется отправиться в Йотунхейм, - горевала она.
     Вместе с нею плакали Суль и Мани, и поэтому луна и солнце каждый день
всходили, закрытые туманной дымкой.
     Асы с  грустью  вспоминали  тот  час,  когда  они  исполнили  желание
Гримтурсена и дали ему клятву, запрещающую  им  позвать  на  помощь  Тора,
который сразу избавил бы их от великана, но особенно сердились они на бога
огня.
     Наконец, когда до назначенного великаном-каменщиком срока  оставалось
два дня, а работы ему - всего на один день, боги  собрались  на  совет,  и
Один, выступив вперед, сказал:
     - Над нами нависла беда, и это ты, Локи, один  виноват  во  всем.  Ты
уговорил нас заключить договор с Гримтурсеном, ты уверял, что он не сумеет
закончить стену в срок. Ты один и должен за все расплатиться.
     - А зачем вы меня послушались? - оправдывался бог огня. - Ведь  я  не
пил воды из источника Мимира и не так мудр, как ты, Один!
     - Довольно, Локи! - произнес  Браги.  -  Все  мы  знаем,  что  всегда
сумеешь вывернуться. Придумай же теперь, как нам избавиться  от  великана.
Мы не можем отдать Фрейю в Йотунхейм, не можем и оставить мир без  луны  и
солнца. Знай, что в тот самый день, когда это случится,  ты  умрешь  самой
страшной смертью, какую мы только сможем придумать.
     - Да, это будет так, - подтвердили остальные боги, и даже  молчаливый
Видар сказал "да".
     Локи долго думал, а потом вдруг рассмеялся.
     - Будьте спокойны, Асы, великан не достроит стену! - воскликнул он и,
встав со своего места, быстро ушел.
     На следующее же утро, с восходом солнца - а  оно  в  этот  день  было
особо туманным, -  исполинский  каменщик  повез  из  Йотунхейма  в  Асгард
последний воз с камнями. Однако,  едва  он  доехал  до  небольшого  леска,
невдалеке от которого начиналась страна богов, как из него вдруг выскочила
большая красивая кобыла и  с  веселым  ржанием  принялась  скакать  вокруг
жеребца. Увидев ее, Свадильфари рванулся в сторону и с такой силой  дернул
за постромки, что они лопнули.
     - Постой, постой, куда ты?! - закричал великан.
     Но его конь уже мчался вслед за кобылой, которая поспешно  исчезла  в
лесу.
     Целый день простояли  боги  на  стенах  Асгарда,  с  тревогой  ожидая
прихода исполина, но он не явился. Фрейя снова плакала, но на этот раз  от
счастья, да и остальные Асы впервые после многих дней были счастливы.
     Лишь к исходу второго дня, когда довольная и радостная  Суль  кончала
свое путешествие по небу, боги снова увидели Гримтурсена.
     Оборванный и усталый, без своего коня, шел он к Асгарду,  изрыгая  на
ходу самые страшные проклятия.
     - Вы меня обманули! - закричал он еще  издали.  -  Вы  нарушили  свою
клятву! Это вы подослали в Йотунхейм кобылу, которая увела моего коня.
     Асы,  которые  сразу  догадались,  что  эта   проделка   бога   огня,
промолчали.
     - Отдайте мне Фрейю! -  продолжал  кричать  великан,  неистово  стуча
кулаком по сложенным им стенам. - Отдайте мне луну и солнце, или вы дорого
поплатитесь за свой обман.
     С этими  словами  он  нагнулся  и,  схватив  один  из  оставшихся  от
постройки стен камней,  с  силой  швырнул  его  в  богов.  Те  еле  успели
нагнуться, а камень, пролетев над их головами,  ударился  о  крышу  дворца
Хеймдалля и выбил из нее несколько черепиц.
     - Тор! - хором крикнули Асы.
     Долгий и  громкий  раскат  грома  был  им  ответом,  и  в  прозрачном
предзакатном небе вдруг выросла фигура рыжебородого богатыря, стоящего  во
весь рост на своей колеснице.
     - Что я вижу? Гримтурсен у стен Асгарда?! - воскликнул бог  грома  и,
даже не спросив у Асов, что случилось, поспешно метнул свой молот.
     Великан, готовившийся бросить в богов второй камень, выпустил его  из
рук и замертво упал на землю.
     Стены Асгарда вскоре достроили сами боги, но еще долгое время на душе
у них было невесело. Предсказания норн продолжали сбываться. Асы совершили
клятвопреступление, а кому, как не им было  известно,  что  это  никому  и
никогда не проходит даром.
     Жеребец  Свадильфари  исчез  бесследно,  и  кто  знает,  что  с   ним
случилось. Что же касается Локи - как вы, наверное,  уже  догадались,  это
он, превратившись в  кобылу,  сманил  коня  великана,  -  то  он  впопыхах
заколдовал себя на такой длинный срок,  что  еще  около  года  проходил  в
образе лошади и даже произвел на свет жеребенка.  Этот  жеребенок  родился
восьминогим и был назван Слейпниром. Его взял к себе Один и  до  сего  дня
ездит на нем верхом.



                              ПОХИЩЕНИЕ ИДУН

     Вскоре после того как Локи, пробыв некоторое время в  образе  лошади,
вновь  вернул  себе  свой  обычный  вид,  он,  Один  и  Нйодр  отправились
странствовать пешком по свету и забрели в дикие, пустынные  горы,  где  за
несколько дней пути не встретили ни человека, ни зверя.  Владыка  мира  не
нуждался в пище и продолжал неутомимо идти вперед, но  зато  его  спутники
еле держались на ногах от голода и усталости. Лишь  на  пятый  день  богам
попалось стадо диких быков и Один заколол  одного  из  них  своим  копьем.
Обрадованные Асы поспешили развести костер и, содрав с убитого быка шкуру,
стали его поджаривать. Прошел час, другой, третий, четвертый; Локи и Нйодр
неустанно подбрасывали в огонь все новые и новые охапки хвороста, но  мясо
быка оставалось по-прежнему сырым, как будто его и не жарили. Внезапно над
головами богов раздался громкий  смех.  Они  посмотрели  вверх  и  увидели
высоко в воздухе огромного черного орла, который кружился над костром.
     - Почему ты смеешься? - спросил его Один. - Уж не ты ли это с помощью
какого-нибудь волшебства мешаешь нам приготовить себе обед?
     - Ты угадал, Один, - отвечал орел  человеческим  колосом.  -  Вам  не
удастся зажарить этого быка, пока вы не пообещаете поделиться со мной  его
мясом.
     - Хорошо, ты получишь четверть быка, - сказал Один.
     - Да, мы дадим тебе четверть быка, - подтвердили Локи и Нйодр.
     Не успели они это сказать, как мясо  тут  же,  на  их  глазах,  стало
поджариваться и вскоре было совсем готово.
     Боги погасили костер, сняли с него тушу быка и, разрезав ее на части,
предложили орлу взять его долю. Тот не заставил  себя  просить  и,  слетев
вниз, стал проворно глотать самые лучшие и жирные куски мяса.
     Увидев это, Локи в  гневе  схватил  толстую  палку  и  хотел  ударить
дерзкую птицу, но она увернулась и ловко поднялась  ее  своими  острыми  и
крепкими когтями. В тот же миг другой конец палки словно  прилип  к  рукам
Локи и, пока он он пытался их оторвать, орел взлетел к облакам, увлекая за
собой бога огня.
     - Стой, стой,  куда  ты?  -  кричал  испуганный  Локи.  -  Сейчас  же
спускайся вниз, прошу тебя!
     Орел как будто послушался и полетел над  самой  землей,  волоча  бога
огня по камням и кустарникам.
     - Ой, что ты делаешь? - еще громче закричал Локи. - Остановись, или у
меня оторвутся руки!
     - Раньше поклянись, что ты исполнишь любое  мое  желание,  -  отвечал
орел, продолжая быстро лететь вперед.
     - Клянусь, что исполню! - простонал бог огня. - Только остановись!
     - Хорошо, - рассмеялся орел.
     Он выпустил из когтей сук, и Локи тяжело рухнул на землю.
     - Ну, а теперь послушай, чего я от тебя хочу, - сказал  орел,  садясь
на соседнее дерево. - Ты сейчас же  пойдешь  в  Асгард  и  приведешь  сюда
богиню Идун вместе с ее яблоками. Да смотри торопись, чтобы  вернуться  до
захода солнца.
     - Но кто же ты? - спросил  Локи,  вставая  на  ноги  и  отбрасывая  в
сторону сук, который продолжал держать в руках.
     - Я великан Тиаци, грозный повелитель зимних бурь, -  гордо  произнес
орел. - Об этом ты мог бы догадаться, когда вы напрасно старались зажарить
быка, которого я остужал своим  ледяным  дыханием,  или  когда  эта  палка
примерзла к твоим рукам. Мои братья - Гримтурсены -  глупы:  они  пытаются
победить богов в открытом бою. Я же решил лишить вас вечной юности.  Тогда
вы сами скоро одряхлеете и потеряете свою силу, и власть над  всем  миром.
Ступай же, Локи, и приведи мне Идун.
     Опустив голову, бог огня печально побрел в Асгард. Он боялся, что Асы
жестоко отомстят ему за похищение жены Браги и яблок вечной молодости,  но
не мог нарушить данную клятву.
     Идти  ему  пришлось  недолго:  Тиаци  подтащил  его  почти  к  самому
Бифресту. Поднявшись по радужному мосту,  Локи  поспешил  во  дворец  бога
поэтов, в одном из самых больших и красивых залов которого жила Идун.
     - Ты, наверное, пришел ко мне за  яблоками,  Локи?  -  спросила  она,
радушно выходя ему навстречу. - Вот они, бери, какое хочешь.
     - Нет, Идун, - отвечал хитрый бог. - В одном лесу, на земле, я  видел
яблоки еще лучше твоих. Вот я и пришел рассказать тебе об этом.
     - Ты ошибаешься, Локи, - удивилась богиня.  -  Лучших  яблок,  чем  у
меня, нет во всем мире.
     - Если ты мне не веришь, пойдем со мной, и я отведу  тебя  к  ним,  -
сказал бог огня. - Да захвати с  собой  и  свои  яблоки,  чтобы  ты  могла
сравнить, какие из них лучше.
     Не подозревая обмана, Идун сейчас же взяла корзину с яблоками  вечной
молодости и пошла следом за Локи, который привел ее прямо в  лес,  где  ее
поджидал Тиаци. Едва лишь юная богиня дошла до опушки,  как  грозный  орел
налетел на нее и унес вместе с ее корзиной в свой далекий северный замок.
     Бог огня оставался в лесу до тех пор,  пока  не  увидел  в  отдалении
возвращающихся в Асгард Одина и  Нйодра.  Тут  он  пошел  им  навстречу  и
рассказал длинную историю о том, как орел унес его далеко в  горы,  откуда
он только что вернулся. Однако, как ни хитрил Локи, его  проделка  недолго
оставалась в тайне. Зоркий Хеймдалль видел, как он вышел из Асгард  вместе
с Идун, и бог огня был вынужден признаться Асам, что это он помог Тиаци ее
похитить.
     - Ты заслуживаешь смерти! - воскликнул Браги, выслушав его рассказ. -
Ты вдвойне заслуживаешь смерти, потому что не только придал  великану  мою
жену, но и лишил нас всех ее яблок, без которых  мы  вскоре  погибнем.  Ты
заслужил смерть, и я убью тебя, Локи!
     - Постой, - остановил его Один. - Смерть Локи нам не  поможет.  Пусть
лучше он загладит свою вину и отнимет у Тиаци Идун. Он ведь так хитер, что
сможет это сделать лучше любого из нас.
     - Я и сам уже давно бы это сделал, - возразил Локи, - если  бы  знал,
как добраться до замка Тиаци. Ведь у меня нет такой колесницы, как у Тора.
     - Послушай, Локи, - сказала Фрейя, до этого молча сидевшая  на  своем
месте, - ты знаешь, что у меня есть волшебное  соколиное  оперение,  надев
которое я летаю быстрее ветра. Я могу одолжить его тебе на  время.  Только
верни нам поскорее нашу Идун.
     Локи с радостью выслушал слова богини любви и на другой  день  утром,
превратившись с ее помощью в огромного сокола, полетел на север.
     Блестящий ледяной замок  властелина  северных  бурь  стоял  на  самом
берегу Нифльхейма, меж двух высоких, покрытых вечным снегом гор.  Подлетая
к нему, Локи увидел в море Тиаци и его дочь Скади. Они сидели  в  лодке  и
удили рыбу и даже не заметили стремительно пронесшегося  над  их  головами
бога огня. Торопясь унести Идун прежде, чем великан вернется  домой,  Локи
влетел прямо в открытое окно замка. Около него, печально глядя на запад, в
сторону Асгарда, сидела богиня и,  держа  на  коленях  корзину  со  своими
яблоками, тихо плакала.
     - Скорей, Идун!  -  крикнул  Локи  богине,  которая,  не  узнав  его,
испуганно вскочила. - Мы должны бежать, пока Тиаци ловит рыбу. - Собирайся
в путь.
     - Ах это ты, Локи! - воскликнула обрадованная Идун. - Но  как  же  ты
унесешь и меня и мою корзину?
     - Ты держи ее, а я буду держать тебя, - предложил бог огня.
     - Нет, Локи, - возразила Идун. - Тебе тяжело будет  лететь,  и  Тиаци
сможет нас догнать... Постой, постой, я  придумала!  -  вдруг  рассмеялась
она. - Ты не знаешь, что, если я захочу, я могу превратиться в орех.
     Она три раза  хлопнула  в  ладоши  и  в  тот  же  миг  в  самом  деле
превратилась в маленький лесной орех. Локи  положил  его  между  яблок  и,
схватив корзину, снова вылетел в окно. Тут, к своему ужасу, он увидел, что
лодка с Тиаци и его дочерью уже подплывает к берегу.
     - Смотри, смотри, отец! - воскликнула Скади,  показывая  великану  на
бога огня. - Из окна нашего  замка  вылетел  сокол,  и  у  него  в  когтях
корзина.
     - Это кто-нибудь из  Асов,  -  скрежеща  зубами,  ответил  повелитель
зимних бурь. Он уносит яблоки Идун. Но не бойся, ему не уйти от меня!
     И тут же, превратившись в орла, он пустился в погоню за Локи.
     Стоя на стене Асгарда, Хеймдалль еще издали заметил их обоих.
     - Локи летит назад! - крикнул он окружающим  его  Асам.  -  Он  несет
яблоки, а за ним гонится исполинский черный прел.
     - Это Тиаци, - сказал Один. - Скажи, кто из них летит быстрее?
     - Локи летит очень быстро, - ответил Хеймдалль. - Но великан его  все
же догоняет.
     - Скорей, - приказал Один богам, - разложите на стене Асгарда костер,
да побольше!
     Асы не поняли, что задумал мудрейший из них, однако быстро  исполнили
его приказание, и вскоре на стене Асгарда запылал огромный костер.
     Теперь уже не только Хеймдалль, но и остальные  боги  увидели  быстро
приближающегося к ним Локи и  догоняющего  его  Тиаци.  Казалось,  великан
вот-вот схватит бога огня, но тот, увидев  впереди  себя  грозно  бушующее
пламя, собрал все свой силы и стрелой пролетел сквозь него.
     Мудрый Один хорошо придумал. Огонь не тронул своего  повелителя,  но,
когда Тиаци хотел последовать за Локи, пламя охватило его со всех  сторон,
и великан сгорел, как пук соломы.
     - Я вижу, ты принес только яблоки. Где же та, кому они принадлежат? -
спросил Один у бога огня, когда тот, опустившись среди Асов, скинул с себя
соколиное оперение.
     Вместо ответа Локи достал из корзины орех, бросил  его  на  землю,  и
перед Одином сейчас же появилась Идун.
     - Простите Локи, - сказала  она.  -  Правда,  он  виноват,  что  меня
похитили, но зато он же меня и спас.
     - Мы уже и так простили его, - отвечал владыка мира. - Он  не  только
вернул нам тебя, но из-за него погиб и наш злейший враг, великан Тиаци.
     С торжеством отпраздновав возвращение Идун, боги разошлись  по  своим
дворцам, но уже на следующее утро их разбудил  резкий  звук  трубы.  Перед
стенами Асгарда появилась всадница на белом коне, в кольчуге и с копьем  в
руках. Эта  была  Скади.  Узнав  о  гибели  отца,  она  прискакала,  чтобы
отомстить богам за его смерть и вызвать их на поединок.
     Асы невольно залюбовались прекрасной и смелой девушкой и, не желая ее
убивать, решили договориться с ней миром.
     - Послушай, Скади, - сказал ей Один, - хочешь вместо выкупа  за  отца
взять одного из нас в мужья?
     Скади, готовившаяся к упорной и кровопролитной битве, задумалась.
     - Моя печаль по  отце  так  глубока,  что  я  не  могу  и  слышать  о
замужестве, - отвечала она наконец. - Рассмешите меня,  и  тогда  я  приму
ваше предложение.
     - Как же это нам ее рассмешить? - недоумевали Асы.
     - О, это очень легко! - воскликнул  Локи.  -  Подождите  здесь  и  вы
увидите.
     Он убежал, а через некоторое время выехал из Асгарда верхом  на  козе
Гейдрун.
     При виде этого зрелища Скади улыбнулась, но тут же сдержалась,  и  ее
лицо снова стало печальным. Не смущаясь этим, Локи подъехал  к  девушке  и
вдруг изо всех сил дернул Гейдрун на бороду. Рассерженное  животное  мигом
сбросило его с себя и,  наклонив  голову,  попыталось  ударить  бога  огня
рогами. Локи ловко уворачивался, а Скади, глядя на  его  забавные  прыжки,
постепенно так развеселилась, что забыла о  своем  горе.  В  конце  концов
Гейдрун  удалось  зацепить  хитрейшего  из  Асов  одним   рогом,   и   он,
перекувыркнувшись в воздухе, растянулся прямо у ног великанши, которая, не
выдержав, громко расхохоталась.
     - Хорошо, - сказала она, бросая копье на землю, - я выйду за  муж  за
одного из вас, но дайте мне самой выбрать себе мужа.
     - Ты его выберешь, - отвечал Один, - но с  условием,  что  ты  будешь
видеть одни лишь ноги, и, если твой выбор падет на того,  кто  уже  женат,
тебе придется выбирать снова.
     Скади согласилась на это.
     Закутавшись с головой в плащи так, чтобы были видны только  их  босые
ноги, Асы один за другим вышли из ворот  Асгарда  и  встали  в  ряд  перед
дочерью властелина зимних бурь.
     Великанша медленно обошла их всех.
     - У кого самые красивые ноги, у того и все красиво, - сказала она.  -
Вот... - Тут Скади показала на одного из Асов. Вот  Бальдр,  и  я  выбираю
его.
     - Я не Бальдр, а Нйодр, Скади, - отвечал тот, открывая лицо. - Хочешь
ли ты, чтобы я был твоим мужем?
     - Что ж, я не отказываюсь от своего выбора, - засмеялась великанша. -
Ты красив, а кроме того, как я слышала, добр,  и  ты  будешь  мне  хорошим
мужем.
     Асы несколько дней праздновали  свадьбу  бывшего  Вана  с  прекрасной
дочерью Тиаци, после чего супруги, по просьбе Скади, отправились на север,
в замок ее отца. Однако Нйодр, привыкший к теплу и безоблачному  небу,  не
смог жить там долго. Каждое утро его будил от сна рев моржей  и  медведей,
каждый вечер не давал заснуть грохот  морского  прибоя.  Спустя  несколько
месяцев, он уговорил жену переехать в его  дворец  Ноатун  в  Асгарде,  но
Скади там скоро соскучилась по снегу и морю.  Тогда  супруги  договорились
между собой жить попеременно: шесть месяцев в Асгарде и  шесть  месяцев  в
Нифльхейме.
     Вот почему зимой так бушует море. В это время Нйодр на юге и не может
его успокоить, но зато, когда он летом приезжает на  север,  моряки  могут
смело доверять волнам: добрый бог не причинит им вреда.



                           ПОХИЩЕНИЕ МЙОЛЬНИРА

     Больше трех лет сражался Тор на восточных границах Митгарда,  отбивая
нападения великанов. Гримтурсены были многочисленны и воинственны, но  бог
грома, стремительно носясь над облаками и  появляясь  то  здесь,  то  там,
безжалостно поражал их одного за другим своим страшным молотом. Наконец не
выдержав борьбы с грозным Асом, исполины  отступили  и  бежали  обратно  в
Йотунхейм, чтобы там собраться с силами для нового похода в страну людей.
     Решив,  что  теперь  он  может  спокойно  отдохнуть,  Тор  выпряг  из
колесницы обоих козлов и пустил  их  попастись  на  соседний  луг,  а  сам
растянулся на голой  земле  и,  положив  рядом  Мйольнир,  крепко  заснул.
Проснувшись на рассвете, бог грома сразу же потянулся за своим молотом, но
его рука не нащупала ничего, кроме камешков да  нескольких  травинок.  Тор
быстро вскочил на ноги, протирая глаза,  оглядел  все  вокруг  -  Мйольнир
бесследно исчез.
     Гнев могучего Аса был ужасен. Он рвал на  себе  бороду  и  так  топал
ногами, что тряслась земля, а потом быстро запряг в колесницу своих козлов
Тангиоста и Тангризнира и вихрем помчался в Асгард, чтобы оповестить богов
о своей потере.
     Однако по дороге старшему сыну Одина стало стыдно, что он  так  глупо
проспал свое оружие, и он решил признаться в этом одному Локи.
     Выслушав Тора, бог огня покачал головой и ответил:
     - Твой молот могли украсть только великаны, значит искать его надо  у
них. Пойдем скорее к Фрейе и попросим у нее соколиное оперение. Я полечу в
Йотунхейм и там узнаю, где находится Мйольнир.
     - Ты прав, - согласился Тор. - Пойдем к Фрейе.
     Оба Аса направились во дворец прекрасной дочери Нйодра.
     - Если бы оно было сделано из золота и  серебра,  то  и  тогда  бы  я
отдала его вам без сожаления, -  сказала  богиня  любви,  вынося  им  свое
соколиное оперение.
     Локи накинул его на себя и так быстро, как только мог, полетел  через
море в страну великанов.
     Первым, кого увидел там бог огня, был один из знатнейших и богатейших
князей Йотунхейма - великан Трим. Он сидел  на  вершине  высокой  горы  и,
увидев над собой парящего в небе исполинского сокола, сразу догадался, что
перед ним один из Асов.
     - Как идут дела в стране богов? - спросил он.
     - Не очень хорошо, Трим, не очень хорошо, - отвечал Локи.  -  У  Тора
пропал его молот. Не знаешь ли ты, кто его взял и где он сейчас?
     - Ха-ха-ха! - оглушительно захохотал Трим. - Мне ли этого  не  знать,
когда я сам его похитил! Я мог бы убить и Тора, пока он спал, да  не  хочу
ссориться с Асами. Я готов даже  вернуть  им  Мйольнир,  если  только  они
выдадут за меня замуж  прекрасную  Фрейю.  А  породнившись  с  богами,  я,
пожалуй, соглашусь перейти на их сторону.
     - Где же ты спрятал молот? - продолжал спрашивать Локи.
     - Молот, Локи? - снова засмеялся Трим, который по голосу  узнал  бога
огня. - Молот лежит глубоко под землей, и тебе его не достать,  не  смотря
на всю твою хитрость.
     Узнав все, что ему было нужно, Локи сделал над головой великана  круг
и полетел обратно в Асгард.
     - Молот у Трима, и он не хочет его отдавать, пока боги не отдадут ему
в жены богиню Фрейю, - объявил он поджидавшему его Тору.
     Услышав это, бог грома снова побежал к богине любви.
     - Послушай, Фрейя, - сказал он, - немедленно собирайся и  отправляйся
к Триму! Ты должна стать его женой, иначе он не отдаст мне мой молот.
     При этих словах Тора добрая и  кроткая  дочь  Нйодра  рассердилась  в
первый раз в жизни и в порыве гнева разорвала  свое  драгоценное  ожерелье
Бризингамен.
     - Молчи, Тор, и уходи прочь из моего дворца!  -  воскликнула  она.  -
Никогда не поеду я в Йотунхейм и никогда не выйду за муж за великана, хотя
бы все боги просили меня об этом. Ты  сам  проспал  свой  молот,  так  что
выручай его сам.
     Опустив голову, Тор молча вышел от Фрейи и снова  направился  к  богу
огня.
     - Посоветуй, что мне делать, Локи! - взмолился он.
     - Нам надо собрать богов и рассказать  им  о  случившемся,  -  сказал
Локи. - Может быть, все вместе мы что-нибудь придумаем.
     Тор скрипя сердце согласился и пошел собирать Асов.
     Узнав о пропаже Мйольнира и о требованиях Трима, боги пришли в  ужас.
Они долго советовались, но  не  могли  ничего  придумать.  Наконец  мудрый
Хеймдалль, верный страж радужного моста, встал со своего места и сказал:
     - А почему бы нам не надеть на Тора женское платье и не послать его к
Триму под видом Фрейи? Может быть, он  сумеет  выручить  у  великана  свой
молот.
     - Но ведь Трим сейчас же откроет обман, - возразил ему Вали.
     - Нет, - отвечал Хеймдалль, - он ничего не откроет. Трим  никогда  не
видел Фрейи  и  не  знает,  как  она  выглядит.  Наденем  на  Тора  платье
подлиннее, чтобы не было видно его огромных ног, закроем фатой его лицо  и
рыжую бороду, а голову повяжем платком и великаны ни за что не догадаются,
что перед ними не женщина, а сам бог грома.
     - Никогда не надену я женское платье! - в бешенстве закричал  Тор.  -
Если я это сделаю, вы будете потом смеяться надо мной.
     - Ты забываешь о том, Тор, - возразил ему  Браги,  -  какая  страшная
опасность нам теперь угрожает. Хочешь ли, чтобы великаны перебили всех нас
твоим молотом и захватили Асгард и Митгард?  Ты  должен  попытаться  любой
ценой вернуть назад Мйольнир. И если тебе это удастся,  никто  из  нас  не
будет смеяться над тобой.
     - Послушай,  Тор,  -  сказал  Локи,  видя,  что  бог  грома  все  еще
колеблется. - Хочешь, я тоже надену женское платье и отправлюсь  вместе  с
тобой к Триму под видом твоей служанки?
     Предложение Локи очень  понравилось  всем  богам,  а  особенно  Тору,
который после  этого  не  стал  больше  спорить  и  согласился  с  советом
Хеймдалля. Боги тут же стали одевать Тора и Локи в  женское  платье,  а  к
Триму направили гонца с известием, что Фрейя скоро прибудет.
     Великан был вне себя от радости и гордости.  В  ожидании  невесты  он
созвал в свой замок многочисленных гостей и устроил там для них  роскошный
пир. Вскоре вдали показался Тор в фате и длинном платье, а за ним  Локи  в
костюме служанки. Трим поспешно выбежал им  навстречу.  Он  взял  за  руки
мнимую невесту и, торжественно введя ее в замок, усадил рядом с  собой  за
богато убранный стол.
     Бог грома любил хорошо поесть и к тому  же  он  так  проголодался  по
дороге, что забыл всякую осторожность. Он тут же проглотил целого быка, за
ним восемь огромных лососей и запил это бочкой крепкого меда.
     - Никогда за свою жизнь, я еще не видел, чтобы  какая-нибудь  девушка
так ела! - воскликнул Трим, с удивлением глядя на мнимую Фрейю.
     - О Трим, - поспешно шепнул ему на ухо Локи, который на всякий случай
встал за спиной великана, - тоскуя по тебе, Фрейя семь дней ничего не пила
и не ела. Вот почему она сегодня так голодна.
     Слова хитрого бога обрадовали Трима, и он тут же  захотел  поцеловать
свою невесту, но увидев сквозь фату горящие как уголь глаза Тора, в  ужасе
отскочил назад.
     - Ни у одной девушки в мире я не встречал еще таких страшных глаз!  -
запинаясь, проговорил он.
     - Успокойся, Трим, - снова шепнул ему Локи.  -  Семь  долгих  дней  и
столько же ночей плакала Фрейя, тоскуя по тебе, и ее  глаза  покраснели  и
воспалились.
     Услышав, что Фрейя так сильно его любит, великан  был  растроган.  Он
вышел из зала и послал к гостям свою сестру, чтобы она положила на  колени
его невесте молот и получила от нее взамен какой-нибудь подарок, в  чем  и
состоял в те времена обряд венчания.
     Девушка сейчас же  исполнила  приказание  брата,  и  какова  же  была
радость Тора, когда в положенном  ему  на  колени  молоте  он  узнал  свой
Мйольнир! В одно мгновение весь его женский наряд полетел прочь,  и  перед
остолбеневшими от ужаса гостями Трима предстал грозный бог грома. Придя  в
себя, великаны бросились бежать, но было уже поздно: Мйольнир настигал  их
повсюду, и, сраженные его ударами, они один за другим мертвыми  падали  на
землю. Такая же участь постигла и прибежавшего на шум Трима.
     Так вернул себе Тор свой замечательный молот, а весь мир  был  спасен
от большой опасности.
     С тех пор прошло уже много лет, но и до сего дня не может забыть  бог
грома, как однажды он чересчур много спал, а потом  ходил  из-за  этого  в
женском платье, и очень не любит, когда ему об этом напоминают.



                        ПУТЕШЕСТВИЕ ТОРА В УТГАРД

     Тору часто приходилось слышать, что на востоке, в  стране  великанов,
есть чудесное королевство Утгард  и  что  в  нем  живут  могущественнейшие
волшебники, которых еще никто  не  смог  победить.  Не  мудрено,  что  ему
захотелось побывать там, чтобы испытать  силу.  Вернувшись  обратно  после
поездки к Триму, он стал немедленно собираться в  дорогу,  предложив  богу
огня снова ему сопутствовать. Локи, который любил  всякие  приключения  не
меньше самого Тора, охотно согласился, и оба  Аса,  усевшись  в  колесницу
бога грома, отправились в путь.
     Боги ехали целый  день.  Наконец,  когда  солнце  уже  спряталось  за
горами, они увидели  в  поле  одиноко  стоявшую  хижину  и  решили  в  ней
остановиться. В хижине жил бедный крестьянин Эгил со  своей  женой,  сыном
Тиальфи и дочерью Ресквой. Он радушно принял Асов, но пожалел,  что  ничем
не может их угостить.
     - Вот уже два дня, - сказал он, - как мы сами  ничего  не  ели,  и  в
нашем доме вы не найдете ни крошки хлеба.
     - О еде не беспокойся, - отвечал ему Тор, - ее хватит на всех.
     Он выпряг из колесницы обоих козлов, зарезал их и втащил в  дом.  Тут
он содрал с них шкуру, а туши положил вариться в большей котел. Когда мясо
было готово, Тор пригласил крестьян поужинать  вместе  с  ним  и  с  Локи.
Голодные люди с радостью согласились и  жадно  набросились  на  еду.  Боги
скоро наелись и пошли спать, но перед тем как уйти, Тор расстелил на  полу
козлиные шкуры и, обращаясь к крестьянам, сказал:
     - Я разрешаю вам съесть сколько угодно мяса, но смотрите, не трогайте
костей, а сложите их все до единой  в  эти  шкуры,  иначе  я  вас  жестоко
накажу.
     - А ведь кости-то вкуснее всего, - тихо шепнул Локи на  ухо  Тиальфи,
прежде чем последовать за своим спутником.
     Слова коварного бога не пропали даром, и, в то время  как  сам  Эгил,
его жена и дочь точно выполнили приказание Тора, Тор, которому  захотелось
полакомиться косным мозгом, расщепил одну из костей  своим  ножом.  Утром,
проснувшись, Тор первым делом подошел к козлиным шкурам  и  дотронулся  до
них своим молотом. Оба козла сейчас же как ни в чем не бывало, вскочили на
ноги, живые и невредимые, и только один  из  них  немного  прихрамывал  на
заднюю ногу. Увидев это, Тор понял, что кто-то  из  крестьян  нарушил  его
запрет, и из-под его густых сдвинутых  бровей  сверкнула  молния.  Он  уже
поднял Мйольнир, готовясь убить  ослушника,  но  тут  вся  семья  Эгила  с
громким плачем  бросилась  перед  ним  на  колени,  умоляя  грозного  бога
простить Тиальфи. Когда Тор  увидел  слезы  этих  бедняков  и  услышал  их
мольбы, его гнев сейчас же прошел. Он сказал, что не будет их  наказывать,
но потребовал, чтобы Эгил отдал ему в услужение обоих детей, на что тот  с
радостью согласился.
     Продолжать путешествие в колеснице, пока у козла не зажила нога, было
нельзя, поэтому Тор оставил Тангиоста и Тангризнира у эгила, а лам  вместе
с локи и своими новыми слугами пошел дальше пешком.
     Достигнув берега огромного моря, которое  отделяет  землю  от  страны
великанов, путники построили себе лодку и поплыли, держа курс  на  восток.
Через несколько дней на рассвете они уже благополучно  пристали  к  берегу
Йотунхейма. Тут они снова пошли пешком  и  вскоре  добрались  до  высокого
дремучего леса. Они шли по нему целый день, но казалось, что ему не  будет
ни конца, ни края. Наступил вечер,  и  Тор  уже  думал,  что  им  придется
заночевать на голой земле, как вдруг он наткнулся  на  большую  хижину.  В
этой хижине было всего три стены и потолок, но путешественники так устали,
что не обратили  на  это  внимания.  Все  четверо  наскоро  поужинали  той
провизией, которая была в котомке Тора, и легли спать.
     Ночью неожиданно послышались раскаты грома, и вся хижина  затряслась.
Тор  схватил  свой  молот,  а  его  спутники  стали  искать,  куда  бы  им
спрятаться. Наконец в одной из стен хижины они обнаружили вход в небольшую
постройку и забились туда, дрожа от страха, а Тор встал у входа с  молотом
в руках и простоял так всю ночь. Как  только  настало  утро,  он  поспешил
выйти наружу и увидал неподалеку спящего великана. От его  могучего  храпа
тряслась земля. Тор сейчас же надел волшебный  пояс,  увеличивающий  вдвое
его силу, и уже готовился метнуть в великана молот, но  в  это  время  тот
проснулся и встал на ноги. Он был так огромен и страшен, что  Тор  впервые
не решился пустить в ход свое грозное оружие, а только  спросил  великана,
как его зовут.
     - Меня зовут Скримир, - отвечал тот. - А о твоем племени мне не нужно
и спрашивать: ты, конечно, Тор. Но постой, куда же делась моя рукавица?
     Он нагнулся, и Тор увидел, что та хижина, в которой они провели ночь,
была огромная рукавица, а небольшая  пристройка,  в  которой  они  позднее
прятались, - ее большей палец.
     - Куда ты направляешься, Тор? - спросил его Скримир.
     - Я хочу побывать в королевстве Утгард, - отвечал бог грома.
     - В таком случае, давайте позавтракаем, - сказал великан, - а  потом,
если не возражаешь, пойдем вместе. Я как раз иду в ту же сторону.
     Тор согласился.  Скримир  сел  на  землю,  развязал  свою  котомку  и
спокойно принялся  за  еду.  Видя  это,  путешественники  последовали  его
примеру. После завтрака великан сказал:
     - Давайте сюда вашу котомку, я понесу ее вместе со своей.
     Тор не стал возражать. Скримир вложил его  котомку  в  свою,  затянул
ремнями, взвалил себе на спину и пошел. Он делал такие огромные шаги,  что
Тор и  его  спутники  с  трудом  поспевали  за  ним.  Скримир  остановился
остановился только под вечер. Скинув котомку на землю, он не спеша  улегся
под огромным дубом.
     - Я так устал, - сказал великан, -  что  не  хочу  есть,  а  если  вы
хотите, то развяжите котомку и берите из нее все что вам надо.
     С этими словами Скримир тут же заснул и  оглушительно  захрапел.  Тор
подошел к котомке великана и попытался  развязать  стягивающие  ее  ремни.
Целый час голодный Ас пыхтел и обливался  потом,  но  все  было  напрасно.
Тогда он пришел в ярость и, забыв всякую осторожность, подошел к  Скримиру
и ударил его молотом по голове.
     - Кажется, на меня с дерева упал лист?
     - Ну что, Тор, вы уже  поужинали?  В  таком  случае  ложитесь  спать.
Завтра нам предстоит длинный путь.
     И он опять захрапел. Тор, Локи, Тиальфи и Ресква легли  под  соседним
деревом, но спать они не могли.  Бог  грома  был  вне  себя  от  гнева.  В
середине ночи он встал, опять подошел к Скримиру и с  размаху  ударил  его
молотком по темени. Он почувствовал,  что  молот  глубоко  ушел  в  голову
великана, но тот только потянулся, зевнул и проговорил сонным голосом:
     - На меня что-то упало. Наверное, желудь. Ты не спишь, Тор? Разве уже
пора вставать? Ведь еще совсем темно.
     - До утра еще далеко,  -  отвечал  ему  Тор,  -  и  ты  можешь  спать
спокойно. Я сейчас тоже снова лягу.
     Скримир снова закрыл глаза, а Тор в смущении пошел под свое дерево. В
первый раз в  жизни  ему  пришлось  встретить  великана,  против  которого
оказался бессильным его Мйольнир. Вскоре начало светать, и тогда  Тор  все
же решил сделать еще одну попытку. Он осторожно подкрался к Скримиру и изо
всех сил ударил ударил его молотом  в  висок.  На  этот  раз  Мйольнир  по
рукоятку ушел в голову исполина. Великан проснулся, провел рукой по  виску
и воскликнул:
     - Неудачное место выбрал я для ночлега! Наверное,  на  ветвях  дерева
сидят птицы. Только что целый сучок упал мне  на  голову.  Эй,  Тор!  Пора
вставать! Уже совсем рассвело.
     С этими словами Скримир поднялся, развязал свою  котомку,  достал  из
нее котомку Тора и отдал ее остолбеневшему от удивления богу грома.
     - Давайте завтракать, - сказал он, - а затем скорее в путь.
     Путешественники, растерянно переглядываясь, принялись за еду и  поели
за два дня сразу. Потом Скримир снова пошел вперед, а Тор и остальные - за
ним. Часа через два они наконец постигли опушки леса.
     - Ну, - сказал Скримир, - если вы все еще  хотите  попасть  в  страну
Утгард к нашему королю, то вам следует идти отсюда на восток, а мне  нужно
на север. Примите же от меня совет. Я слышал, как вы говорили между  собой
что не считаете меня очень маленьким. Знайте же, что в замки нашего короля
есть люди еще покрупнее меня, так что не слишком надейтесь на  свои  силы.
До свидания.
     Сказав это, Скримир быстро пошел на север, а четыре путника еще долго
смотрели ему вслед, искренне желая никогда больше его не видеть.
     Несмотря на предостережения Скримира, Асы продолжали путь и уже около
полудня увидели перед собой огромный замок,  окруженный  высокой  железной
решеткой. В ней были  сделаны  ворота,  но  они  оказались  на  запоре.  К
счастью, прутья решетки так далеко отстояли друг от друга, что все четверо
легко пролезли между ними. Тор смело распахнул двери замка и вошел внутрь,
сопровождаемый  Тиальфи  и  Ресквой.  Локи  из  предосторожности  держался
немного позади. Они оказались в огромном зале, посреди которого сидел  сам
король  страны  Утгард  -  Утгардалоки.  Около  него  стояло  много  много
великанов, и все они с изумлением смотрели на пришельцев.
     - Привет тебе, Тор! - медленно проговорил Утгардалоки. - Я рад видеть
тебя и твоих спутников, но знаешь ли ты, что по нашему закону здесь  имеют
право быть только те, кто проявит себя в каком-нибудь деле, или  искусстве
и занял в нем первое место? Чем же можете похвалиться вы все?
     - В стране Асов, - сказал Локи, стоявший позади Тора, -  нет  никого,
кто бы ел быстрее меня.
     - Это большое искусство, - ответил Утгардалоки, - и  если  ты  сказал
правду, то будешь окружен у нас почетом. Сейчас мы устроим тебе состязание
с одним моим человеком, которого зовут Логи.
     Утгардалоки хлопнул в ладоши, и его слуги  сейчас  же  внесли  в  зал
огромное корыто с мясом. Корыто поставили на пол. Локи и  Логи  сели  друг
против друга и по знаку короля Утгарда начали есть.  Уже  через  несколько
минут они встретились как раз в середине корыта, но Локи съел только мясо,
тогда как Логи сожрал и мясо и кости да еще и  половину  корыта  впридачу.
Поэтому, он был объявлен победителем.
     - Не очень быстро едят боги, - с насмешкой сказал Утгардалоки. -  Ну,
а что же может делать этот юноша, которого, кажется, зовут Тиальфи?
     - В Митгарде говорят, что я бегаю быстрее всех,  -  отвечал  Тиальфи,
удивленный тем, что великан знает его имя.
     - Хорошо, - сказал Утгардалоки. - Мы проверим и это.
     Все вышли из замка. Перед ними расстилалось поле  с  широкой,  хорошо
утоптанной дорогой. Здесь и должно было произойти состязание.  Утгардалоки
вызвал из толпы своих приближенных юношу, по имени Гуги,  и  приказал  ему
бежать наперегонки с Тиальфи. Затем  Утгардалоки  махнул  рукой  и  бегуны
устремились вперед. Тиальфи бежал очень  быстро,  но  Гуги  все  же  сумел
обогнать его на один шаг.
     - Попробуем еще, - сказал Утгардалоки.
     Тиальфи и Гуги побежали снова, но  на  этот  раз  Тиальфи  отстал  от
своего противника же на расстояние полета стрелы. Третья попытка была  для
Тиальфи еще более неудачной. Он не  пробежал  и  половины  пути,  как  его
противник был уже у цели.
     - Видно,  что  бегают  у  вас  так  же,  как  и  едят,  -  усмехнулся
Утгардалоки. - Ну, а ты, Тор? Что ты умеешь делать?
     - Среди Асов утверждают, что никто  не  может  пить  так,  как  я,  -
отвечал Тор.
     - Вот это искусство так искусство! - воскликнул Утгардалоки. - Что ж,
пойдем назад в замок. Там ты покажешь, как пьют в Асгарде.
     Все  вернулись  обратно  в  зал.  Утгардалоки  отдал  приказ   своему
виночерпию, и тот поднес Тору длинный и узкий рог,  до  краев  наполненный
водой.
     - Слушай, Тор, - сказал Утгардалоки, - некоторые из нас осушают  этот
рог в один прием, а большинство - в два. Только самые слабые люди  Утгарда
выпивают мой рог в три приема, но ты, конечно, осушишь его сразу.
     Хотя рог и был очень длинен, он не показался Тору большим. Бог  грома
приставил его к губам и стал тянуть что было силы. Наконец он остановился,
чтобы перевести дух,  и,  к  своему  величайшему  удивлению,  увидел,  что
количество воды в роге почти не убавилось.
     - Ты слишком много оставил на второй раз, -  заметил  Утгардалоки.  -
Постарайся же теперь не ударить лицом в грязь.
     Тор снова приложил рог к губам и пил до  тех  пор,  пока  у  него  не
перехватило дыхание. Однако на этот раз воды в роге убавилось еще  меньше,
чем в первый.
     - Плохо ты пьешь, - сказал Утгардалоки. - Теперь, чтобы стяжать у нас
славу, тебе придется проявить свое искусство в чем-нибудь другом.
     Взбешенный Тор в третий раз попытался осушить рог. Он пил так  долго,
что у него перед глазами пошли круги, но так и не осушил рога, хотя теперь
воды в нем было уже заметно меньше.
     - Довольно, - сказал Утгардалоки. - Я думаю, что ты сам видишь, что у
нас пьют не так, как в Асгарде. Скажи-ка лучше, что ты еще умеешь делать?
     - Я бы охотно показал вам свою силу, - проворчал Тор.
     - Пожалуйста, - отвечал  Утгардалоки.  -  Молодые  люди  моей  страны
обычно пробуют свою силу,  подымая  кошку.  Конечно,  это  забава  не  для
взрослых, но после того, как ты так плохо пил, я боюсь, что она будет тебе
не под силу.
     В эту минуту в зал вошла большая серая  кошка.  Тор  подошел  к  ней,
обхватил ее обеими руками и попытался поднять, но, как он ни  пыхтел,  как
ни старался, кошка не сдвинулась с места и только одна ее лапа  оторвалась
от земли.
     - Так я и думал, - засмеялся Утгардалоки. - Да это и  понятно:  кошка
большая, а Тор маленький. Где ему поднять такого зверя!
     - Может быть я и маленький, - вскричал Тор вне себя от гнева, - но  я
все же берусь побороться с любым из вас, несмотря на ваш рост.
     - Прежде чем бороться с нами, - сказал Утгардалоки, - я советую  тебе
сначала попробовать свою силу на моей старой кормилице, Элли. Если  ты  ее
поборешь, я готов признать, что ты не так слаб, как я думаю. Если же она с
тобой  справится,  тебе  нечего  и  думать  о  том,  чтобы  состязаться  с
настоящими мужчинами.
     Тут он хлопнул в ладоши и громко позвал:
     - Элли! Элли!
     На его зов в зал вошла дряхлая, сморщенная старуха и  спросила,  чего
ему надо.
     - Я хочу, чтобы ты поборолась с моим гостем, - отвечал Утгардалоки. -
Он хвалился  своей  силой,  и  мне  интересно  посмотреть,  сможет  ли  он
справиться с тобой.
     Тор схватил Элли поперек туловища и хотел сразу же положить ее на обе
лопатки, но она устояла и, в свою очередь, с такой силой сжала его  своими
руками, что у него перехватило  дыхание.  Чем  больше  старался  Тор,  тем
крепче становилась старуха.  Внезапно  она  сделала  ему  подножку,  и  не
ожидавший этого бог грома упал на одно колено.
     Утгардалоки, казалось, был очень удивлен, однако он  ничем  не  выдал
этого и, обращаясь к богу грома, сказал:
     - Ну, Тор, теперь ты и сам видишь, что тебе незачем мериться  с  нами
силой, не можешь ты и оставаться дольше в моем замке. Но я все же  слишком
гостеприимный хозяин, чтобы отпустить вас  голодными,  а  поэтому  давайте
обедать.
     Тор молча опустил голову: ему было стыдно, что он не  мог  произнести
ни слова.
     Утгардалоки на славу угостил своих гостей, а после обеда сам пошел их
провожать. Когда они вышли из замка, он спросил:
     - Ну как, Тор, доволен ли ты своим путешествием и понравилась ли тебе
у нас?
     - У вас мне понравилось, - отвечал Тор, - но не могу сказать, чтобы я
был доволен своим пребыванием в вашей стране. Еще ни одно  путешествие  не
кончалось так бесславно.
     - А я, Тор, даже и не подозревал,  что  ты  так  могуч,  -  улыбаясь,
сказал Утгардалоки, - а то бы не видеть тебе моего замка! Теперь, когда вы
из него уже вышли, я могу  открыть  тебе,  что  ты  с  самого  начала  был
обманут. Великан Скримир, повстречавшийся с тобой в лесу, был я  сам.  Мою
котомку ты не мог открыть потому, что ремни на ней были заклепаны железом,
а когда ты бил меня своим молотом, я подсунул  тебе  вместо  себя  обломок
скалы. Может быть,  ты  заметил  в  моем  замке  большой  камень  с  тремя
глубокими впадинами? Это следы твоих ударов.  Локи  ел  очень  быстро,  но
Логи, с которым он состязался, был сам  огонь,  а  ты  знаешь,  что  огонь
прожорливее всех на свете. Тиальфи замечательный бегун, но перегнать  Гуги
он не мог, потому что Гуги - это мысль, а  мысль  быстрее  любого  бегуна.
Рог, из которого ты пил, другим  концом  был  соединен  с  мировым  морем.
Осушить это море, конечно, нельзя, но ты выпил из него столько  воды,  что
оно обмелело, как при сильнейшем отливе. Подымал ты вовсе не кошку, а змею
Митгард. Она обвивает кольцом весь мир, а ты поднял ее так, что она только
кончиком своей морды и кончиком хвоста еще касалась земли.  Самое  трудное
испытание ты выдержал тогда, когда боролся со старухой Элли.  Элли  -  это
старость. Ты знаешь, что она любого человека кладет на обе лопатки, ты  же
упал перед нею только на одно колено. Теперь, Тор, я сам убедился в  твоей
силе и от всей души желаю никогда больше тебя не видеть. Прощай!
     Весь красный от охватившего его гнева, Тор  схватил  свой  молот,  но
Утгардалоки внезапно исчез. Вместе с ним исчез  и  его  замок,  и  на  том
месте, где он стоял, перед  глазами  Тора  и  его  спутников  простиралось
только равное поле.
     Так закончились похождения Тора в страну Утгард.



                       ПОЕДИНОК ТОРА С ГРУНГНИРОМ

     Вернувшись из волшебного королевства  Утгард,  бог  грома  тотчас  же
снова умчался на восток, сражаться с великанами.
     В его отсутствие Одину как-то раз  захотелось  покататься  верхом  на
Слейпнире и взглянуть, что нового делается на белом  свете.  Сначала  отец
богов объехал землю и, убедившись, что на ней  все  обстоит  благополучно,
направил своего восьминогого скакуна на восток. Перепрыгивая с  облака  на
облако, Слейпнир быстро достиг Йотунхейма и поскакал над Каменными горами,
владениями свирепого и могущественного великана  Грунгнира.  В  это  время
великан как раз вышел из своего замка и, увидев высоко в воздухе  всадника
в крылатом золотом шлеме, широко раскрыл глаза от удивления.
     - Хороший у тебя конь, приятель! - крикнул  он.  -  Пожалуй,  немного
найдется скакунов, который могли бы его перегнать.
     Один натянул поводья, и Слейпнир, став всеми своими восемью ногами на
небольшое облачко, застыл на месте.
     - Такой лошади, которая могла бы перегнать моего  Слейпнира,  нет  во
всем мире, - гордо заявил  старейший  из  Асов,  -  ни  в  Асгарде,  ни  в
Митгарде, ни б Йотунхейме.
     - Ты хвастаешься, незнакомец! - сердито возразил великан. - Мой  конь
Гульфакси перегонит твоего скакуна, хотя у него и не восемь ног!
     - Что ж, будем биться об заклад, - сказал Один. -  Не  вернуться  мне
живым домой, если твоему коню удастся хотя бы догнать моего жеребца.
     -  Ну  погоди  же,  сейчас  я  тебя  проучу,  жалкий  хвастунишка!  -
воскликнул Грунгнир, рассердясь еще больше.
     Он бросился в конюшню, вывел оттуда своего могучего вороного  жеребца
и, вскочив в седло, помчался прямо к Одину. Тот подпустил его  поближе,  а
потом повернул Слейпнира и быстро поскакал обратно на запад. Он думал, что
сразу же оставит великана далеко позади, но Грунгнир недаром хвалил своего
коня. Гульфакси, так же как и Слейпнир, легко скакал по воздуху и, хотя  и
не  мог  догнать  своего  восьминогого  противника,  мало  уступал  ему  в
скорости. Оба  всадника  скоро  оставили  позади  себя  Йотунхейм,  вихрем
пронеслись над мировым морем, а потом над митгардом и  незаметно  достигли
стен Асгарда. Увлекшись погоней и ослепленный гневом, великана скакал,  не
разбирая дороги, и опомнился только тогда, когда очутился перед  роскошным
дворцом отца  богов  и  увидел  Асов,  которые  со  всех  сторон  окружили
незваного гостя. Грунгнир был силен и храбр, но невольно смутился, так как
был безоружен и знал, что Асы могут в любую  минуту  позвать  бога  грома.
Заметив его нерешительность, Один весело рассмеялся.
     - Не бойся, Грунгнир, - сказал он. - Входи и будь нашим  гостем.  Ты,
верно, проголодался после такой скачки, да и твоему жеребцу тоже не мешает
отдохнуть.
     Грунгнир сейчас же сошел с коня и, надувшись от гордости - как-никак,
а он был первым великаном, которого боги пригласили на свое  пиршество,  -
вошел в зал. Асы усадили его за стол на то место, где обычно сидел Тор,  и
поставили перед  ним  два  огромных  кубка  с  крепким  медом.  Эти  кубки
принадлежали богу грома, но мы уже знаем, что никто не мог пить  так,  как
он,  и  для  Грунгнира  они  оказались  не  под  силу.  Несмотря  на  свой
исполинский рост  и  могучее  сложение,  великан  скоро  охмелел  и  начал
хвастаться.
     - Во всем мире нет никого, кто бы был сильнее меня! - воскликнул  он.
- Ваш знаменитый Тор просто карлик по сравнению со  мной.  Я  могу  голыми
руками перебить вас всех.
     - Успокойся, Грунгнир, - добродушно сказал Один. - Ты наш гость, и мы
не собираемся с тобой драться.
     - Молчи! - закричал великан свирепо. - Довольно  вы  властвовали  над
миром - теперь пришла моя очередь, а вы все готовьтесь к смерти!
     Он был так страшен в своем гневе, что Асы, боясь сидеть с ним  рядом,
один за другим отошли на другой конец зала. Лишь одна Фрейя смело  подошла
к великану и вновь наполнила его кубки медом. Грунгнир выпил  их  один  за
другим и опьянел еще больше.
     - Я перенесу Валгаллу в Йотунхейм, - сказал он заплетающимся  языком.
- Фрейя и Сиф пойдут со мной и станут моими  рабынями,  а  остальных  Асов
вместе с их Асгардом я утоплю в мировом море, но сначала я выпью весь  ваш
мед.
     И он снова протянул Фрейе свои кубки.
     Не в силах далее слушать его  похвальбу,  Асы  хором  произнесли  имя
Тора. В  тот  же  миг  послышался  стремительно  нарастающий  рокот  колес
железной колесницы, и в дверях зала показался бог грома с молотом в руках.
Увидев за столом Грунгнира, Тор застыл на месте. Он  молча  обвел  глазами
всех Асов, потом опять взглянул  на  Грунгнира  и  заскрежетал  зубами  от
ярости.
     - Как! - воскликнул он. - В то время, когда я сражаюсь с  великанами,
этими злейшими и беспощаднейшими врагами богов и людей, вы сажаете  одного
из них на мое место и пьете вместе с ним! Кто впустил его  в  Асгард?  Кто
разрешил ему  войти  в  Валгаллу?  Как  не  стыдно  тебе,  Фрейя,  угощать
коварного Гримтурсена так же, как ты угощаешь  нас  на  великом  празднике
богов!
     Асы смущенно молчали, а Грунгнир, который  сразу  отрезвел  при  виде
бога грома, поспешно ответил:
     - Меня пригласил сюда сам Один. Он меня угощает, и я нахожусь под его
защитой.
     - Кто бы тебя ни приглашал, за это угощение  ты  расплатишься  прежде
чем выйдешь отсюда! - возразил Тор, подымая молот.
     - Да, теперь я вижу, как глуп я был, придя сюда безоружным, -  угрюмо
промолвил Грунгнир. Но  скажи,  велика  ли  будет  честь  для  Тора  убить
беззащитного? Ты проявил бы куда больше смелости, если  бы  встретился  со
мной в честном бою на моей родине, в каменных горах. Принимай  мой  вызов,
Тор, или я перед всеми богами назову тебя трусом.
     Еще никто не называл бога грома на поединок,  и  грозный  Ас  не  мог
отказаться от боя, не умалив тем самым своей славы, которая была для  него
дороже всего. Тор медленно опустил молот.
     - Хорошо, Грунгнир, я принимаю твой вызов, - сказал он. -  Через  три
дня ровно в полдень я явлюсь к тебе, в твои родные Каменные горы. А теперь
отправляйся домой. Не отделаться бы тебе так  легко,  да  у  меня  сегодня
большая радость: великанша Ярнсакса родила мне сегодня  сына,  которого  я
назвал Магни.
     Не говоря больше ни слова, Грунгнир поспешно вышел и, сев  на  своего
жеребца, отправился в обратный путь.
     Весть о том, что он вызвал на поединок самого Тора,  быстро  облетела
весь Йотунхейм и вызвала среди великанов большое  волнение.  Грунгнир  был
сильнее всех своих соплеменников и считался  среди  них  непобедимым.  Его
голова была из гранита, а в груди у него - недаром он жил в Каменных Горах
- билось каменное сердце. Но Гримтурсены все  же  боялись,  что  и  он  не
устоит перед Тором и его грозным  молотом.  Тогда  они  решили  изготовить
Грунгниру щит, который смог бы  выдержать  даже  удары  Мйольнира.  Триста
великанов немедленно принялись за работу, и к утру третьего дня такой  щит
был уже готов. Он был сделан из самых толстых дубовых  стволов,  а  сверху
облицован  обточенными  гранитными  глыбами  величиной   в   два   хороших
крестьянских дома каждая. Тем временем остальные великаны слепили из глины
исполина  Моккуркальфи,  который  должен  был  помогать  Грунгниру  в  его
поединке с богом грома. Этот исполин был пятидесяти  верст  росту  и  имел
пятнадцать верст в плечах.  Гримтурсены  хотели  и  ему  сделать  каменное
сердце, но на это у них не хватило времени, и поэтому они вложили в  грудь
Моккуркальфи сердце кобылы.
     Но вот настал  условленный  час,  и  Грунгнир,  вооружившись  тяжелой
кремневой дубиной, которой он  разбивал  на  куски  целые  скалы,  и  взяв
изготовленный для него щит, в  сопровождении  своего  глиняного  помощника
направился к месту поединка.
     Между тем не знающий страха и уверенный  в  победе  Тор,  захватив  с
собой одного Тиальфи, мчался на своей колеснице к Каменным Горам. Они  уже
миновали море, когда Тиальфи попросил Тора на минутку остановиться.
     - Мы приедем слишком рано, мой господин, - сказал он. - Лучше подожди
немного здесь, а я побегу  вперед  и  узнаю,  не  готовят  ли  нам  хитрые
Гримтурсены какую - нибудь западню.
     - Хорошо, ступай, - согласился бог грома. - Я поеду вслед за тобой.
     Тиальфи со всех ног пустился бежать  к  Каменным  Горам  и,  прибежав
туда, увидел Грунгнира, который, прикрывшись щитом, внимательно смотрел на
небо, ожидая своего противника.
     "Хороший у него щит, - подумал юноша. - Пожалуй, он  выдержит  первый
удар Мйольнира, а кто знает, успеет ли  Тор  нанести  второй.  Ну  ничего,
сейчас я его проведу".
     - Эй, Грунгнир! - крикнул он громко. - Будь осторожней, иначе тебе не
миновать беды: ты ждешь бога грома сверху, а он еще  издали  заметил  твой
щит и спустился под землю, чтобы напасть на тебя снизу.
     Услышав это, Грунгнир поспешно бросил свой щит на землю, стал на него
и, схватив обеими руками кремневую дубину, поднял ее над головой.  Но  тут
ярко сверкнула молния, раздался оглушительный удар  грома,  и  высоко  над
облаками появилась стремительно увлекаемая козлами колесница Тора. Завидев
врага, могучий Ас еще издали метнул в  него  молот,  но  и  великан  почти
одновременно успел бросить в бога грома свое  страшное  оружие.  Кремневая
дубина Грунгнира столкнулась в воздухе с Мйольниром и разбилась вдребезги.
Ее осколки разлетелись далеко в разные стороны, и один из них  вонзился  в
лоб Тора. Потеряв сознание, бог грома пошатнулся и упал с колесницы  прямо
под ноги великана. Но Грунгнир не успел даже  порадоваться  своей  победе:
разбив дубину великана, Мйольнир с  такой  силой  обрушился  на  гранитную
голову властелина Каменных Гор, что расколол ее пополам, и великан  тяжело
рухнул на тело своего врага, придавив коленом его горло.
     Тем временем верный слуга Тора с мечом в руке бесстрашно бросился  на
Моккуркальфи. Их схватка продолжалась также недолго.  Глиняный  исполин  с
кобыльим сердцем, едва увидел бога грома, задрожал  как  осиновый  лист  и
после двух - трех ударов Тиальфи рассыпался на куски. Шум от  его  падения
был слышен во всем мире  и  так  перепугал  жителей  Йотунхейма,  что  они
разбежались по своим домам и целый день боялись оттуда выйти.
     Покончив с противником, Тиальфи поспешил на помощь своему господину и
попытался скинуть ногу Грунгнира с его горла, но она была так тяжела,  что
он не смог сдвинуть ее с места. Отважный юноша не растерялся. Он вскочил в
колесницу Тора и, помчавшись на ней в Асгард, привез оттуда Одина  и  всех
остальных богов. Асы дружно схватили  ногу  великана,  однако  поднять  ее
оказалось не под силу даже им.
     Ужас наполнил сердца богов: они считали Тора  погибшим,  и  даже  сам
Один растерялся, не зная, как ему спасти своего старшего сына.
     Неожиданно  позади  Асов  послышались  чьи-то   тяжелые   шаги.   Они
обернулись и увидели, что к ним  подходит  какой-то  рослый,  широкоплечий
богатырь с круглым детским лицом и большими темно-синими глазами.
     - Скажите, где и как мне найти моего отца? - спросил он богов.
     - А кто твой отец? - в свою очередь спросил его Один.
     - Мой отец - бог грома! - гордо ответил богатырь. - Я его сын  Магни.
Три дня назад я родился, а сегодня утром узнал, что он должен сражаться  с
великаном Грунгниром, и теперь спешу к нему на помощь.
     Боги удивленно переглянулись.
     - Грунгнир уже мертв, - сказал Тир, - а твой отец лежит под  ним  без
сознания, и мы не можем его освободить.
     - Вы не можете его освободить? - рассмеялся  Магни.  -  Да  ведь  это
очень легко.
     С этими словами он нагнулся, взял ногу Грунгнира и как перышко скинул
ее с горла Тора.
     Тор сейчас же вздохнул и открыл глаза.
     - Здравствуй, отец, - сказал Магни, наклонясь к богу грома и  помогая
ему встать на ноги. - Как жаль, что я опоздал! Приди я часом раньше, я  бы
убил этого великана ударом кулака.
     - Ты молодец! - воскликнул Тор,  горячо  обнимая  сына.  -  И  ты  не
останешься без награды. Я дарю тебе Гульфакси, вороного жеребца Грунгнира,
который мало чем уступает даже Слейпниру.
     - Нехорошо дарить сыну великанши такого прекрасного коня! - проворчал
Один.
     - А разве лучше пить  с  великаном  за  одним  столом?  -  насмешливо
спросил бог грома.
     Но он не дождался ответа.
     Боги усадили раненого Тора в колесницу и отправились в обратный путь.
     С той поры прошли века, но  и  сейчас  повсюду  в  мире  можно  найти
кремни, осколки дубины Грунгнира, а на востоке, в  стране  великанов,  все
еще возвышается  глиняная  гора  -  все,  что  осталось  от  Моккуркальфи,
исполина с кобыльим сердцем.
     Осколок дубины Грунгнира по-прежнему сидел во лбу Тора, причиняя  ему
большие страдания. Чтобы помочь раненому, Асы позвали  к  нему  волшебницу
Гроа, жену знаменитого героя Аурвандиля, который  уже  больше  года  назад
отплыл в Нифльхейм и о котором с тех пор не было ни слуху, ни  духу.  Гроа
сейчас же пришла и стала произносить  над  богом  грома  свои  заклинания.
Вскоре кремневый осколок задвигался и стал выходить наружу.  Почувствовав,
что мучившая его боль утихла, Тор с благодарностью взглянул на волшебницу.
     - Послушай, Гроа, - сказал он, - я вижу,  что  ты  печальна,  и  знаю
почему. Ты думаешь, что твой муж находится в Нифльхейме, в плену у снежных
великанов, но это не так. Десять дней назад я был там и  после  долгого  и
упорного сражения освободил Аурвандиля из плена. Я посадил его в  корзину,
взвалил ее на плечи и, перейдя  вброд  все  двенадцать  потоков  Эливагар,
вынес его из царства туманов. Твой муж уже давно был бы дома, если  бы  не
хромал: пока я его нес, Аурвандиль отморозил себе на правой  ноге  большой
палец, да так сильно, что он отвалился.
     Слезы радости хлынули из глаз Гроа, и она от волнения забыла все свои
заклинания. Напрасно сидела она потом несколько дней у постели бога  грома
- волшебные слова уже никогда больше не пришли ей на ум, и небольшая часть
осколка так и осталась во лбу Тора. Там она находится и по сей день.



                          ТОР В ГОСТЯХ У ГЕЙРОДА

     Пока Тор залечивал свою рану, а  остальные  боги  за  ним  ухаживали,
Локи, скучая,  бродил  по  Асгарду,  не  зная,  какую  новую  проказу  ему
придумать. Наконец он пришел к Фрейе и попросил у  богини  любви  еще  раз
одолжить ему соколиное оперения.
     - Я хочу слетать в Йотунхейм,  -  сказал  он,  -  и  посмотреть,  что
замышляют против нас великаны.
     Добрая Фрейя редко отказывала кому-нибудь в любой просьбе,  и  спустя
каких-нибудь полчаса, Локи уже летел на восток, по  направлению  к  стране
великанов.
     Величайшим князем Гримтурсенов после Грунгнира  был  великан  Гейрод.
Почти столь же могучий, как и властелин Каменных Гор, он был намного умнее
и хитрее его, а кроме того, имел трех дочерей, каждая из которых почти  не
уступала ему в силе.
     На крышу его замка и опустился Локи, прилетев в Йотунхейм.  Некоторое
время он сидел там тихо и спокойна, разглядывая бродивших по  двору  слуг,
но потом ему это надоело. Тогда он  засунул  голову  в  трубу  и  принялся
кричать, подражая голосам различных зверей и птиц, и при этом так громко и
пронзительно, что Гейрод, который в это время  обедал,  бросил  есть  и  в
страхе выбежал во двор.
     Увидев на крыше своего замка огромного сокола, он  позвал  одного  из
слуг и приказал ему поймать дерзкую птицу.
     "Ладно, ладно, - подумал Локи, видя как слуга великана с трудом лезет
на крышу. - Старайся, старайся, мой милый! Я подпущу тебя совсем близко, а
потом взлечу под самые облака".
     И, закрыв глаза, он притворился спящим. Между тем слуга - а  это  был
такой же великан, как и его хозяин, - в  конце  концов  все  же  залез  на
крышу, осторожно  подполз  к  мнимому  соколу  и  протянул  к  нему  руку.
Ожидавший этого  Локи  изо  всех  сил  оттолкнулся  от  крыши  и  взмахнул
крыльями, чтобы взлететь, но зацепился ногой за одну из черепиц и,  прежде
чем успел освободиться, был пойман. Слуга осторожно  спустился  с  ним  во
двор и передал его Гейроду.
     Едва взглянув в умные и  хитрые  глаза  своего  пленника,  тот  сразу
понял, что перед ним не обыкновенная птица.
     - Ну-ка дружок, - сказал он насмешливо, говори, кто ты такой?
     Локи, подражая настоящему соколу, защелкал клювом и попытался клюнуть
великана в палец.
     Хорошо же! - сердито  сказал  Гейрод.  -  Подождем,  ты  у  меня  еще
заговоришь!
     Он отнес Локи домой, посадил его в большую железную клетку и приказал
слугам не давать ему есть и пить, пока он не скажет свое имя.
     Три месяца просидел взаперти бог огня, страдая от голода  и  жажды  и
все надеясь, что Гейрод рано или  поздно  его  освободит,  но  наконец  не
выдержал, и, когда великан снова спросил его, кто он  такой,  Локи  назвал
себя и попросил Гримтурсена выпустить его на свободу.
     - Я охотно тебя выпущу, - отвечал тот, - но сначала дай  мне  клятву,
что ты уговоришь Тора прийти ко мне  в  гости,  но  только  пешком  и  без
волшебного пояса, молота и рукавиц. Я уже давно хочу с ним поговорить.
     - Я не могу это сделать, - возразил Локи. - Тор никогда не расстается
со своим Мйольниром и не пойдет к тебе без него.
     - Не можешь? Хорошо, тогда ты останешься в клетке еще три  месяца,  -
сказал великан.
     - Нет, нет! - в страхе воскликнул Локи. - Так и  быть,  я  что-нибудь
придумаю. Клянусь, что уговорю Тора прийти к тебе!
     - Без пояса, молота и рукавиц? - спросил Гейрод.
     - Без пояса, молота и рукавиц, - послушно повторил Локи.
     - Ну, вот мы и договорились, - рассмеялся великан.
     Он позвал слуг, приказал им как  следует  накормить  и  напоить  бога
огня, после чего выпустил его на свободу.
     Измученный  трехмесячной  голодовкой,  Локи  с  трудом  добрался   до
Асгарда. Там он сбросил с себя соколиное оперение, отдал его Фрейе, а  сам
пошел к тору. За время его отсутствия бог грома уже залечил  свою  рану  и
теперь готовился отправиться в новое путешествие в страну великанов.
     - Здравствуй, Локи! - воскликнул он. - Где ты так долго пропадал?  Не
хочешь ли поехать со мной в Йотунхейм?
     - Я только что оттуда, - отвечал Локи. - Я был у Гейрода и побился  с
ним об заклад.
     - О чем же вы поспорили? - спросил Тор.
     - Я говорил Гейроду, что ты никого не боишься и можешь голыми  руками
победить любого из Гримтурсенов, а он утверждал, что ты трус  и  побоишься
прийти к нему пешком без своего молота, рукавиц и пояса, -  сказал  хитрый
бог.
     Тор задумался. Он слышал о Гейроде и понимал, как  опасно  явиться  к
нему безоружным, но мысль о том, что его могут  счесть  трусом,  была  для
него страшнее всего.
     - Ты выиграл свой заклад, - произнес он гордо. - Я пойду к Гейроду  и
покажу ему, нужен ли мне мой чудесный молот для того,  чтобы  разбить  ему
голову.
     - А ты не боишься? - усмехнулся Локи, желая  еще  больше  раззадорить
бога грома.
     Тот только гневно сверкнул на него глазами и пошел к Сиф. Он отдал ей
Мйольнир, пояс и рукавицы и, не отвечая  на  ее  расспросы,  отправился  в
путь.
     Как ни быстро шел сильнейший из Асов, прошло немало времени, пока  он
добрался до страны великанов. Здесь на берегу моря стоял  замок  великанши
Грид, матери молчаливого бога Видара. Грид,  хотя  и  жила  в  Йотунхейме,
давно порвала со своими соплеменниками и перешла на сторону Асов. Тор знал
это и решил у нее переночевать.
     Увидев, что бог грома идет пешком, а в  руках  у  него  нет  никакого
оружия, великанша очень удивилась, когда же он рассказал ей,  что  идет  к
Гейроду, она в ужасе всплеснула руками.
     - Ты, верно, ищешь смерти, Тор! -  воскликнула  она.  -  Тебе  ли  не
знать, как сильны и коварны Гейрод и его дочери? Послушайся меня  и,  пока
не поздно, вернись обратно.
     - Нет, тетушка Грид, - ответил бог грома, - я не могу вернуться,  так
как иначе Гейрод назовет меня трусом.
     Грид покачала головой.
     - Ну, если так, то иди, - проворчала она. - Но только надень на  руки
мои старые железные рукавицы да захвати с собой мою  клюку,  с  которой  я
хожу в лес. Поверь, что и то, и другое тебе очень пригодится.
     - Спасибо, тетушка Грид, - сказал Тор. -  Я  знаю,  что  ты  умна,  и
послушаюсь твоего совета.
     Добрая великанша накормила бога грома и  уложила  спать,  а  на  утро
разбудила его и, отдав ему свое рукавицы и клюку, проводила в дорогу.
     Спустя некоторое время Тор  пришел  к  берегу  широкой  горной  реки.
Понадеявшись на свой огромный  рост,  он  решил  переправиться  через  нее
вброд, и  действительно,  вода  доходила  ему  только  до  пояса.  Но  тут
неожиданно по реке побежали большие волны  и,  перекатываясь  через  плечи
Тора, чуть не сбили его с ног. Могучий Ас поспешно оперся на клюку Грид  и
посмотрел вверх по течению. Там, стоя  одной  ногой  на  одном  берегу,  а
другой ногой - на другом, возвышалась чудовищная великанша - старшая  дочь
Гейрода. Наклонившись, она с силой загребала руками воду и гнала ее  прямо
на Тора.
     - Ну погоди же, ты мне дорого заплатишь за это  купание!  -  в  гневе
воскликнул бог грома.
     Он наклонился и, подняв со дна потока большой камень,  изо  всех  сил
метнул его в великаншу. Удар пришелся ей прямо  в  висок,  и  она  мертвой
рухнула в реку, запрудив ее своим телом.  Вода  сейчас  же  спала,  и  Тор
благополучно перешел на другой берег.
     Еще часа два шел он горами, пока не увидел вдалеке высокую черепичную
крышу, о которую так неудачно зацепился  Локи.  Великан  стоял  на  пороге
своего жилища и, заметив приближающегося бога грома, злорадно усмехнулся.
     - Входи, Тор, входи и будь нашим гостем! - воскликнул  он.  -  Я  рад
тебя видеть, хотя ты и не очень любишь моих соплеменников.
     - Я их люблю так же, как они любят нас, Асов, - проворчал Тор,  смело
входя в дверь, которую ему открыл великан.
     - Ладно, ладно, не будем вспоминать старое, - сказал  Гейрод,  следуя
за богом грома. - Погляди, я приготовил все, чтобы принять тебя с  честью:
огонь в очаге горит, на вертеле жарится целый бык, а у стола  стоит  бочка
доброго старого меда. Мы с тобой сейчас попируем не хуже, чем вы пируете в
Асгарде.
     "Да, действительно, все это  так  как  он  говорит,  -  подумал  Тор,
недоверчиво осматриваясь по сторонам. - Вон бык, а вот бочка с  медом.  Не
понимаю только, зачем в очаге лежит этот большой, раскаленный добела кусок
железа".
     - Наверное, ты очень устал, Тор, да к  тому  же  голоден.  Садись  же
скорей за стол, - сказал Гейрод, все так же злорадно усмехаясь и показывая
богу грома на большой, высокий табурет.
     Тор сел на него и в тот же миг стремительно взлетел  вверх,  так  что
его голова чуть не разбилась о толстую потолочную балку. Однако  он  успел
упереться в нее железной клюкой  старухи  Грид,  которую  из  осторожности
держал в руках, и застыл в воздухе.
     -  Ты  хорошо  принимаешь  гостей,  Гейрод,  -  спокойно  сказал  он,
чувствуя, что кто-то пытается прижать его к потолку.  -  Но  я  не  привык
сидеть так высоко.
     С этими словами бог грома с силой  оттолкнулся  от  балки  клюкой,  и
табурет под ним сейчас  же  опустился  так  же  быстро,  как  и  поднялся.
Одновременно с этим Тор услышал громкие стоны и хруст костей и,  посмотрев
вниз, увидел двух дочерей Гейрода, лежащих на полу бездыханными.
     - Видно, я слишком тяжел и удержать меня не так-то легко, - засмеялся
он.
     Великан с открытым от удивления ртом некоторое время молча смотрел то
на своего гостя, то на мертвых дочерей, а потом  стремительно  бросился  к
очагу и, выхватив из него щипцами уже виденный  Тором  кусок  раскаленного
железа, метнул его в бога грома.
     Ас, у которого на руках были рукавицы матери  видара,  поймал  его  в
воздухе и высоко поднял над головой.
     - Это угощение мне  не  по  вкусу,  Гейрод,  -  сказал  он,  сверкнув
глазами. - Придется съесть тебе самому.
     Гейрод в  страхе  спрятался  за  стоящую  посреди  зала  колонну,  но
смертоносное железо, вылетев  из  могучей  руки  бога  грома,  пробило  ее
насквозь и поразило коварного великана в сердце.
     "Теперь, пожалуй, никто из Гримтурсенов больше не будет звать меня  в
гости, - сказал сам себе Тор, выходя из  замка  Гейрода  и  направляясь  в
обратный путь. - Но ничего, я приду к ним и без их вызова".



                           ТОР И ЗМЕЯ МИТГАРД

     Победы Тора над Тримом, Грунгниром и Гейродом прославили его  имя  по
всему  свету.  Великаны  не  осмеливались  больше  покидать  Йотунхейм   и
совершать набеги на землю, но бог грома все еще не был доволен. Он не  мог
забыть свое путешествие в волшебное королевство Утгард и  то,  как  он  не
смог поднять змею Митгард. Вспоминал он и слова вещих норн, предрекшим ему
гибель от этой страшнейшей из дочерей бога Локи.  Слишком  храбрый,  чтобы
бояться врага, как бы силен он не был, Тор приходил в  ярость  при  мысли,
что он должен терпеливо ждать, пока тот первый нападет на него. Наконец он
решил сам разыскать обвившееся вокруг всей земли чудовище  и  избавить  от
него мир, хотя бы это стоило ему жизни. Но змея Митгард  жила  глубоко  на
дне мирового моря, никогда не показываясь на  его  поверхности,  и,  чтобы
найти ее, бог грома должен был отправиться за помощью к морскому  великану
Гимиру. И вот однажды утром, не взяв с собой никого и даже не сказав Асам,
куда едет, Тор отправился в путь.
     Гимир жил в Нифльхейме, в огромной  пещере  на  берегу  моря.  Как  и
великан Мимир, он не воевал с богами, но и  не  дружил  с  ними,  стараясь
держаться от них в стороне. Поэтому, увидев Тора, он не  высказал  никакой
радости и угрюмо спросил, зачем тот к нему пожаловал.
     - Я бы хотел отправиться вместе с тобой на  рыбную  ловлю,  Гимир,  -
отвечал бог грома.
     - Со мною на рыбную ловлю? - удивился великан. -  Я  слышал,  что  ты
умеешь ездить над облаками и разбивать скалы своим молотом; слышал так же,
что ты одержал победу над многими моими собратьями  Гримтурсенами,  но  не
знал до сих пор, что ты умеешь удить рыбу и управляться  с  веслами.  Нет,
Тор, я не возьму тебя с собой: ты все равно ничего не  поймаешь  и  только
будешь мешать.
     - Не бойся, Гимир, - возразил бог грома. - Правда, я никогда не удил,
но знаю как это делается, да и грести я тоже сумею.
     - В северном море холодно, а  я  ужу  и  день  и  ночь  напролет;  ты
замерзнешь и попросишься на берег, - продолжал спорить Гримтурсен.
     - Я переходил вброд потоки Эливагар, вода в которых похолоднее, чем в
твоем море, и то не замерз, - сказал бог грома. - Видно, Гимир,  тебе  все
же придется взять меня с собой.
     Исполин нахмурился: он не знал  как  ему  отвязаться  от  назойливого
гостя.
     - Ладно, - проворчал он наконец. - Поезжай,  но  у  меня  нет  лишней
рыболовной снасти.
     - Я захватил с ее собой, - отвечал Тор, показывая  Гимиру  гигантский
крюк и канат толщиной с хорошее дерево.
     Великан оглушительно захохотал.
     - Такой крюк и такой канат выдержат целое стадо  китов,  -  промолвил
он, утирая выступившие у него от смеха слезы. -  Кого  же  ты  собираешься
ловить?
     - Это мое дело, - ответил сильнейший из Асов,  которому  уже  надоело
спорить с великаном. - Скажи лучше, есть ли у тебя приманка?
     - У меня есть приманка, но для себя, - снова нахмурился  Гимир.  -  А
достать приманку для тебя не мое дело, доставай ее сам.
     - Хорошо, я раздобуду ее и без твоей помощи! - сердито воскликнул бог
грома и вышел из пещеры.
     Возле нее, на пригорке, паслось стадо исполинских коров Гимира, среди
которых был бык, спина которого подымалась над  верхушками  самых  высоких
сосен. Недолго думая Тор схватил  его  за  рога  и,  оторвав  ему  голову,
вернулся с ней в пещеру.
     - Вот и приманка для моей удочки, - сказал он.
     - Как же ты посмел убить моего любимого быка? - заревел было великан,
но, увидев, что бог грома поглаживает  рукоятку  своего  Мйольнира,  сразу
успокоился и, мрачно насупив брови, пошел снаряжать лодку.
     - Я сяду на весла, Гимир, - сказал Тор, когда Гримтурсен  спустил  ее
на воду.
     - Как хочешь, - усмехнулся великан, - но только боюсь, что мне  скоро
придется тебя сменить.
     Однако, к его удивлению, Ас, который  по  сравнению  с  ним,  казался
совсем маленьким, греб лучше его самого, и их лодка быстрее птицы  неслась
по волнам.
     Часа через два Гримтурсен попросил Тора остановиться.
     - Мы приехали, - сказал он. - Здесь я всегда ужу рыбу.
     - Может быть, ты и приехал, но  я  еще  нет,  -  отвечал  бог  грома,
продолжая грести.
     - Опасно заплывать далеко в море, - ворчливо настаивал великан. - Так
мы можем доехать до того места, где лежит змея Митгард.
     - А далеко до него? - спросил Тор.
     - Еще один час пути, если ты будешь грести  так  проворно,  -  сказал
Гимир.
     Тор молча кивнул головой и еще сильнее заработал веслами.
     - Разве ты не слышал, что я сказал? - промолвил великан.
     - Слышал, - усмехнулся бог грома.
     - Так почему же ты не останавливаешься? - рассердился Гимир.
     - Потому что хочу ехать дальше, - возразил Тор.
     Гримтурсен уже приподнялся, собираясь броситься на бога грома и силой
отнять у него весла, но тут его взгляд снова упал на Мйольнир, и  он  счел
за лучшее остаться сидеть своем месте. Некоторое время  он  молчал,  хмуро
поглядывая на Тора, который все греб и греб, а потом стал просить:
     - Вернись обратно, прошу тебя, скорей вернись: мы едем  как  раз  над
чудовищем.
     - Вот это мне и нужно! - воскликнул довольный бог грома, бросая весла
и поспешно надевая волшебный пояс, отчего его сила сразу  возросла  в  два
раза.
     Затем он насадил на свой крюк голову быка и, привязав его  к  канату,
бросил в море.
     Великан со страхом следил за каждым его движением.
     - Что ты делаешь? Что ты делаешь? - повторял он.
     Крюк с приманкой опускался все ниже и ниже. Вдруг кто-то  дернул  его
так резко, что сжимавшие канат руки Тора ударились о борт лодки.
     - Попалась! - торжествующе закричал он.
     Бог грома не ошибся: змея Митгард проглотила  приманку,  но  вытащить
эту исполинскую гадину  было  не  так-то  легко.  Лишь  с  большим  трудом
могучему Асу удалось сначала стать на колени, а затем выпрямиться во  весь
рост. Началась ожесточенная борьба. Не обращая внимания на то,  что  лодка
великана почти до краев погрузилась в воду, Тор изо всех сил тянул канат и
постепенно вытягивал чудовище,  которое  отчаянно  сопротивлялось.  Прошло
немало времени, пока наконец над  водой  показалась  огромная  безобразная
голова змеи. Оцепенев от ужаса, Гимир смотрел то на  выпученные  холодные,
полные беспощадной ненависти глаза дочери Локи, то на черные,  но  горящие
ярким пламенем глаза Тора и никак не мог решить, какие из них страшнее.
     Вдруг раздался громкий треск. Дно лодки, не выдержав, проломилось,  и
бог грома оказался в воде. На его счастье, в этом месте было неглубоко,  и
он, погрузившись по горло, стал ногами на отмель, так и не выпустив из рук
свою необыкновенную леску, на которой метался его враг.
     - Вот мы и встретились с снова  тобой,  Митгард!  -  воскликнул  Тор,
подымая Мйольнир.
     Все это время Гимир  неподвижно  сидел  на  корме  лодки,  уцепившись
руками за ее борта, но когда вода залила его ноги и  великан  увидел,  что
они тонут, он пришел в себя и, схватив нож, быстро провел им по канату, на
котором висела змея. Тот лопнул, и чудовище сейчас же погрузилось в море.
     - Нет, погоди, ты от меня не уйдешь! - закричал бог грома и метнул ей
вслед молот.
     Мйольнир с громким плеском исчез в волнах. Через мгновение  он  снова
вылетел оттуда и прыгнул прямо в руки своего хозяина, а море далеко вокруг
окрасилось в красный цвет. Это была кровь змеи Митгард.
     Бог грома повернулся к Гимиру.
     - Из-за тебя я едва не упустил моего смертельного  врага  и  даже  не
знаю, убил я его или  нет,  -  проговорил  он,  трясясь  от  гнева.  -  Ты
заслуживаешь смерти, но я не могу забыть, что был твоим гостем. А чтобы ты
не забыл меня, вот тебе от меня на память.
     С этими словами он дал великану такую пощечину,  что  тот,  перелетев
через борт лодки, гулко шлепнулся в воду.
     Даже не посмотрев в его сторону, Тор,  выбирая  мелкие  места,  вброд
зашагал к берегу и  через  несколько  часов  вернулся  обратно  в  Асгард.
Немного позже пришел к себе домой и  промокший  до  костей,  полузамерзший
Гимир. Он от всей души проклинал бога  грома  и  дал  себе  твердый  зарок
никогда больше не иметь дела с Асами.
     Убил или не убил бог грома змею Митгард, никто  не  знает,  но  норны
уверяют, что она все еще жива и только тяжело ранена.
     - Придет день, - говорят вещие девы, - последний  и  для  нее  и  для
Тора, когда они снова встретятся.
     Но когда придет этот день, не знают даже норны.



                            СВАТОВСТВО АЛЬВИСА

     Гном Альвис был очень умен, намного  умнее  своих  соплеменников.  Он
знал почти  столько  же,  сколько  когда-то  знал  Квазир,  и  очень  этим
гордился.
     - Вы не достойны того, чтобы я жил с вами, - заявил он однажды другим
обитателям подземного царства. Мое место в Асгарде,  среди  богов.  Только
они смогут понять мою мудрость  и  заставят  всех  воздавать  мне  должные
почести.
     Выслушав его, гномы удивленно покачали головами.
     - Конечно, ты очень мудр,  Альвис,  -  сказал  один  из  них,  но  ты
забываешь о солнце, которое превратит тебя в камень, едва  ты  выйдешь  из
Свартальфахейма.
     - Сразу видно, что ты глупец, - засмеялся  Альвис.  -  До  Асгарда  я
доберусь ночью, когда солнце не светит, а  в  стране  богов  есть  дворцы,
крыши которых защитят меня от его лучей.
     - Но, Альвис, - промолвил второй гном,  -  как  ты  можешь  заставить
богов разрешить тебе жить вместе с ними?
     - Я могу жениться на какой-нибудь богине, и тогда  Асы  волей-неволей
должны будут допустить меня в Асгард, - гордо произнес мудрец.
     - Что  ты,  что  ты,  Альвис!  -  воскликнул  третий  гном,  стараясь
удержаться  от  смеха,  чтобы  не  обидеть  собрата.  -  Ступай  скорее  к
подземному озеру и взгляни на свое отражение. Ведь, несмотря на  все  твои
знания, ты такой же маленький и горбатый как и мы все.  У  тебя  такая  же
длинная черная борода, как и у  нас,  и  такие  же  глазки-бусинки.  Разве
можешь ты стать мужем богини?
     - Боги не так глупы, как вы! - рассердился Альвис. - Они  знают,  что
ум важнее красоты, и ни один из них не откажется выдать за меня замуж свою
дочь.
     Гномы не стали больше спорить  и  замолчали,  и  только  один,  самый
старый из них, сказал:
     - Я не так умен, как ты, Альвис, и хуже тебя разбираюсь в науках,  но
за всю мою долгую жизнь еще ни разу не слышал, чтобы гномы  породнились  с
богами и заставили их что-либо делать  по-своему.  Лучше  оставайся  среди
нас. Помни, что Асы не простят тебе твоей дерзости.
     Но гордец только рассмеялся и презрительно махнул рукой.
     - Сегодня же ночью я пойду в Асгард, - произнес  он,  -  и,  когда  я
вернусь, вы узнаете, чего я там добился.
     И действительно, едва Суль на своей колеснице скрылась за горами, как
Альвис отправился в путь. По дороге он обдумывал, к дочери какого бога ему
лучше посвататься, и наконец выбрал дочь бога грома.  Лет  семнадцать  или
восемнадцать назад, еще  до  того  как  строилась  крепость  Асов,  у  Сиф
родилась дочка, которой дали имя Труд. Она была хороша  собой,  скромна  и
тиха, и гном решил, что лучшей жены ему не найти.
     "К тому же, - рассуждал он, - Тор, хотя и могуч, но не очень  умен  и
ему захочется иметь такого мудрого зятя, как я. Только бы мне добраться до
страны богов!"
     Вскоре он подошел к Бифресту и стал звать Хеймдалля. Чуткий Ас сейчас
же услышал его тонкий, писклявый голос и спросил, что ему надо.
     - Я хочу попасть в Асгард, - отвечал Альвис, - но не  знаю,  как  мне
пройти сквозь пламя, которое горит на вашем мосту.
     - А что тебе нужно в стране богов? - спросил Хеймдалль.
     - Посвататься к дочери Тора - Труд, - сказал гном.
     Ас рассмеялся.
     - И ты думаешь, что он согласится выдать ее за тебя? - промолвил он.
     - Да, Хеймдалль, - с гордым видом отвечал Альвис, - потому что  после
смерти Квазира мудрее меня нет никого на свете!
     - Вот как? - снова рассмеялся Хеймдалль, который, как вы помните, сам
был очень мудр. - Ну что ж, я помогу тебе пройти в Асгард. Вреда ты там не
причинишь, а мне интересно будет узнать, как ты сумеешь добиться успеха.
     Он спустился вниз по Бифресту, взял Альвис на руки  и  принес  его  в
Асгард.
     Горячо поблагодарив сторожа радужного моста, гном  спросил  его,  где
находится дворец Тора, и направился прямо к нему.
     Бог грома был в это время у Гимира и собирался  плыть  на  на  поиски
змеи Митгард, о чем вы уже знаете. Труд  давно  крепко  спала,  и  Альвиса
встретила одна Сиф. Отворив ему дверь и увидев перед собой  гнома,  богиня
плодородия от удивления от удивления выронила из рук гребень, которым  она
расчесывала на ночь свои золотые волосы, и,  вместо  того,  чтобы  сказать
гостю "добро пожаловать", воскликнула:
     - Как ты попал в Асгард, черный эльф, и что тебе от меня нужно?
     - Ты бы лучше спросила меня о моем имени, -  упрекнул  ее  карлик,  -
тогда бы ты узнала, что меня зовут Альвис и что я мудрее всех на свете.
     - Извини, Альвис, - ответила Сиф. - Правда, я никогда прежде  о  тебе
не слыхала, но будь нашим гостем и расскажи, зачем ты к нам пришел.
     - Я пришел посвататься к твоей дочери, Сиф, - с важным  видом  сказал
гном, смело входя во дворец.
     - Посвататься к моей дочери? Ты хочешь жениться на Труд? -  вскричала
богиня, не веря своим ушам.
     - Да, Сиф, - подтвердил Альвис, с трудом вскарабкиваясь на скамью, на
которую она ему указала. - Я хочу жениться на Труд и не понимаю, почему ты
этому удивляешься. Ум дороже всего, я же почти так же  мудр,  как  Один  и
вполне достоин руки любой богини. Ты должна быть счастлива, что мой  выбор
пол именно на твою дочь.
     - Но Альвис, - возразила Сиф, -  дочери  Асов  не  выходят  замуж  за
гномов: они не могут жить под землей, в ваших пещерах.
     - Зато я могу жить в Асгарде, - произнес Альвис. Конечно, днем я буду
сидеть дома и выходить из него только по ночам, но это  не  так  важно.  Я
очень богат, у меня много золота, а с помощью моих знаний  я  смогу  скоро
стать еще богаче, так что моей жене все будут завидовать.
     Еще долго продолжался их спор, но  наконец  хитрецу  удалось  убедить
жену Тора. Она тут же позвала Труд и,  даже  не  испросив  согласия  Тора,
объявила ей, что выдает ее замуж за гнома.
     Едва взглянув на своего крохотного жениха, девушка залилась  слезами,
таким противным он ей  показался.  Зато  сам  Альвис  сиял  от  радости  и
гордости. Он пробыл у Сиф целый день,  а  к  вечеру  отправился  восвояси,
пообещав прийти следующей ночью снова и попросив Труд не  ложиться  спать,
чтобы он мог с ней повидаться. По дороге в Свартальфахейм он не удержался,
чтобы не рассказать обо всем Хеймдаллю, которому пришлось опять  перенести
его на руках через радужный мост, и похвастаться перед ним своим успехом.
     - Я желаю тебе счастья, - сказал тот, - но не рано ли  ты  радуешься?
Ведь Тор еще ничего не знает о твоем сватовстве к его дочери?
     - Он не захочет нарушать слово, которое мне дала Сиф, и я  уже  смело
могу считать себя его зятем, - отвечал гном и, распрощавшись с Хеймдаллем,
весело запрыгал дальше к ближайшей пещере.
     Утром в страну богов примчался Тор, возвратившийся со своего поединка
со змеей Митгард.
     - Что нового в Асгарде? - спросил он у  Хеймдалля,  который,  услышав
стук колесницы  грозного  бога,  вышел  ему  навстречу.  Не  подходили  ли
великаны к его стенам?
     - Великаны не появлялись, Тор, - сказал  Хеймдалль,  но  зато  к  нам
приходил один гном, по имени Альвис, и посватался к твоей дочери Труд.
     - Ты смеешься надо мной! - покраснел от гнева бог грома. - Как  может
моя дочь стать женой какого-то  черного  эльфа?  Сиф  никогда  на  это  не
согласится!
     - Нет, Тор, Альвису удалось ее уговорить, - ответил мудрый Ас. -  Она
дала ему слово, и сегодня вечером он снова  придет,  чтобы  повидать  свою
невесту.
     - Сегодня вечером он снова придет, чтобы  повидать  свою  невесту?  -
переспросил Тор и задумался. - И ты говоришь, что он очень мудр?
     - Он считает  себя  самым  умным  существом  на  свете,  -  промолвил
Хеймдалль.
     Бог грома усмехнулся.
     - Хорошо, я сам встречу его сегодня  у  Бифреста,  -  произнес  он  и
спокойно пошел к себе во дворец.
     Сиф сейчас же рассказала ему, что просватала дочь за  гнома,  который
так же мудр, как и Один или великан Мимир.
     - Лучшего зятя нам не найти, хотя Труд он и не нравится, -  закончила
она свою речь.
     - Я не буду спорить, - промолвил Тор. - Ты уже дала Альвису слово,  и
его нельзя нарушить.
     И не сказав жене о том, что собирается встретить  гнома,  могучий  Ас
поспешно ушел.
     Оповестить весь Свартальфахейм о своей женитьбе на дочери бога грома,
Альвис, едва дождавшись вечера, поспешил к своей невесте, и не успели  еще
в небе зажечься первые звезды, как он уже был у Бифреста.
     - Хеймдалль, Хеймдалль, помоги мне подняться по мосту! - закричал он.
     Мудрый Ас, которого забавляла дерзость гнома, и на этот раз  исполнил
его просьбу, но, когда Альвис достиг страны богов, здесь его уже  поджидал
сам Тор.
     - Здравствуй, Альвис, - промолвил он ласково. - Скажи  мне,  куда  ты
идешь?
     - Я иду к твоей дочери, Тор, - отвечал гном, сразу узнав  сильнейшего
из Асов по его огромному росту и могучему сложению. - Сиф  обещала  выдать
ее за меня замуж.
     - Что ж, я согласен с женой, - сказал бог  грома.  -  Позволь  только
сначала проверить, так ли ты мудр, как говоришь.
     Гном даже раздулся от гордости.
     - Спрашивай меня о чем хочешь! - воскликнул он. - Я дам ответ на  все
твои вопросы.
     - Хорошо, тогда  расскажи  мне  все,  что  ты  знаешь  об  Асгарде  и
Митгарде, о Ванахейме и Йотунхейме, о царстве огня и  о  подземной  стране
мертвых, а так  же  о  всех  племенах  и  народах,  живущих  на  земле,  -
потребовал Тор.
     Больше двух часов отвечал Альвис на  первый  вопрос  бога  грома,  но
ответил на него без запинки.
     - Много ты знаешь, - похвалил его Тор. - Ну, а  теперь,  -  продолжал
он, - расскажи мне о всех зверях и птицах, живущих  на  земле,  и  о  всех
рыбах, плавающих в морях и реках.
     Альвис ответил и на второй вопрос могучего Аса, но  отвечал  на  него
так долго, что, когда он кончил, небо из темного стало светло-серым.
     - Ты действительно великий  мудрец,  -  произнес  бог  грома,  искоса
поглядывая на восток. - Тебе осталось только сосчитать все звезды на  небе
и сказать, как каждая из них называется, и мы завтра же  отпразднуем  твою
свадьбу с моей дочерью.
     От таких слов у Альвиса закружилась  голова.  Забыв  о  надвигающейся
опасности, он стал называть звезды, но не успел перечислить и четвертую их
часть, как вдали послышалось громкое ржание коней, запряженных в колесницу
Суль. Первый яркий луч солнца скользнул по небу и упал на гнома, мгновенно
превратив его в камень.
     Так Тор, не нарушив данного Сиф слова, сумел избавить  свою  дочь  от
неугодного ей жениха и доказал, что хитрость подчас бывает выше мудрости.



                              СМЕРТЬ БАЛЬДРА

     Прошли века.  По-прежнему  правил  миром  великий  Один;  по-прежнему
защищал Асгард  и  Митгард  от  нападений  великанов  могучий  бог  грома;
по-прежнему волшебная корзина Идун была полна чудесных яблок, дающих  Асам
молодость и силу. Никогда еще не были боги так веселы и счастливы.
     Но вот доброго и кроткого Бальдра стали преследовать дурные сны.  Все
чаще и чаще видел он по ночам, что расстается со светлой страной  богов  и
спускается в мрачное подземное царство Хель, все чаще и  чаще  мучило  его
сердце  тяжелое  предчувствие  близкой  смерти,  и  он  из  веселого  стал
печальным, из беззаботного - задумчивым.
     Тогда встревоженный Один отправился в Йотунхейм, чтобы посоветоваться
с Мимиром, и страшен был ответ мудрого великана.
     - Да, Бальдр  скоро  умрет,  -  сказал  он.  -  Ничто  не  может  это
предотвратить. Ничто не может  предотвратить  и  гибели  остальных  богов,
когда придет их час. У каждого своя судьба, Один, и изменить ее не в силах
даже ты.
     От Мимира старейший из Асов пошел к норнам, но  и  те  встретили  его
сурово и угрюмо.
     - Ты скорбишь об участи сына, - сказала Урд, - а не ведаешь того, что
не так уж далек тот день, когда и сам ты ее разделишь. Уже половина  ясеня
игдразиля сгнила, уже дрожит  мировое  дерево,  жизнь  которого  окончится
вместе с твоей. Слышишь ли ты скрежет зубов? Это чудовищный дракон Нидгег,
живущий в царстве Хель, подгрызает снизу его корни. Еще  много  лет  будет
продолжаться его работа, но когда-нибудь она закончится.
     - Мы ежедневно поливаем Игдразиль водой из священного источника  Урд,
чтобы залечить его раны. Этим мы продлеваем жизнь могучего  ясеня,  но  не
можем его спасти, так же как ты не можешь спасти жизнь Бальдра, - добавила
Верданди.
     - Подожди, Один, - произнесла Скульд, видя, что голова  владыки  мира
склонилась на грудь. - Выслушай меня! Не вечно Бальдр  будет  у  Хель:  он
слишком чист и невинен, чтобы навсегда остаться в стране  мрака.  Утешайся
этим. Больше я тебе ничего не скажу.
     С тех пор словно черная туча повисла над  Асгардом.  Узнав  о  словах
Мимира и  пророчестве  Норн,  Асы  прекратили  свои  пиры  и  забавы.  Они
оплакивали судьбу всеми любимого лучезарного  бога,  и  только  Фригг  еще
надеялась спасти сына.
     - Нет, он не умрет,  -  сказала  она  и,  обойдя  Асгард  и  Митгард,
Нифльхейм и Йотунхейм, страну гномов  и  страну  эльфов,  взяла  клятву  с
каждого металла, с каждого камня, с каждого растения, с каждого  зверя,  с
каждой птицы и с каждой рыбы в том, что никто из  них  не  причинит  вреда
Бальдру.
     - Утешьтесь и  забудьте  свою  печаль,  -  объявила  она  всем  Асам,
возвращаясь из своего странствия. - Не может погибнуть тот, кого ничто  не
может убить.
     Обрадованные боги громко славили Фригг; а Бальдр забыл о своих снах и
попросил богов испытать его неуязвимость.
     Те охотно согласились выполнить его просьбу и, выйдя вместе  с  богом
весны в поле, стали бросать в него камни, стрелять  из  лука,  колоть  его
копьями и рубить мечами.
     Бальдр в ответ лишь смеялся: и  дерево,  и  камни,  и  железо  твердо
держали данную ими клятву и даже не царапали его кожу.
     - Тебе больше нечего бояться, брат, - сказал ему Хеймдалль. - С этого
дня ты можешь сражаться с любым врагом.
     - Я не хочу ни с кем воевать, - рассмеялся Бальдр, - но  я  рад,  что
останусь с вами в Асгарде, где так светло и радостно, и не уйду под  землю
к мертвым.
     Выйдя и слыша все это, Локи сердито хмурился. Он уже давно  завидовал
доброму богу весны, а теперь, когда  тот  стал  неуязвим,  его  злоба  еще
больше усилилась.
     "Вы рано радуетесь; Мимир и норны не могли ошибиться", -  подумал  он
и, превратившись в бедную старуху странницу, пошел к Фригг.
     - Знаешь ли ты, о великая богиня, что сейчас делают твои  сыновья?  -
воскликнул он, входя к ней. - Они за что-то разгневались на прекраснейшего
из них, Бальдра, и пытаются  убить  его  камнями  и  стрелами,  копьями  и
мечами.
     - Не бойся, бабушка, - засмеялся Фригг, забыв спросить странницу, как
она попала в Асгард. - Бальдр неуязвим. Ни один металл, ни одно дерево, ни
один камень не могут его  поранить.  Иначе  они  нарушили  бы  данное  мне
обещание.
     - Ох, так ли это? - прошамкала мнимая старуха. - Со всех ли  деревьев
и кустарников в мире взяла ты клятву не трогать бога весны?
     Мудрейшая из богинь задумалась.
     - Видела я на севере Митгарда, в лесах  Норвегии,  маленькую  зеленую
веточку растения, которое люди называют омелой,  -  ответила  она.  -  Эта
веточка была еще так юна, что ничего не понимала,  и  я  не  стала  с  ней
разговаривать. Позже, когда она вырастет, я попрошу также и ее  не  губить
моего сына.
     Бог огня еле удержался, чтобы  не  вскрикнуть  от  радости.  Поспешно
покинув дворец Одина, он скинул с  себя  женское  платье,  надел  на  ноги
крылатые сандалии и, не  теряя  времени,  помчался  в  Норвегию.  К  этому
времени веточка омелы уже подросла и стала длиннее руки. Локи сорвал ее и,
сделав из нее стрелу, вернулся в Асгард.
     Боги все еще были в  поле,  где  продолжали  испытывать  неуязвимость
Бальдра, и лишь один слепой Ход уныло стоял в стороне  от  своих  братьев,
прислушиваясь к тому, что они делают.
     - Что же ты не стреляешь в бога весны? - обратился к нему Локи.
     - Зачем ты смеешься надо мной? Ведь ты же знаешь,  что  я  ничего  не
вижу! - ответил Ход.
     - Это не мешает тебе быть таким же хорошим воином,  как  и  остальные
Асы! - возразил бог огня. - Не уступай им ни в чем и выстрели  тоже.  Вот,
возьми, - добавил он, подавая слепцу лук и стрелу, которую сделал из ветки
омелы, - а я поверну тебя лицом к Бальдру.
     Ход, не подозревая коварства Локи, послушно натянул лук  и  выстрелил
прямо перед собой. В тот же миг Бальдр вскрикнул и мертвым упал на  землю.
Стрела Хода пронзила ему сердце.
     Асы в горе рвали на себе  волосы,  а  Локи  затрясся  от  страха:  он
боялся, что Ход его выдаст. Однако тот не  успел  этого  сделать.  Вали  в
бешенстве набросился на своего слепого брата и убил его, так и не спросив,
кто вложил ему в  руки  смертоносное  оружие,  поразившее  светлого  бога.
Коварный Ас и на этот раз избежал наказания.
     На похороны Бальдра пришли не  только  все  Асы  и  Ваны,  не  только
валькирии и эльфы, но и много жителей Йотунхейма  -  великанов.  Даже  им,
потомкам жестокого Имира и злейшим врагам Асгарда и  Митгарда,  было  жаль
того, кто за всю свою жизнь  никому  не  причинил  зла.  Но  больше  всего
горевали о нем Один и Фригг.
     На огромном корабле, Гринггорни, был сложен погребальный  костер.  На
костер положили тела бога весны  и  его  молодой  жены  Наны,  которая  не
перенесла горя и умерла в тот же день.  Потом  на  него  ввели  и  жеребца
Бальдра, под седлом, в богатой, украшенной золотом сбруе, а Один надел  на
палец мертвому сыну кольцо Драупнир и шепнул на ухо несколько  слов.  Этих
слов никто не слышал, но, наверное, это были слова утешения: недаром норна
Скульд обещала владыке мира, что Бальдр не вечно будет в царстве  мертвых.
Оставалось только разжечь костер и спустить корабль на воду, но он был так
тяжел, что никто из богов, даже сам Тор, не мог сдвинуть его с места.
     Увидев это, один из стоявших тут же великанов сказал:
     - У нас,  в  лесах  Йотунхейма,  живет  великанша  Гироккин,  которая
обладает силой ста самых могучих мужей нашей страны. Пошлите за ней, и она
вам поможет.
     Боги послушались его совета, и Гироккин сейчас же явилась на их  зов,
прискакав в Асгард верхом на исполинском сером  волке,  в  пасти  которого
вместо уздечки была ядовитая змея.
     Заметив ее, Тор невольно поднял свой молот,  но  Один  остановил  его
руку.
     - Смерть все примиряет, - произнес он.  -  Зачем  убивать  того,  кто
хочет тебе помочь?
     - Среди жителей Йотунхейма нет ни одного, к кому бы  я  обратился  за
помощью, - проворчал бог грома,  но  не  стал  больше  спорить  и  заткнул
Мйольнир за пояс.
     Схватившись руками за нос Гринггорни, великанша легко стащила  его  в
море. Асы подожгли костер, и пылающий корабль, подхваченный свежим ветром,
быстро поплыл по волнам.
     - А теперь выслушайте меня, Асы, - промолвила Фригг, утирая слезы.  -
Кто из вас решится съездить к Хель и предложить ей выкуп за  Бальдра,  тот
может потребовать от меня все, что хочет. Может быть, дочь Локи согласится
отпустить моего сына в обмен на золото или другие драгоценности.
     - Я поеду, - сказал младший сын Одина, Гермод, юноша,  которому  едва
исполнилось восемнадцать лет. - Пусть только кто-нибудь из вас даст мне на
время своего коня.
     - Возьми моего  Слейпнира,  -  ответил  Один.  -  На  нем  ты  скорее
доберешься до Хель и привезешь нам вести от Бальдра. Тебе надо торопиться:
тени двигаются быстрее, чем любое живое существо.
     Девять дней и столько  же  ночей  не  отдыхая  скакал  Гермод  сквозь
подземные ходы и пещеры Свартальфахейма, пока не добрался наконец до  реки
Гйоль, отделяющей страну живых от страны мертвых. Через эту реку перекинут
тонкий золотой мост, который  охраняет  верная  служанка  Хель,  великанша
Модгуд.
     - Кто ты такой, юноша? - спросила оно у Гермода, когда он переехал на
другой берег Гйоля. - Только вчера  по  золотому  мосту  проехало  пятьсот
воинов, но он дрожал и качался меньше, чем под тобой одним. И ни у кого  в
стране мертвых не видала я таких румяных щек.
     - Да, Модгуд, - отвечал Гермод, - я не тень, а посланник богов и  еду
к Хель, чтобы предложить ей выкуп за моего брата Бальдра.
     - Бальдр вот уже два дня, как проехал  мимо  меня,  смелый  юноша,  -
сказала великанша, - и, если ты хочешь его увидеть, поезжай на север. Там,
под Нифльхеймом, стоит дворец нашей повелительницы, но берегись: назад она
тебя вряд ли отпустит.
     Гермод, не отвечая, поскакал туда, куда  ему  показала  Модгуд,  и  к
концу десятого дня увидел большой замок, окруженный со всех сторон высокой
железной решеткой, верхние зубья которой терялись во мраке.
     Юноша  спешился,  подтянул  получше  подпругу  на  своем  восьминогом
жеребце, затем снова уселся в седло и изо всех сил  натянул  поводья.  Как
птица взвился  в  воздух  Слейпнир  и,  легко  перескочив  через  решетку,
опустился у входа в замок старшей дочери Локи.
     Много столетий прошло с тех пор, как боги отправили Хель  царствовать
над тенями умерших, и за это время она стала такой огромной и могучей, что
у Гермода, который увидел ее  впервые,  сердце  сжалось  от  страха.  Даже
исполинша Гироккин и та была намного меньше и слабее  подземной  королевы.
По правую руку от нее, на почетном месте, сидел Бальдр, рядом с ним - Нана
и Ход, а по левую - Грунгнир,  Гейрод  и  другие  сраженные  Тором  князья
великанов.
     - Как зовут тебя, дерзкий, осмелившийся прийти  ко  мне  раньше,  чем
огонь или земля поглотили твое тело? - грозно спросила Хель, не вставая со
своего трона. - Или ты не знаешь, что отсюда нет возврата?
     - Я Гермод, младший сын Одина и брат Бальдра, Хель, - отвечал  юноша,
подавляя в себе страх. - Асы послали меня  к  тебе  с  просьбой  отпустить
назад бога весны. Они дадут за него любой выкуп.
     Хель рассмеялась, но от ее смеха Гермоду стало еще страшней.
     - Золота у меня больше, чем у вас в Асгарде, - сказала она, - а какой
другой выкуп могут предложить мне Асы? Нет, юноша, мне ничего не нужно. Но
я не так зла, как думают обо мне боги. Пусть они обойдут весь мир, и, если
они увидят, что в нем, и живое и  мертвое,  плачет  по  Бальдру,  если  он
действительно всеми любим, тогда приезжай снова ко мне с этой вестью, и  я
отдам тебе брата. А до тех пор он будет у меня. Ступай домой - ты  первый,
кого я отпускаю из своего царства.
     - Постой, Гермод,  -  остановил  его  Бальдр,  видя,  что  юноша  уже
собирается уйти. - Возьми кольцо Драупнир, которое мне дал с  собой  Один,
верни его отцу. Это докажет ему, что ты меня видел.
     - А от меня передай Фригг вот этот платок, - сказала Нана, снимая его
со своей головы и вручая Гермоду.  -  Прощай.  Может  быть,  мы  не  скоро
увидимся.
     - И скажи Асам, что это не я виноват в смерти Бальдра, - тихо добавил
Ход. - Скоро его убийца сам им об этом скажет.
     Узнав от Гермода об условии Хель, боги сейчас же разошлись  в  разные
стороны, чтобы обойти весь мир,  и  чем  дальше  они  шли,  тем  радостнее
становилось у них на сердце, потому что все  живое  и  мертвое,  все,  что
только встречалось им на пути, плакало по Бальдру. Плакали гномы и  эльфы,
плакали люди и великаны, звери в лесах и птицы в небе. Даже рыбы в воде  и
те плакали. Плакали цветы, роняя на  землю  свою  душистую  росу,  плакали
деревья, с веток которых дождем  падали  капли  сока  или  смолы,  плакали
металлы и камни, покрываясь туманной дымкой влаги, плакала и  сама  земля,
холодная и мокрая, не согретая теплым дыханием бога весны.
     Один лишь Локи не плакал,  а  думал,  как  бы  ему  провести  Асов  и
навсегда оставить  Бальдра  у  Хель.  И  вот,  когда  довольные  боги  уже
возвращались обратно в Асгард, они  нашли  в  одной  из  пещер  Йотунхейма
великаншу, которая, увидев их, весело улыбнулась.
     - Как, ты не плачешь по Бальдру? - в ужасе спросили Асы.
     - А чего мне по нем плакать? - засмеялась  великанша.  -  Меня  зовут
Токк - Благодарность, а вы знаете, что за добро всегда платят злом.  Пусть
Бальдр останется у Хель. Мне он не нужен.
     Долго потом разыскивал бог грома Токк, чтобы ее убить, но  так  и  не
нашел, а догадаться, что этой великаншей был Локи, он не мог.
     Вот почему Бальдр до сих пор живет у Хель.



                 ТОР ДОБЫВАЕТ КОТЕЛ ДЛЯ ПИРШЕСТВА БОГОВ

     Как Один повелевает миром, Нйодр - ветрами, а Тор - грозовыми тучами,
так могучий бог Эгир и его жена, Ран, властвуют над морскими просторами  и
глубинами. Они не принадлежат к роду Асов и не живут в  Асгарде,  но  тоже
ведут непрерывную борьбу с великанами Гримтурсенами, стремящимися  сковать
вечным льдом мировое море, и в этой борьбе им часто помогает бог грома.
     Есть у Эгира на одном  из  островов  к  югу  от  Митгарда  прекрасный
дворец, а под ним - обширный грот, в котором лежат тела  утонувших  людей.
Их собирает там богиня Ран, ежедневно забрасывающая в море  свою  огромную
сеть.
     Эгир любил бога весны, приход которого  заставлял  ледяных  великанов
отступать на север, и когда минул год со дня  его  смерти,  он  устроил  в
память о нем роскошный пир, пригласив на него не только всех Асов вместе с
их женами, но и светлых эльфов.
     Гостей собралось так много, что пива у морского бога не хватило, хотя
еды еще оставалось с избытком. Видя это, Тир шепнул на ухо Тору:
     - Мы должны помочь Эгиру и достать ему котел побольше. Я знаю, что  у
моего дяди, великана Гимира, с которым ты ездил ловить змею Митгард,  есть
такой. Он глубиной с целую милю, но упросить Гимира отдать нам  его  будет
нелегко.
     - Хорошо, едем! - отвечал бог грома. -  И  ты  увидишь,  что  к  утру
следующего дня, котел будет здесь.
     Не сказав никому ни слова, оба бога тихо вышли из дворца Эгира и, сев
в колесницу Тор, уже через час были на севере, около  пещеры  Гимира.  Сам
великан в это время, как обычно, ловил рыбу, и Асов  встретила  его  мать,
которая, если вы помните, приходилась бабушкой Тиру.
     - Напрасно ты снова пожаловал к нам, Тор, - сказала она, увидев  бога
грома. - Мой сын до сих пор не может забыть, как ты  вместе  с  ним  ловил
змею Митгард, и поклялся отомстить за полученную от тебя оплеуху.
     - Он получит и вторую, если не будет разговаривать с нами как должно!
- сердито отвечал Тор. - Не будь он сродни богам, я бы иначе расплатился с
ним за то, что он помог Митгард уйти от моего молота.
     - Полно, Тор, успокойся, - возразил Тир, - мы здесь в гостях, так что
не будем же ссориться с хозяином. Мы, бабушка, приехали попросить у Гимира
его котел, - обратился он к великанше,  чтобы  наварить  в  нем  пива  для
пиршества у Эгира.
     - Вряд ли он отдаст его вам, - покачав головой промолвила та. - Вы же
знаете, что Гимир и Эгир - смертельные враги. Но ничего, я постараюсь  его
уговорить, а вы, когда он войдет, не показывайтесь сразу ему на глаза.
     К вечеру снаружи раздались тяжелые шаги,  и  в  пещеру  вошел  Гимир.
Большие ледяные сосульки висели у него на усах и бороде,  и  от  этого  он
казался еще страшнее. Не заметив Тора и Тира, которые спрятались за  одной
из каменных колонн, подпиравших потолок пещеры, великан сел  на  скамью  и
сказал матери, чтобы она готовила ему ужин.
     - У нас сегодня большая радость, Гимир, - отвечала она,  -  к  нам  в
гости пришел сын моей дочери, храбрый  Тир,  а  его  сопровождает  могучий
победитель Грунгнира. Вот они стоят за колонной.
     - Как, Тор опять здесь? - заревел Гримтурсен и так свирепо  посмотрел
в ту сторону, где стояли Асы, что скрывавшая их колонна, не  выдержав  его
взгляда, разлетелась на куски. - Уж не хочет ли он  снова  поехать  ловить
змею Митгард?
     - Нет, Гимир, - отвечал бог грома, смело подходя  к  великану.  -  Мы
приехали просить у тебя котел для пиршества у Эгира.
     В глазах Гримтурсена вспыхнуло пламя, мгновенно  растопившее  лед  на
его бровях,  его  чудовищные  кулаки  сжались,  но  потом  он  вспомнил  о
полученной им когда-то от Тора оплеухе и, мрачно усмехнувшись, ответил:
     - Ладно, я отдал вам котел,  если  вы  выполните  три  моих  условия:
съешьте за один присест больше, чем съем я, разбейте мой кубок из  горного
хрусталя и вынесете из пещеры котел на своих плечах.
     - Первое условие мне подходит больше всего, - сказал  Тор.  -  Я  уже
давно хочу есть. Что у тебя на ужин?
     Гимир хлопнул в ладоши, и его мать  сейчас  же  принесла  на  длинном
вертеле трех зажаренных целиком быков.
     - Ешь, Тор, - сказал великан, хватая одного из них и кладя его в свою
огромную пасть.
     Он был уверен, что  грозный  Ас  за  ним  не  угонится,  и  не  спеша
прожевывал жаркое; однако изрядно проголодавшийся бог грома  не  стал  его
дожидаться и, пока Гримтурсен ел одного  быка,  съел  остальных  двух,  не
оставив на долю Тира ни одного кусочка.
     - Теперь надо накормить твоего племянника, Гимир, -  произнес  он.  -
Нет ли у тебя еще мяса?
     - Ты и так уже съел все, что мать приготовила мне на ужин, -  ответил
Гримтурсен, с трудом сдерживая клокотавшую в нем злобу. -  Первое  условие
выполнено, Тор, теперь попробуй разбить мой кубок.
     "Это не трудно будет сделать", -  подумал  бог  грома,  беря  из  рук
Гимира тонкий хрустальный кубок, и изо всех сил  ударил  его  об  каменную
стену пещеры. Его удар был так силен, что от стены во все стороны полетели
куски  гранита,  но  сам  кубок  не  разбился,  а,  по-прежнему  целый   и
невредимый, упал к ногам Тора.
     Великан довольно улыбнулся.
     - Я разрешаю тебе бросить его еще два раза, - сказал он. - Но если он
и тогда останется цел, вы вернетесь к Эгиру без котла.
     Тор, не отвечая, выбрал скалу покрепче и с размаху снова метнул в нее
кубок.
     И снова скала рассыпалась, словно  она  была  из  глины,  а  чудесный
хрусталь не пострадал.
     - Этот кубок сделали Гимиру гномы, -  шепнула  бабушка  Тира  на  ухо
удивленному богу грома. - Брось его в голову моего сына: нет ничего в мире
крепче его лба.
     Тор сделал так, как она ему посоветовала, и, едва  коснувшись  головы
Гримтурсена, волшебное изделие гномов разлетелось вдребезги.
     - Не сам ты догадался бросить его в меня, - произнес Гимир,  вставая,
- но что сделано, то сделано. Тебе осталось выполнить  последнее  условие:
унести на плечах мой котел. Но сначала подожди меня. Я скоро вернусь.
     И Гримтурсен быстро вышел из пещеры.
     - Он пошел звать  на  помощь  наших  соседей,  ледяных  великанов,  -
сказала богам старуха великанша. - Берите скорей котел и  отправляйтесь  в
дорогу.
     Тир схватился было за край котла, но не смог сдвинуть его с места.
     - Нам не унести его, Тор, - промолвил он. - Он слишком тяжел.
     - Ступай вперед, - отвечал ему могучий Ас, - а  я  выполню  последнее
условие Гимира.
     С этими словами он, слегка поднатужившись,  взвалил  на  плечи  котел
великана и, выбежав с ним из пещеры, погрузил его на свою колесницу.
     - Едем скорей, - воскликнул он, не то будет поздно!
     Гимира нигде не было видно, но едва боги отъехали на сотню  шагов  от
его пещеры, как справа и  слева  из-за  утесов  показались  многочисленные
толпы ледяных великанов, вооруженных камнями и дубинами.
     Тангиост и Тангризнир  не  могли  бежать  быстро:  котел  Гимира  был
слишком тяжел даже для них, и Гримтурсены стали их нагонять.
     Тогда Тор, поднявшись во весь рост, метнул в ближайшего из  них  свой
молот, и великан, расколовшись на несколько частей, упал на снег.
     Второй раз сверкнул в воздухе Мйольнир - и второй исполин лег рядом с
первым.
     Еще никогда не приходилось богу грома сражаться одновременно с  таким
количеством врагов, еще никогда великаны  не  бились  так  храбро.  Камни,
которые они бросали, дождем падали вокруг колесницы, а некоторые из них  с
глухим звоном ударялись о котел, за которым стояли Асы.  Но  и  рука  Тора
была неутомима, и при каждом ее взмахе Гримтурсены  не  досчитывались  еще
одного бойца в своих рядах.
     Сколько их погибло в этой битве, никто не знает, но когда Тангиосту и
Тангризниру удалось наконец вытащить колесницу на облака и Асы поехали  на
юг через море, заснеженные поля Нифльхейма были сплошь  покрыты  огромными
ледяными глыбами. Эти разбитые на куски тела мертвых великанов лежат там и
поныне, и каждый из вас, кто рискнет забраться подальше  на  север,  может
увидеть их сам своими глазами.



                           КАК БЫЛ НАКАЗАН ЛОКИ

     Пир у Эгира затянулся до самой зимы.  Боясь,  что  в  его  отсутствие
великаны захватят Асгард и Митгард, Тор уже давно снова умчался на восток,
но все остальные Асы и эльфы остались во  дворце  повелителя  морей,  пили
пиво  из  привезенного  богом  грома  котла  и  слушали   Браги,   который
рассказывал Эгиру многочисленные истории о подвигах богов.
     Слуги морского бога, Фимафенг и Эльдир, были так ловки и  так  хорошо
угощали гостей, что, казалось, пиво само переливается из котла  в  стоящие
на столе чаши. Искусство обоих слуг вызывало восхищение  у  Асов,  которые
осыпали их похвалами. Это сейчас  же  возбудило  злобу  завистливого  бога
огня. Охмелев от выпитого пива, он не смог, как обычно, сдержать  себя  и,
придравшись к тому, что Фимафенг нечаянно задел его  локтем,  ударом  меча
убил его на месте.
     Возмущенные его поступком, Асы в негодовании вскочили со своих мест.
     - Ты заслуживаешь  наказания,  Локи!  -  воскликнул  Один.  -  Но  из
уважения к нашему хозяину мы не станем проливать здесь твою  кровь.  Уходи
от нас и не смей больше сюда возвращаться.
     Испугавшись гнева богов, Локи вышел  и  долго  бродил  вокруг  дворца
Эгира. Его злоба не унималась, а росла с каждым часом.  Когда  же  до  его
ушей долетел голос Браги и он услышал  веселый  смех  Асов,  бог  огня  не
выдержал и снова направился в пиршественный зал.
     - Напрасно ты идешь туда, Локи, - остановил его Эльдир, которого  бог
огня встретил по пути. - Боги и так уже сердиты на  тебя,  не  вызывай  же
понапрасну их гнев.
     - Я ничего не боюсь! - гордо ответил бог  огня.  -  Посмотри,  как  я
сейчас испорчу им веселье.
     - Ох, не миновать тебе беды! - воскликнул верный слуга Эгира.
     Но Локи, оттолкнув его, смело вошел в зал.
     При виде его бог поэтов и скальдов умолк, а остальные гости перестали
смеяться.
     - Почему же ты не рассказываешь дальше, Браги? -  спросил  его  Локи,
дерзко подходя к столу. - Или ты меня испугался? Я знаю, что  говорить  ты
умеешь, но ты трус и боишься битв и сражений.
     - Когда мы выйдем отсюда, я тебе покажу,  какой  я  трус,  -  отвечал
Браги, краснея от гнева.
     - Перестаньте ссориться в чужом доме! - сурово сказал Один. -  Молчи,
Браги. А ты, Локи, наверное, потерял рассудок,  если  пришел  сюда,  чтобы
затеять с нами ссору!
     - Я бы, пожалуй, послушался тебя, Один, если бы ты был  действительно
мудр и справедлив, - насмешливо возразил владыке мира бог огня. - Но ты не
лучше нас всех. Вспомни, сколько раз ты нарушал свои  клятвы  и  обещания;
вспомни, сколько раз, решая дела и споры между людьми, ты присуждал победу
не тем, кто ее достоин, а тем, кто тебе больше нравился. Ты первый  пролил
кровь Ванов, ты обманул Гуннлед, похитив у  нее  "Поэтический  мед".  Нет,
Один, больше я не буду тебя слушаться.
     - Молчи, дерзкий! - закричал Тир, поднимаясь со своего места.  -  Как
смеешь ты так разговаривать со старейшим и мудрейшим из нас! Молчи, или ты
дорого расплатишься за каждое свое слово!
     - Вспомни о руке, которую  тебе  отгрыз  мой  сын,  и  перестань  мне
грозить, - ответил Локи, - а не то потеряешь и вторую.
     - Успокойся, Локи, и уходи домой, - примирительно произнес  Нйодр.  -
Потом ты и сам пожалеешь обо всем, что здесь сказал.
     - Никуда я не уйду, - промолвил бог  огня,  садясь  за  стол.  -  Ты,
Нйодр, наш заложник и не имеешь права так со мной разговаривать.
     - Пускай мой муж заложник, но зато он не ходил  целый  год  в  образе
кобылы и не рожал жеребят, - вмешалась Скади. - Уходи, Локи. Боги  изгнали
тебя, и здесь тебе больше нечего делать!
     - Ты говоришь так, потому что из-за меня погиб твой  отец,  Скади,  -
рассмеялся Локи. - Но я не боюсь ни тебя, ни богов и останусь здесь.
     - Нет, тебе придется уйти! - воскликнул Хеймдалль. - Ты слышишь вдали
раскаты грома? Это возвращается Тор. Беги, пока не поздно.
     -  Если  бы  ты  сопровождал  нас  в  Йотунхейм  и  видел,  как   ваш
прославленный бог грома прятался в рукавице великана Скримира,  ты  бы  не
стал меня им пугать, - отвечал Локи.
     Но в этот момент в дверях зала показался  Тор  и,  услышав  последние
слова бога огня, затрясся от гнева.
     - Уходи, Локи! Ступай прочь отсюда, или мой  Мйольнир  заставит  тебя
замолчать навеки! - загремел он, подымая молот.
     - Хорошо, я уйду, - уже спокойнее сказал Локи. - Я знаю, что в  битве
никто не может устоять против тебя, а все-таки, - добавил  он,  доходя  до
дверей, - я не сказал вам то, что хотел. Знайте же, что из-за  меня  погиб
Бальдр и из-за меня он не вернулся от Хель, потому что  я  вложил  в  руки
Ходу стрелу из омелы и в образе великанши Токк  не  стал  о  нем  плакать.
Прощайте!
     С этими словами он бросился бежать и, прежде чем пораженные гневом  и
ужасом Асы собрались отправиться за ним в погоню, скрылся из их глаз.
     Добежав до первой же реки, Локи превратился в лосося и нырнул в воду.
Несколько дней плавал он здесь, боясь  высунуться  наружу,  а  потом  стал
думать, что ему делать дальше.
     "Конечно, Асы не найдут меня здесь, - говорил он себе, - но  не  могу
же я всю свою жизнь оставаться  рыбой.  А  что,  если  мне  перебраться  в
Йотунхейм, к великанам? Они помогут мне спрятаться в какой-нибудь  пещере,
а я за это научу их, как победить Тора и захватить Асгард".
     Решив, что ничего лучше этого он не придумает, Локи вылез на берег и,
вернув себе свое прежнее обличье, уже собрался отправиться в путь, но  бог
огня забыл про Одина. Сидя на своем троне в Асгарде, владыка мира сразу же
заметил  Локи  и  указал  на  него  Асам.  Пришлось  лукавому  богу  снова
превратиться в лосося, но на этот раз его бывшие друзья уже знали, где его
искать.
     Они взяли у богини Ран ее сеть и, перекрыв ею устье реки,  в  которой
плавал  Локи,  повели  ее  вверх  против  течения.   Так   Ас   дошли   до
преграждающего руку высокого водопада, но, когда они вытащили ее на  берег
в ней не оказалось ничего, кроме простой рыбы.
     - Локи лежит на дне между камнями, и сеть прошла у него над  головой,
- сразу догадался Хеймдалль. - Мы должны привязать  к  нижнему  краю  сети
какой-нибудь тяжелый груз, и тогда он от нас не уйдет.
     Боги послушались его совета и вновь, опустив сеть  в  воду,  потащили
ее, на этот раз вниз по течению.
     Видя, что на этот раз ему не отлежаться на дне, Локи поплыл  к  морю,
но вовремя вспомнил о прожорливых хищных  рыбах,  которые  там  водятся  и
которым ничего не стоило его проглотить.
     "Нет, лучше мне остаться в реке", - подумал он и, подождав, пока боги
подошли к нему близко, перескочил через верхний край сети.
     - Можете ловить меня сколько хотите, я все равно не дамся вам в руки!
- засмеялся он, быстро опускаясь на дно.
     - Постойте, - сказал отчаявшимся было Асам Тор. - Вы тащите сеть, а я
пойду  вброд  посередине  руки.  Посмотрим,  как  ему  тогда  удастся  нас
обмануть.
     Не подозревая о надвигающейся опасности и искренне потешаясь над тем,
что заставляет измученных богов в третий раз  волочить  за  собой  тяжелую
сеть, Локи с нетерпением ждал, когда они опять к нему  приблизятся,  чтобы
повторить свой прыжок. Однако, этот прыжок оказался для него и  последним.
Могучая  рука  бога  грома  перехватила  его  в  воздухе,  и,  как  он  ни
сопротивлялся, уйти ему уже не удалось.
     Много плохого сделал бог огня за свою жизнь, но еще страшнее было его
наказание. Асы отвели Локи на самую высокую из скал Митгарда  и  приковали
его там за руки и за ноги, а Скади, мстя за своего отца, повесила над  его
головой ядовитую змею, из пасти  которой  непрерывно  капает  яд.  Правда,
верная жена Локи, Сигнн, и день и ночь сидит около своего мужа, держа  над
ним большую чашу, но, когда эта чаша переполняется ядом и Сигни отходит  в
сторону, чтобы его выплеснуть, капли яда падают на лицо бога огня, и тогда
он корчится в страшных мучениях.  От  этого  содрогается  весь  Митгард  и
происходит то, что люди называют землетрясением.



                             ПРОРОЧЕСТВО ВАЛЫ

     Уже не первый год был прикован  к  скале  бог  огня,  уже  скорбь  по
светлому Бальдру начала стихать в сердцах  Асов,  уже  великанша  Ярнсакса
родила Тору второго сына, по имени  Моди,  почти  не  уступавшего  в  силе
своему брату Магни, уже побежденные богом грома великаны забыли дорогу в в
Асгард, уже люди заселили все самые  дальние  уголки  Митгарда,  когда  на
земле появилась пророчица Вала, глаза которой так же ясно видели  будущее,
как обычный человек видит то, что происходит вокруг него.
     Слава Валы разнеслась по свету и достигла  даже  Асгарда,  и  великий
Один призвал ее к  себе,  чтобы  она  поведала  ему  и  его  детям  об  их
дальнейшей судьбе.

                      Многое знаю я, вижу я, вещая,
                      Грозно грядущий жребий богов,

     - так начала Вала свой рассказ. - Я  вижу,  как  Асы  много  столетий
подряд по-прежнему правят миром, вижу, как растут с годами их богатства  и
слава, вижу, как поклоняются им люди и как боятся их великаны, но  я  вижу
также,  как  собираются  над  ними  черные  тучи  и  как  с  каждым   днем
приближаются сумерки богов.
     Вот одна за другой следуют три зимы с небывалыми морозами и  ветрами.
Солнца почти не видно: оно покрыто туманом. Но люди этого не замечают: они
сражаются из-за золота, которое ослепило им глаза.
     Я вижу, как к концу третьей из этих зим падут оковы с бога огня и  он
встает, полный злобы и мести. Из подземных недр вырывается могучий Фенрис,
а из морских глубин подымается змея Митгард, уже залечившая рану,  которую
нанес ей сильнейший из Асов.
     Я вижу, как Локи собирает всех великанов из Нифльхейма и Йотунхейма и
как они плывут к Митгарду на корабле  "Нагльфаре".  Среди  них  и  могучий
повелитель Муспельхейма, великан Сурт, с огненным  мечом  в  руках.  Велик
корабль "Нагльфар" - он сделан из  ногтей  всех  умерших,  -  и  несметное
войско везет по волнам мирового моря.
     Вот уже затрубил в свой золотой рог Хеймдалль, вот  уже  распахнулись
все пятьсот сорок ворот Валгаллы, и из каждых  ворот  вышло  по  восемьсот
воинов.
     Впереди них на  своем  Слейпнире,  с  копьем  Гунгниром  в  руках,  в
крылатом золотом шлеме скачет  Один.  Остальные  Асы  тоже  вооружаются  и
спускаются с радужного моста навстречу врагам.
     Я вижу, как они встречаются с великанами в долине Вигрид. А теперь  -
о горе вам всем! - я вижу, как Фенрис разрывает отца богов и  как  славный
бог грома убивает змею Митгард, но и сам,  пораженный  ее  ядом,  успевает
отступить от трупа чудовища всего на девять  шагов  и  падает  мертвым.  Я
вижу, как Локи сражается с Хеймдаллем и как  они  убивают  друг  друга.  Я
вижу, как пес Гарм, которого Хель вскормила мясом мертвецов, бросается  на
Тира и гибнет вместе с ним.
     Уже пал  прекрасный  Фрейр,  пораженный  огненным  мечем  Сурта,  уже
повелитель Муспельхейма убивает Фригг и других богинь, сражавшихся рука об
руку со своими мужьями.
     Но вот вперед выступает Видар. На его ногах башмаки с самыми толстыми
подошвами в мире. Они сделаны из всех заплат, которые люди  испокон  веков
клали на свою обувь. Молчаливый  Ас  наступает  ногой  на  нижнюю  челюсть
Фенриса и, вонзив свой меч ему в небо, убивает чудовище.
     Вот Магни и Моди подняли молот своего отца и тоже вступили в бой. Вот
Ульр без промаха стреляет из своего лука.  Я  вижу,  как  Сурт  погиб  под
ударом  Мйольнира,  я  вижу,  что  великаны  побеждены,  но  огненный  меч
повелителя  Муспельхейма  упал  на  ясень  Игдразиль,  и  могучее   дерево
вспыхнуло. Его корни, источенные драконом  Нидгегом,  не  в  силах  больше
держать ствол, и он падает. Вместе с ним рушится небесный  свод,  а  земля
погружается в мировое море. А вот и волки Скель и Гети проглотили  луну  и
солнце, и больше я ничего не вижу.
     Вала умолкла. Угрюмо молчали и Асы. Даже неукротимый Тор не  произнес
ни слова. Прошло несколько минут, но тут пророчица заговорила вновь:
     - Радуйтесь, боги! Я вижу: дым рассеялся,  а  в  небе  засияло  новое
солнце, еще ярче и  красивее  старого.  Асгарда,  Митгарда,  Йотунхейма  и
Муспельхейма больше нет, нет и  страны  гномов  и  страны  эльфов  -  одно
мировое море с шумом катит свои волны с севера на юг и с востока на запад.
     Но не только море и солнце я вижу - я вижу высоко-высоко в небе, там,
где раньше был  Асгард,  но  только  еще  выше  его,  молчаливого  Видара,
храброго Вали, могучих Магни и Моди и меткого Ульра - они  остались  живы.
Вместе с ними Бальдр и Ход, которым удалось вырваться из царства Хель.  За
поясом у Магни молот его знаменитого отца. Молодые боги разговаривают друг
с другом, вспоминая дела и подвиги минувших веков, и строят для себя новую
страну, а под ними из  мирового  моря  опять  подымается  земля.  Она  все
зеленая, она покрыта чудесными лесами, садами, пастбищами и нивами. А  вот
и люди. Они  уже  не  думают  о  богатстве.  Блеск  золота  их  больше  не
ослепляет. Они не воюют друг с другом и живут безбедно и счастливо.
     - Когда же все  это  будет,  Вала?  -  спросил  ее  Один,  видя,  что
пророчица опять замолчала.
     - Я могу сказать тебе только, что это будет, - отвечала она.
     И все Асы невольно повторили за ней:
     - Это будет!




                     ЧАСТЬ ВТОРАЯ. СКАЗАНИЯ О ГЕРОЯХ


                          СКАЗАНИЕ О ВОЛЬСУНГАХ

     Жили когда-то два богатых и знатных человека: Сиги и Скади, и  был  у
Скади умный и искусный слуга по имени Бреди.
     Однажды Сиги и Бреди пошли вместе на охоту, и, как Сиги ни  старался,
Бреди убил дичи в два раза больше, чем он. Сиги, который был сыном  самого
Одина и очень гордился своим происхождением, не  смог  стерпеть,  что  его
превзошел человек столь низкого звания, и в гневе убил Бреди.
     Вернувшись из лесу, он рассказал, что Бреди в погоне за  оленем  ушел
далеко в чащу и что он его больше не видел. Тогда Скади  послал  людей  на
поиски своего слуги. Те по следам нашли тело Бреди и узнали, кто его убил.
Сиги был приговорен к изгнанию и навсегда покинул родную страну,  но  Один
не оставил сына в беде. Он помог ему собрать большую дружину и  повел  его
корабли далеко на юг от берегов Скандинавии. Там  Сиги  удалось  завоевать
целую страну и стать ее  королем.  Эта  страна  стала  называться  страной
франков, а ее народ - франками. Вскоре Сиги женился на  дочери  одного  из
своих придворных, и от этого брака у него  родился  сын  по  имени  Рерир.
После смерти своего  отца  Рерир  удачными  войнами  еще  больше  расширил
королевство  франков,  приобрел  много  богатств  и  мог   бы   называться
счастливейшим человеком в мире, если бы боги  даровали  ему  потомство,  -
детей у него не было.
     Прошли годы, Рерир состарился и со страхом ждал смерти, не зная, кому
завещать свое королевство.
     Как-то раз, когда он печально сидел на  вершине  холма  невдалеке  от
своего замка, перед ним появилась высокая стройная девушка  в  кольчуге  и
шлеме. В правой руке она держала большое красное  яблоко.  Это  была  дочь
великана Гримнира, валькирия Лиод.
     - Боги слышали твои жалобы, Рерир, - сказала она,  -  и  решили  тебе
помочь. Возьми это яблоко, отдай его своей  жене,  и  тогда  твое  желание
исполнится. У тебя родится сын, имя которого будет жить в веках,  пока  не
придет волк и не погибнут люди и боги.
     Рерир  радостно  схватил  яблоко,  Лиод  полетела  обратно  в  Асгард
сообщить Асам, что она выполнила их приказание.
     Все свершилось так,  как  предсказала  посланница  богов.  Едва  жена
Рерира съела яблоко, как почувствовала под сердцем ребенка. Никто  так  не
благословлял богов, как старый король, но не суждено  было  ему  дождаться
рождения сына. Он умер несколько  месяцев  спустя  после  появления  Лиод.
Королева горько плакала по  мужу  и  с  еще  большим  нетерпением  ожидала
появления ребенка. Однако минул год, за  ним  второй,  а  он  все  еще  не
рождался. Наконец, когда прошло время уже в три  раза  больше  положенного
срока, у нее родился мальчик, такой большой и крепкий,  что  сразу  же,  с
первого дня рождения, встал на ноги и пошел. Королева не выдержала тяжелых
родов и вскоре после них скончалась, успев назвать сына Вольсунгом.
     Боги выполнили свое обещание. Вольсунг рос не по дням, а по  часам  и
уже с юношеских лет прославился как храбрый боец и искусный  военачальник.
Его имя прогремело по всему свету. Когда же он возмужал и ему пришла  пора
жениться, боги прислали ему  в  жены  ту  самую  валькирию  Лиод,  которая
когда-то принесла яблоко его покойному отцу. Она родила  Вольсунгу  десять
сыновей и дочь, о дальнейшей судьбе которой и пойдет сейчас наш рассказ.



                                  СИГМУНД


                               СВАДЬБА СИГНИ

     В замке короля франков Вольсунга вот уже несколько дней шел небывалый
пир. Немало лет прошло с тех пор, как был  выстроен  этот  замок,  но  еще
никогда не видел он под своей крышей столько гостей. Собрались все  друзья
и родственники старого короля, предводители  его  дружин  и  даже  простые
воины. Единственная дочь Вольсунга, красавица  Сигни,  выходила  замуж  за
короля Гаутланда - Сиггейра и уезжала  вместе  с  мужем  за  море,  в  его
королевство.
     Как и большинство жилищ  тех  далеких  времен,  замок  Вольсунга  был
выстроен вокруг дерева, исполинского  старого  дуба,  который  Вольсунг  в
честь жены прозвал "дубом валькирий". Его могучий, в шесть обхватов  ствол
поддерживал все здание, а вершина, с далеко раскинувшимися ветвями  пышным
зеленым  куполом  подымались  над  крышей.  Между  корнями  этого  лесного
великана, на земляном полу замка, стояли длинные столы, на которых  лежали
зажаренные целиком туши оленей, вепрей и ланей, а подле - открытые бочки с
пенящимся медом и крепкой брагой. Как только содержимое какой-либо из этих
бочек подходило к концу, слуги выкатывали  ее  из  зала,  а  на  ее  место
ставили новую. Хозяева и гости ели,  пили  и  веселились,  и  только  сама
новобрачная была задумчива и печальна. Не по своей воле  выходила  она  за
муж. Ей не нравился Сиггейр, а за его вкрадчивыми,  льстивыми  речами  она
угадывала коварство и скрытую жестокость. Сигни с грустью  думала  о  том,
что скоро она навсегда расстанется с родным домом,  расстанется  с  отцом,
братьями, расстанется со старшим из них, Сигмундом.
     Сигмунд и Сигни были близнецы. Они вместе родились, вместе выросли, и
если Сигни превосходила всех красотой, то Сигмунд не знал себе  равных  по
силе и мужеству. Многие даже предсказывали, что  его  слава  скоро  затмит
славу его знаменитого отца. Сигмунду тоже не нравился Сиггейр, но он  знал
непреклонный характер старого Вольсунга и потому молчал.
     Уже немало старого меду  было  выпито  и  порядком  охмелевшие  гости
только что затянули своими охрипшими в походах  голосами  дикую,  как  вой
морского ветра,  воинственную  песню  викингов,  как  вдруг  дверь  в  зал
внезапно распахнулась, и на пороге появился  неизвестный  старик.  На  его
голове была потрепанная широкополая шляпа, на плечах висел  дырявый  синий
плащ, а в правой руке он держал огромный блестящий меч.  У  пришельца  был
всего один лишь глаз, но этот глаз сверкал таким умом, да и вся наружность
старика была так величественна, что все  невольно  смутились  и  никто  не
осмелился даже поприветствовать нового гостя обычным  "добро  пожаловать".
Не обращая на это внимания, старик медленно и важно вошел  в  зал,  прошел
между рядами гостей и, подойдя к дубу валькирий, с такой силой  воткнул  в
него меч, что он по рукоятку ушел в ствол.
     - Я оставлю здесь свой  меч,  -  произнес  он,  и  его  слова  громко
прозвучали в наступившей тишине, - в дар тому, кто сумеет его вытащить.  И
знайте, что лучшего меча никто из смертных еще не держал в своих руках.
     Сказав это, незнакомец повернулся и, не оглядываясь, вышел  из  зала.
Слуги Вольсунга кинулись вслед за ним, но таинственный гость уже исчез,  и
никто не видел, откуда он пришел и куда скрылся.
     Едва опомнившись от изумления, все, кто только был в  зале,  вскочили
со  своих  мест  и  окружили  дуб  валькирий,  в  стволе  которого  тускло
поблескивала золоченая рукоятка  меча.  Младший  сын  Вольсунга  уже  было
протянул к ней руку, но  отец  остановил  его  и,  обращаясь  к  Сиггейру,
сказал:
     - Ты мой гость, дорогой зять, попытайся же первым вытащить этот меч.
     Сиггейр покраснел от радости. Он был молод и  силен  и  надеялся  без
труда завладеть подарком незнакомца.
     "Если  старик  смог  его  воткнуть,  то  уж  я,  конечно,  сумею  его
вытащить", - подумал он.
     Однако надежды короля Гаутланда были напрасны  и,  хотя  он  тянул  с
такой силой, что на лбу выступили крупные капли пота, меч не сдвинулся  ни
на волосок.
     - Нет, видно не рука простого смертного всадила  сюда  этот  меч,  не
руке простого смертного его и вытащить! - сердито проворчал он, садясь  на
свое место.
     Сиггейра сменил старый Вольсунг, а того - сыновья  и  гости.  Каждому
хотелось испытать свою силу и получить чудесное  оружие.  Один  за  другим
подходили они к дубу и один за другим смущенно отходили прочь. Меч  словно
прирос к стволу и не двигался с места.
     Лишь один Сигмунд молчаливо стоял в стороне. Старый Вольсунг  заметил
это и подошел к нему.
     - Разве тебя не хочется завладеть таким прекрасным мечом? Или  ты  не
доверяешь своим силам? - спросил он.
     - Нет, я не хотел мешать другим, - коротко ответил Сигмунд.
     Он подошел к дубу и, схватив одной рукой рукоятку меча, выдернул  его
так же легко, будто вынимал из ножен.
     Все  невольно  вскрикнули,  восхищенные  исполинской  силой  молодого
Вольсунга. Не меньше восторгов вызвал и  сам  меч.  Он  был  действительно
великолепен. Испытав его, Сигмунд  вырвал  у  себя  волосок  и  бросил  на
лезвие. Едва коснувшись меча, волосок распался  на  две  части.  Раздались
новые крики восторга.
     - Послушай, Сигмунд, - сказал Сиггейр, который все время  с  завистью
смотрел на меч, - продай его мне. Я дам тебя столько  золота,  сколько  он
весит.
     - Если бы тебе подобало его носить, - насмешливо отвечал  Сигмунд,  -
ты бы и сам его вытащил. Теперь же я его не  продам  его  за  все  золото,
которое есть в твоем королевстве.
     Король Гаутланда вздрогнул от обиды. Но он был достаточно умен, чтобы
не давать волю своему  гневу,  и  весело  расхохотался,  дружески  хлопнув
Сигмунда по плечу.
     - Ну, так носи его сам, - воскликнул он, - а мы выпьем за  то,  чтобы
подвиги, которые ты совершишь этим мечем, навеки прославили твое имя!
     Сказав это, он взял из рук слуги полный рог меду и осушил  его  одним
духом. Остальные последовали  его  примеру,  после  чего  веселье  в  зале
вспыхнуло с новой силой и продолжалось уже без  всякой  помехи  до  самого
утра.
     Однако, с первыми же лучами солнца Сиггейр поднялся  и,  обращаясь  к
Вольсунгу, сказал:
     - Подул попутный ветер, дорогой тесть, и я хочу  воспользоваться  им,
чтобы  сегодня  отплыть  домой.   Позволь   же   поблагодарить   тебя   за
гостеприимство и радушие.
     Лицо старого Вольсунга омрачилось.
     - Ты слишком рано собрался в дорогу, - возразил он.  -  У  нас  не  в
обычае кончать свадебный пир так скоро.
     - Знаю, - ответил Сиггейр. - Но я  и  не  собираюсь  его  кончать.  Я
получил важные известия и должен спешно вернуться домой, но,  если  ты  со
всеми, кто здесь  присутствует,  через  две  недели  пожалуешь  ко  мне  в
Сиггейраутланд, мы продолжим там то, что начали здесь, и поверь,  я  сумею
ответить гостеприимством на гостеприимство.
     Слова  Сиггейра  вызвали  одобрительные  крики  гостей,  которые  уже
заранее радовались предстоящему празднику.
     - Я принимаю твое приглашение, - сказал старый Вольсунг, - и даю тебе
слово, что через две недели буду у тебя в Гаутланде со всеми, кто пожелает
мне сопутствовать. А таких, -  добавил  он,  оглядывая  зал,  -  наберется
немало.
     - Чем больше гостей ты привезешь, тем веселее нам будет, - приветливо
улыбаясь, ответил Сиггейр.
     Он попрощался с Вольсунгом  и  вышел,  чтобы  приказать  своим  людям
собираться в дорогу.
     В этот момент Сигни, которая до сих пор безучастно  сидела  на  своем
месте, вдруг бросилась на колени перед старым  королем  и  со  слезами  на
глазах воскликнула:
     - О дорогой отец! Молю тебя, позволь мне не ехать! Не  верь  Сиггейр:
он коварен и злобен. Пусть уезжает он один в свой Гаутланд, а  я  останусь
здесь, с тобой и братьями!
     - Ты с ума сошла, Сигни! - сердито взглянув на дочь,  отвечал  старый
Вольсунг. - Как я могу нанести такое оскорбление своему гостю и зятю, да к
тому же такому уважаемому человеку, как Сиггейр! Немедленно ступай к  нему
и не смей подавать даже виду, что он тебе неприятен!
     Сигни понурила голову и, не говоря больше ни слова,  вышла  вслед  за
Сиггейр. А два часа спустя корабли гаутландцев уже покинули землю  франков
и быстро понеслись по бурным волнам Северного моря. Они увозили Сиггейр  и
его молодую жену, глаза которой до последней минуты были устремлены на юг,
к родным берегам, словно она предчувствовала, что уже никогда больше их не
увидит.



                            СМЕРТЬ ВОЛЬСУНГА

     Старый Вольсунг сдержал обещание, данное им  зятю.  Ровно  через  две
недели после  отъезда  Сигни  он  со  всеми  своими  сыновьями,  друзьями,
родственниками отправился в Гаутланд, чтобы  там  продолжить  празднество,
так неожиданно прерванное Сиггейром.
     Плавание франков было удачным. Попутный ветер быстро  нес  вперед  их
легкие, похожие на большие лодки корабли, и однажды под вечер они  увидели
перед собой суровые скалистые берега Гаутланда. Путники приветствовали  их
радостными криками. В  ожидании  скорого  отдыха  и  обещанного  Сиггейром
богатого угощения они затянули веселую песню  и  еще  дружнее  налегли  на
весла.
     Лишь один старый король не разделял общего веселья и,  стоя  на  носу
своего корабля, с удивлением всматривался в быстро  приближающийся  берег.
Он ожидал, что Сиггейр, заранее зная о  его  прибытии,  с  богатой  свитой
выйдет ему навстречу, но все вокруг было  пусто,  и  только  на  одной  из
прибрежных скал виднелась высокая стройная фигура женщины. Лучи заходящего
солнца играли в ее длинных золотистых волосах. Прижав к груди свои  белые,
украшенные  тяжелыми  браслетами  руки,  она  напряженно  всматривалась  в
подплывающие корабли, а потом вдруг,  как  бы  не  в  силах  далее  ждать,
бросилась в воду и поплыла им навстречу. Вскоре она поравнялась с кораблем
Вольсунга и, схватившись руками за борт, одним быстрым и ловким  движением
поднялась на палубу.
     Это была Сигни. С ее  платья  и  волос  ручьями  стекала  вода,  щели
побелели. Не говоря ни слова, она бросилась к ногам отца и прижалась лицом
к его коленям.
     - Что с тобой, дочь моя? - воскликнул старый Вольсунг. Где твой  муж?
Уж не случилось ли с ним какого-нибудь несчастья?
     При этих словах отца Сигни резко выпрямилась. Ее большие синие  глаза
потемнели от негодования.
     - Ах, если б это было так! - гневно вскричала она. - Но нет, с ним не
случилось несчастья. Это  он  готовит  несчастье  другим.  Там,  -  и  она
показала рукой на длинную гряду прибрежных скал, - там, за этими  скалами,
он собрал несметное войско, которому приказано напасть  на  вас,  едва  вы
высадитесь на берег. Таков будет тот пир, на который он вас пригласил.  Не
медли же, отец мой! Прикажи повернуть корабли и, пока не  поздно,  направь
их прочь от этой проклятой земли!
     Сигни говорила так громко, что ее слова были слышны на всех кораблях.
Франки положили весла и молча смотрели  на  своего  короля.  Лицо  старого
Вольсунга было угрюмо. Его косматые седые  брови  сдвинулись.  Наконец  он
решительно покачал головой.
     - Ты мне не веришь, отец? - в отчаянии вскричала Сигни. - О,  клянусь
всеми богами, что я сказала правду!
     - Я верю тебе, дочь моя, - спокойно ответил старый король, - и мне не
надо твоих клятв. Но еще в молодости я сам дал клятву никогда не отступать
перед врагами, как бы сильны они не были. Эту клятву я сдержу и теперь. Мы
высадимся на берег и примем бой с дружинами твоего мужа.
     Сигни побледнела еще больше, но потом ее глаза сверкнули, и она гордо
подняла голову.
     - Хорошо, отец, - сказала  она,  -  поступай  так,  как  ты  считаешь
нужным. Позволь только мне остаться с вами и  разделить  вашу  победу  или
вашу смерть!
     Суровые, словно высеченные из гранита  черты  старого  вождя  немного
смягчились, но лишь на одно мгновение.
     - Нет, Сигни, - произнес он решительно,  -  не  мне  нарушать  обычаи
наших предков. Ты замужем, и не судьба  отца  и  братьев,  а  судьба  мужа
отныне должна стать твоей. Ты вернешься к  Сиггейру  и  останешься  с  ним
навсегда.
     И, уже не обращая больше внимания на дочь, король франков обернулся к
своей дружине и громко воскликнул:
     - Друзья мои! Вы слышали слова Сигни и знаете, что вас  ждет.  Мы  не
хотели вражды с Сиггейром и приехали к нему как друзья, но бежать от  него
было бы недостойно нас, франков! Лучше погибнуть в бою  и  быть  почетными
гостями в Валгалле, чем умереть смертью трусов и отправиться  в  подземное
царство Хель. Вперед же, друзья, и да поможет нам мой прадед Один!
     - Вперед! - дружно повторили франки.
     Они снова взялись за весла и несколькими взмахами подвели  корабли  к
берегу.
     Сигни первая легко соскочила на землю.
     - Прощай, отец, - грустно сказала она. - Я исполню твое приказание  и
вернусь к Сиггейру, но знай, что, если вам суждено будет  погибнуть,  твоя
смерть не останется неотомщенной.  Прощай  же  навсегда,  прощайте  и  вы,
друзья и братья!
     Она в  последний  раз  окинула  взором  спокойные,  бесстрашные  лица
молчаливо готовящихся к бою франков, а потом, уже не оборачиваясь,  быстра
побежала к груде утесов,  которые  скрывали  дружину  Сиггейра,  и  вскоре
исчезла за ними.
     Тем  временем  небольшая  дружина  Вольсунга  вышла  на  берег   реки
построилась плотными рядами вокруг своего короля и его десяти сыновей.  Им
не пришлось долго ждать. Не прошло и нескольких минут, как справа и  слева
от франков показались первые ряды бесчисленной рати  Сиггейра.  Гаутландцы
наступали широким полукругом, стремясь отрезать франков от берега моря.
     Вольсунг взглядом искал в их толпе своего зятя, но  тот  был  слишком
хитер и осторожен, чтобы самому встретиться в бою с  прославленным  старым
воином и его могучими сыновьями, и  предпочел  остаться  в  своем  дворце,
поручив командовать дружинами своим военачальникам.
     - Жалкий трус! - с презрением прошептал Вольсунг. - Вперед, франки! -
крикнул он уже громко и, высоко подняв свой меч, кинулся навстречу врагам.
     Натиск франков был так стремителен, что ряды  Гаутландцев  смешались.
Впереди всех, мощными ударами прокладывая себе дорогу, шел старый  король.
Рядом с ним неотступно следовал Сигмунд со своим чудесным мечем  в  руках.
Казалось, что Вольсунг, доселе никогда не знавший поражения, и на этот раз
одержит  победу.  Однако  гаутландцев  было  слишком  много.  Девять   раз
прорывались  франки  сквозь   их   ряды,   устилая   свой   путь   трупами
многочисленных врагов, но и сами  понесли  при  этом  тяжелые  потери.  Не
замечая, что от его дружины осталось не более трети,  Вольсунг  в  десятый
раз повел ее на врага. В этот  момент  метко  брошенное  копье  одного  из
гаутландцев пронзило ему грудь. Старый богатырь  пошатнулся  и,  не  издав
даже стона, мертвым рухнул на землю. Увидев это, Сигмунд, думая, что  отец
только ранен, бросился к нему и опустился около него на колени. В  тот  же
миг крепкая ременная петля перехватила  ему  горло  и  опрокинула  его  на
землю. Сигмунд попытался встать,  но  тут  же  свыше  десяти  гаутландских
воинов навалилось на него, обезоружили его  и  туго  связали  по  рукам  и
ногам. Точно так же были взяты в плен и остальные девять братьев Сигмунда,
а  еще  через  несколько  минут  последний  франк,  истекая  кровью,  пал,
пронзенный копьями своих врагов. Битва была окончена.



                                  ЛОСИХА

     Гаутландцы привели Сигмунда и его братьев во двор королевского замка.
Здесь их поджидал сам Сиггейр, сидевший на  простой  деревянной  скамье  в
окружении своей свиты. Рядом с ним стояла Сигни. Ее лицо было  величаво  и
бесстрастно. Казалось, она полностью смирилась со своей судьбой и  участью
отца и братьев. Зато глаза короля Гаутланда загорелись дикой радостью  при
виде пленников.
     - Привет тебе, Сигмунд, - сказал он насмешливо. - Не повторишь ли  ты
еще раз, что я недостоин носить этот клинок?
     И его рука любовно погладила рукоятку чудесного меча, которым он  уже
успел опоясаться.
     - Этот меч не для тебя, Сиггейр, - спокойно отвечал Сигмунд, - и рано
или поздно он достанется тому, кому предназначался.
     - Тебе-то он уж во всяком случае, не достанется!  -  злобно  возразил
Сиггейр. - Эй, воины, взять этих франков и отрубить им головы!
     - Постой, Сиггейр! - поспешно воскликнула Сигни,  не  в  силах  далее
сдерживаться. - Постой, не торопись выносить им свой приговор.
     - Что это значит, жена моя?  -  угрюмо  сказал  король  гаутланда.  -
Так-то ты любишь своего мужа! Или ты забыла, какую  обиду  мне  нанесли  в
доме твоего отца, или ты хочешь, чтобы я ее простил?
     - Нет, я не забыла нанесенной тебе обиды, - ответила  Сигни,  -  и  я
сама не могу ее простить. Но ты  слишком  скупо  за  нее  расплачиваешься.
Смерть от меча легка. Прикажи лучше отвести их в лес и заковать в колодки.
Пусть они умрут там от голода и жажды.
     - Клянусь Одином, ты права, Сигни! - усмехнулся Сиггейр. -  Теперь  я
вижу, что ты верная жена и хорошая подруга. Смерть от  меча  действительно
слишком легка. Вы слышали слова королевы? - обратился он к своим воинам. -
Делайте же так, как она сказала. А  вы,  Вольсунги,  умирая  от  голода  и
жажды, утешайтесь, что этим вы обязаны сестре! - И он громко расхохотался.
     Повинуясь приказу своего короля, гаутландские  воины  отвели  братьев
Вольсунгов в лес и там приковали их рядом друг с другом к огромному стволу
поваленного  бурей  дерева.  Убедившись  в  том,  что  пленные  не   могут
шевельнуть ни рукой, ни ногой и  что  убежать  им  никак  не  нельзя,  они
оставили их одних, а сами вернулись в замок  сообщить  Сиггейру,  что  они
исполнили его повеление.
     Сигни недаром посоветовала мужу заковать пленных франков в колодки. У
нее был старый преданный слуга, находившийся при  ней  с  детства,  и  она
надеялась с его помощью освободить братьев и помочь им бежать. Однако  все
случилось совсем не так, как она рассчитывала. В первую ве ночь на поляну,
на которой сидели франки, вышла из чащи огромная лосиха и, тяжело  ступая,
направилась прямо к ним. Братья с ужасом заметили, что ее  глаза  горят  в
темноте, как у хищного зверя. Лосиха подошла к самому младшему из  них  и,
перекусив ему горло, с жадностью  стала  его  пожирать.  Тщетно  остальные
Вольсунги кричали и свистели, надеясь  испугать  страшного  зверя.  Лосиха
остановилась лишь  тогда,  когда  съела  свою  жертву,  после  чего  вновь
скрылась в чаше леса.
     Наутро на поляну пришел старый слуга,  которого  прислала  Сигни.  Он
принес братьям еду и питье и попытался их освободить, но  одному  человеку
это было не под силу. Кроме того, он был стар и слаб,  сама  же  Сигни  не
могла выйти из замка, так как за ней зорко следили. А  на  следующую  ночь
вновь явилась лосиха,  и  еще  один  из  Вольсунгов  окончил  свою  жизнь,
съеденный кровожадным животным.
     Шел день за днем, ночь за ночью, и франков становилось все  меньше  и
меньше. Сигни рвала на  себе  волосы,  не  зная,  как  спасти  братьев  от
чудовища. Она не догадывалась, что лосиха не кто иной, как мать  Сиггейра,
злая колдунья, по ночам превращавшаяся в зверя. Колдунья разгадала замысел
Сигни и посоветовала сыну десять дней не выпускать жену из  дому.  За  это
время она собиралась съесть всех братьев.
     Так прошло девять ночей. К исходу последней ночи из всех Вольсунгов в
живых остался один лишь Сигмунд. Он уже почти примирился со своей участью,
как вдруг ему в голову пришла счастливая мысль.  Утром,  когда  на  поляну
опять пришел старый слуга, который ежедневно навещал братьев, он обратился
к нему и сказал:
     - Беги скорей к моей сестре и скажи ей, чтобы она прислала мне горшок
самого лучшего, душистого меда. Да смотри торопись и принеси мне этот  мед
не позднее вечера.
     Слуга со всех ног бросился выполнять поручение и под вечер вернулся с
медом.
     - Хорошо, - сказал Сигмунд. - А теперь намажь мне этим медом лицо,  а
остаток положи в рот.
     Слуга не понял, что задумал молодой Вольсунг, однако сделал так,  как
тот ему сказал, после чего попрощался с Сигмундом и ушел домой.
     Сигмунд и сам не знал, удастся ли его замысел, и с  волнением  ожидал
наступления ночи. Но вот солнце село, на небе появились первые  звезды,  и
он услышал в отдалении грузные шаги своего  врага.  Лосиха  подходила  все
ближе и ближе. Остановившись перед Сигмундом, она некоторое время смотрела
на него, как будто наслаждаясь видом своей жертвы, а потом  раскрыла  свою
пасть, готовясь перекусить ему горло. В этот миг в ноздри ей ударил резкий
запах меда. Лосиха снова  закрыла  пасть,  внимательно  обнюхала  молодого
Вольсунга, а затем принялась слизывать мед с его лица. Она  так  увлеклась
этим, что наконец засунула ему язык прямо в рот. Сигмунд, который только и
ждал этого, крепко стиснул его своими зубами. Испуганная лосиха  рванулась
прочь и изо всех сил ударила передними ногами в  дерево,  к  которому  был
прикован молодой богатырь. Дерево разлетелось на куски, и Сигмунд оказался
на свободе. Не теряя ни минуты, он, не разжимая  зубов,  перехватил  своей
могучей  рукой  язык  лосихи  и  вырвал  его  из  ее   горла.   Из   пасти
колдуньи-зверя ручьем хлынула кровь, и она мертвой упала на землю.
     С первыми лучами солнца в лес прибежал старый слуга. На этот раз  его
сопровождала Сигни, которой Сиггейр, уверенный  в  том,  что  франков  уже
больше нет в живых, предоставил полную свободу. Какова же была их радость,
когда они увидели Сигмунда живым и на свободе, а лосиху  -  бездыханной  у
его ног!
     - Видно, не суждено тебе погибнуть бесславной смертью! -  воскликнула
Сигни, горячо обнимая брата. - Ты совершишь еще немало подвигов, а Сиггейр
дорого заплатит нам за свое предательство.
     - Придет время и для этого, сестра, - ответил ей Сигмунд.  -  А  пока
пусть твой муж лучше думает, что последнего из  Вольсунгов  нет  больше  в
живых. Иди домой, а я зарою труп лосихи, чтобы никто ничего не заметил.
     - Где же ты будешь жить, дорогой брать? - спросила Сигни.
     - Здесь же, в лесу, - ответил Сигмунд. - Так что мы скоро увидимся. А
сейчас спеши назад, пока Сиггейр тебя не хватился.
     Сигни попрощалась с братом и побежала домой,  а  Сигмунд  взвалил  на
плечи труп лосихи и отнес его подальше в кусты, где и закопал в землю.
     В тот же день Сиггейр послал в лес  своих  воинов  узнать,  живы  еще
Вольсунги, и те, вернувшись, доложили ему, что нашли  дерево,  к  которому
были прикованы франки, разбитым, а рядом с ним свежую лужу крови.
     "Видно, дикие звери или моя мать растерзали всех десятерых", - сказал
про себя Сиггейр, а вслух добавил:
     - Теперь, Сигни, мы можем царствовать спокойно и нам не грозит  ничья
месть - Вольсунгов больше нет в живых!
     "Что бы ты сказал, Сиггейр, если бы знал правду!" -  подумала  Сигни,
но ничего не ответила мужу и лишь молча наклонила голову в знак согласия.



                                 СИНФИОТЛИ

     Вдалеке от королевского замка, в самой чаще  леса,  Сигмунд  построил
себе землянку, в которой и поселился, терпеливо поджидая минуты, когда  он
сможет отомстить Сиггейру за  смерть  отца  и  братьев.  Мясо  он  добывал
охотой, а муку и овощи ему присылала все с тем же старым слугой Сигни, так
что он ни в  чем  не  нуждался.  Королева  сама  часто  навещала  брата  и
рассказывала ему обо всем, что происходило при дворе ее мужа.
     Так прошли долгие годы. За это время у Сигни родилось  трое  сыновей.
Когда старшему из них исполнилось десять лет, она привела его к Сигмунд  и
сказала:
     - Дорогой брат, испытай этого мальчика. Если  ты  убедишься,  что  он
честен и храбр, значит, в его жилах течет наша  кровь,  кровь  Вольсунгов.
Тогда оставь его у себя и воспитай из него настоящего воина.  Со  временем
он поможет тебе отомстить Сиггейру за смерть деда.  Если  же  он  окажется
трусом, прогони его прочь, и я буду знать, что он не выдержал испытания.
     Сигмунд согласился и оставил мальчика у себя. На следующий день, рано
утрам, он разбудил молодого королевича и сказал:
     - Я ухожу на охоту, а ты тем временем возьми из ларя  муку  и  испеки
нам хлеб. Да поторапливайся, я скоро вернусь.
     С этими словами он взял  свой  лук  и  колчан  со  стрелами  и  ушел.
Вернулся он только к полудню, неся на плечах убитого оленя, и первым делом
спросил мальчика, испек ли он хлеб.
     - Нет, - ответил тот. - Когда  я  хотел  взять  муку,  в  ней  что-то
зашевелилось, и я побоялся ее трогать.
     - Жалкий трусишка! - с презрением вскричал Сигмунд.  -  Ты  настоящий
сын своего отца. Ступай же домой к матери и передай ей  от  меня,  что  из
тебя никогда не выйдет настоящего мужчины.
     Горько стало на душе у Сигни, когда она увидела своего старшего  сына
возвращающимся из леса. Она поняла, что он не выдержал  испытания,  однако
сдержала слезы и лишь строго-настрого приказала ему ничего не рассказывать
о том, где он был и что видел.
     Когда же минул год и ее второму сыну тоже исполнилось десять лет, она
и его привела к брату и попросила испытать так же как и первого.  И  снова
Сигмунд, уходя на охоту, приказал мальчику испечь хлеб, но мальчик,  видя,
что в муке что-то шевелится, побоялся ее трогать.
     - Передай матери, что, видно, от гнилого дерева могут родиться только
гнилые плоды, - сказал Сигмунд, отсылая его домой.
     Как ни крепилась Сигни, она не могла сдержать  слезы,  когда  увидела
перед собой  своего  второго  сына  и  услышала  от  него  жестокие  слова
Сигмунда. Теперь она возложила все надежду на третьего, самого младшего из
своих сыновей, которого звали Синфиотли.
     Синфиотли не был похож на своих старших братьев. Он  был  так  силен,
что в борьбе легко побеждал их обоих, и так смел, что не боялся вступать в
драку даже с теми, кто был намного  сильнее  его  самого.  Однажды,  чтобы
испытать его терпение, Сигни пришила ему рукава куртки прямо  к  коже,  но
Синфиотли только улыбался, не показывая даже виду, что ему  больно.  Тогда
Сигни сняла с него куртку и при этом содрала с рук кожу, но  мальчик,  все
так же улыбаясь, продолжал спокойно смотреть на мать и не издал ни  звука.
Сигни гордилась сыном и с нетерпением дожидалась того времени,  когда  ему
исполнится десять лет, чтобы показать его брату. Наконец этот день пришел,
и Синфиотли вместе с матерью отправился в лес.
     - Вот мой третий  сын,  брат,  -  сказала  Сигни,  входя  в  землянку
Сигмунда. - Испытай его, как ты испытывал  двух  первых.  Быть  может,  он
окажется более стойким, чем они.
     Сигмунд внимательно посмотрел на Синфиотли. Мальчик  ему  понравился.
Он был высок, широкоплеч и  строен  и  не  опустил  перед  богатырем  свои
большие глаза, синие  как  и  у  всех  Вольсунгов.  Однако  Сигмунд  решил
испытать его так же как и двух первых.
     - Хорошо, - сказал он Сигни, - оставь сына у меня. Завтра я  проверю,
есть ли в нем настоящее мужество или он так же труслив как и его братья.
     Синфиотли остался у Сигмунда и на следующее утро получил от  него  то
же приказание: испечь хлеб. С  тревогой  возвращался  домой  последний  из
Вольсунгов.  Он  боялся,  что  и  на  сей  раз   найдет   это   приказание
невыполненным, но, как только Сигмунд переступил порог землянки, он увидел
на  вывороченном  пне,  служившем  ему  вместо  стола,   большой,   хорошо
испеченный хлеб.
     - Когда я начал месить тесто, - сказал Синфиотли,  -  в  муке  что-то
зашевелилось, но я закатал  это  что-то  в  тесто  и  испек  тебе  хлеб  с
начинкой.
     - Молодец! - воскликнул Сигмунд,  радостно  обнимая  мальчика.  -  Ты
выдержал испытание и теперь останешься у меня. Но есть этот  хлеб  я  тебе
все-таки не дам, - добавил, он смеясь, - потому что то, что ты  закатал  в
тесто, была ядовитая змея. Я настолько силен, - продолжал  он,  -  что  ни
один яд не может причинить мне вред, но ты - Вольсунг только наполовину  и
не можешь вынести то же, что и я. Да и никто не сможет, - заключил он свою
речь.
     С этого дня Синфиотли остался у Сигмунда и вскоре полюбил его больше,
чем родного отца. Сигмунд и сам привязался к мальчугану. Он водил  его  на
охоту, учил, как обращаться с оружием, и вскоре сделал из  него  искусного
воина. Исполняя наказ Сигни, он старался воспитать в  Синфиотли  любовь  и
уважение к знаменитому роду  Вольсунгов  и  ненависть  к  предателю  отцу.
Синфиотли был столь же честен и прям, как и храбр,  и  испытывал  глубокое
отвращение ко всякому коварству. Поэтому, когда он узнал о гибели деда и о
страшной судьбе братьев своей матери, он тут же поклялся, что отомстит  за
них Сиггейру, и Сигмунд знал, что он сдержит свою клятву.
     Шли годы, и Синфиотли из мальчика превратился в настоящего богатыря.
     Во время своих странствований по окрестностям королевского замка  они
с Сигмундом часто сталкивались с небольшими отрядами гаутландских воинов и
всегда одерживали победу.  Однако  Сигмунд  по-прежнему  откладывал  месть
Сиггейру. Он все еще не был уверен в силе Синфиотли, пока один  случай  не
убедил его в том, что эта сила мало уступает его собственной.
     Как-то раз во время охоты они с  Синфиотли  наткнулись  на  небольшую
лесную хижину. В ней спали два каких-то  незнакомца,  а  над  их  головами
висели волчьи шкуры. Не зная, что эти шкуры  волшебные  и  каждый  кто  их
наденет, на десять дней превратится в волка, Сигмунд и его  питомец  шутки
ради накинули их на себя и в тот же  миг  стали  волками.  Несколько  дней
бегали они вместе по лесу, стараясь не попадаться на  глаза  охотникам,  а
потом решили отправиться в разные  стороны.  На  прощание  Сигмунд  сказал
Синфиотли, что если тот встретит врагов и их будет больше семи, он  должен
будет позвать его на помощь; если же врагов будет только семь или  меньше,
то вступить с ними в борьбу. Через несколько  времени  Синфиотли  встретил
одиннадцать гаутландских воинов, однако он  не  стал  звать  Сигмунда,  а,
бросившись на них, убил одного за  другим  всех  одиннадцать.  После  этой
битвы он так устал, что лег на землю и сейчас же  заснул.  Тут  его  нашел
Сигмунд и по лежащим вокруг трупам гаутландцев  догадался,  что  Синфиотли
нарушил его приказание. Непослушание юноши рассердило франкского богатыря,
но он невольно восхищался его храбростью и силой и решил,  что  теперь  на
него вполне можно положиться. Поэтому, когда истекло десять дней и  они  с
Синфиотли  снова  превратились  в  людей,  Сигмунд  обратился   к   своему
воспитаннику и сказал:
     - Ты доказал на деле, что можешь сражаться, как  настоящий  Вольсунг.
Пора нам навестить Сиггейра и воздать ему должное за все то  зло,  которое
он причинил нашему роду.



                              МЕСТЬ СИГМУНДА

     Сиггейр уже давным-давно забыл  и  думать  о  Вольсунгах  и  не  ждал
нападения врагов, но и в самом замке  и  вокруг  него  всегда  было  много
воинов, поэтому  Сигни  посоветовала  брату  напасть  на  него  ночью.  За
несколько часов до наступления темноты оба богатыря вооружились  с  головы
до ног и отправились в путь. Невдалеке от замка они встретили Сигни.
     - Нам нужно поторопиться, - сказало она, - ворота замка запираются на
ночь, и вы должны войти в него сейчас. Я спрячу вас  в  кладовой.  Там  вы
дождетесь, пока все заснут, и тогда пройдете к Сиггейру.
     Сигмунд молча кивнул головой. Он предпочел бы встретиться  с  королем
Гаутланда днем и в открытом бою, но у него не было другого выхода.
     В одном месте лес почти вплотную подходил  к  самому  замку.  Сюда  и
привела Сигни своих спутников. Притаившись в кустах, они дождались минуты,
когда во дворе замка никого не было, а потом быстро  вбежали  в  ворота  и
спрятались в кладовой, небольшом строении, вплотную примыкавшем  к  стене,
за  которой  находились  королевские  покои.  Здесь  Сигмунд  и  Синфиотли
притаились за большими бочками с пивом, а Сигни, убедившись в том,  что  в
замке все спокойно и что никто ничего не заметил, прошла в свою комнату.
     Сигмунду уже казалось, что их ждет удача, но случилось так,  что  как
раз в этот вечер старшему сыну  Сиггейр  захотелось  пить  и  он  зашел  в
кладовую нацедить себе  пива.  Нагнувшись  у  одной  из  бочек,  он  вдруг
заметил, что из-за нее высовывается чья-то нога. Стараясь  не  шуметь,  он
осторожно выпрямился и увидел за бочками шлемы двух воинов.  Королевич  со
всех ног кинулся к отцу, и богатыри не успели опомниться, как  в  кладовую
ворвалась стража.
     Сигмунд и Синфиотли яростно защищались, но в тесной и узкой  кладовой
они не могли свободно действовать своими мечами. Поэтому, убив с полдюжины
гаутландцев, они были наконец обезоружены и взяты в плен.
     Удивление Сиггейра  при  виде  Сигмунда,  которого  он  считал  давно
умершим, могло сравниться лишь с его гневом, который  еще  больше  возрос,
когда во втором пленнике он узнал Синфиотли.
     - Я не знаю,  как  тебе  удалось  избежать  моей  мести,  Сигмунд,  и
переманить на свою сторону моего сына, - мрачно сказал он, -  но  я  знаю,
что на этот раз ты последуешь за своими братьями и захватишь с собой этого
змееныша, изменившего родному отцу. Пусть ваша смерть будет примером того,
как король Гаутланда умеет расправляться со своими врагами.
     И действительно, казнь, которую придумал для своих пленников Сиггейр,
была ужасна.
     Невдалеке от замка находился небольшой каменистый холм.  В  нем  была
выкопана глубокая яма,  посередине  которой  установили  гранитную  плиту,
разделявшую ее пополам. Сигмунда и Синфиотли посадили по разные стороны от
этой плиты, после чего  яму  закрыли  слоем  толстых  бревен.  Сверху,  на
бревна, Сиггейр приказал насыпать большую  груду  камней,  которые  должны
были возвышаться как вечный памятник его мести врагам.
     Вся бледная от горя и отчаяния,  Сигни  молча  смотрела,  как  заживо
хоронят ее брата и сына. Вдруг  она  о  чем-то  вспомнила  и  стремительно
бросилась в замок. Скоро она вернулась назад, держа в руках  большой  сноп
соломы. Как раз в это время гаутландские воины готовились засыпать камнями
ту часть ямы, в которой находился Синфиотли.
     - Подождите минутку, - обратилась к ним Сигни. -  Дайте  мне  бросить
сыну хотя бы этот сноп, чтобы он умер не на голых камнях.
     Воины переглянулись между собой, и один из них сказал:
     - Ну что ж, пусть она бросит ему сноп  -  от  этого  он  не  проживет
дольше, а если и проживет, то только лишний час промучается.
     Он приподнял одно из бревен, настланных поверх ямы, и Сигни просунула
в отверстие свой сноп.
     - Спасибо тебе, - сказала  она  воину  и,  стараясь  скрыть  радость,
которая светилась в ее глазах, быстро ушла.
     Тем временем груда камней над  Сигмундом  и  Синфиотли  все  росла  и
наконец превратилась в целую гору.
     - Пора кончать работу, -  сказал  воин,  разрешивший  Сигни  передать
Синфиотли солому. - Сдвинуть эти намни не под силу даже  великану.  Теперь
пленники уже не убегут, и наш король может быть доволен.
     -  Ты  прав,  -  подтвердил  другой,  -  мне  кажется  даже,  что  мы
перестарались.
     И гаутландцы, бросив работу, толпой направились в замок.
     Не слыша больше грохота камней над своей  головой,  Синфиотли  понял,
что их оставили одних, и осторожно ощупал руками сноп, который ему бросила
мать. В нем  лежал  меч,  тот  самый  меч,  который  когда-то  принадлежал
Сигмунду, а потом был отнят у него Сиггейром. Синфиотли еще ребенком часто
видел его у пояса отца и часто слышал от матери, что  он  может  разрубить
любой камень.
     "Сейчас я проверю, правда ли это", - подумал юноша  и  изо  всех  сил
ткнул острием меча в  гранитную  плиту,  отделявшую  его  от  Сигмунда.  К
удивлению Синфиотли, чудесный клинок пробил ее насквозь, словно  она  была
из мягкого дерева, и чуть было не поранил товарища по несчастью.
     Услышав скрежет стали  о  камень,  Сигмунд  ощупью  нашел  в  темноте
торчавшее из плиты лезвие и сразу понял, что они спасены.  Работая  мечем,
как пилою, оба богатыря в несколько минут разрезали преграду,  которая  их
разделяла, и бросились друг другу в объятия.
     - Дорогой отец! - воскликнул Синфиотли, прижимаясь к груди  Сигмунда.
- Позволь мне отныне называть тебя так, потому  что  другого  отца,  кроме
тебя, мне не нужно!
     - Охотно позволяю, сын мой, - отвечал Сигмунд,  -  но  давай  сначала
подумаем, как нам отсюда выбраться, чтобы камни, которые лежат у  нас  над
нашими головами, не раздавили нас.
     Он взял из руки Синфиотли свой меч и, подойдя к одной  из  стен  ямы,
осторожно разрезал им с двух сторон крайнее из бревен. Оно с треском упало
на землю. Сигмунд прислушался, но все вокруг было тихо. Тогда он  принялся
долбить мечем лежавшие над прорубленным им отверстием  камни.  Их  обломки
градом посыпались вниз. Оба богатыря укладывали их ровным слоем на дно ямы
и, становясь на них, поднимались все выше и выше. Постепенно они  достигли
верхнего края приготовленной для них могилы и, раскидав  руками  последние
преграждавшие им путь камни, вышли на волю.
     Была уже ночь, и на небе ярко сверкали звезды. Сигмунд долго  смотрел
на лежавший перед ним королевский замок, в котором, как видно,  все  давно
уже спали, а потом повернулся к Синфиотли.
     - Пойдем, - решительно сказал  он.  -  Там,  где  не  помогла  сталь,
поможет огонь.
     Юноша понял замысел своего названого отца, и его глаза сверкнули. Оба
направились в лес и стали поспешно собирать  хворост.  Охапку  за  охапкой
носили они его к замку и укладывали вокруг  стен,  не  оставляя  ни  одной
свободной щели, ни одного прохода.
     Удовлетворенный  своей  местью,  Сиггейр  спокойно  спал,  когда  его
разбудил внезапный шум и грохот. Весь замок  был  в  огне.  Длинные  языки
пламени лизали сухие сосновые бревна, из которых были сложены его стены, и
поднимались багровым венцом над черепичной  крышей.  Застигнутые  врасплох
гаутландцы, наталкиваясь  друг  на  друга  и  потеряв  голову  от  страха,
метались по двору. Некоторым из них удалось проскочить  сквозь  огонь,  но
тут их настигал меч Сигмунда.
     - Сиггейр, Сиггейр! - кричал франкский богатырь, и его громовой голос
доносился до самых отдаленных уголков замка. - Ты слышишь  меня,  Сиггейр?
Это я, Сигмунд, тот самый Сигмунд, которого тебе так хотелось погубить,  и
мой меч снова в моих руках. Пришел час расплаты, Сиггейр!
     Король Гаутланда, который задыхался от дыма, страха и злобы,  отвечал
ему лишь глухим проклятием.
     Вдруг из густой завесы огня и  дыма,  которая  все  больше  и  больше
окутывала замок, появилась женщина.
     - Наконец-то, сестра! - радостно  воскликнул  Сигмунд,  узнав  в  ней
Сигни. - А я уж боялся, что ты не успеешь спастись.
     - Я пришла проститься с  тобой  и  Синфиотли,  -  отвечала  Сигни.  -
Спасибо тебе, что ты отомстил Сиггейру за смерть наших  родных.  Прощай  и
постарайся заменить Синфиотли отца. Это моя последнее просьба к тебе.
     - Как! - вскричал Сигмунд,  догадываясь  о  намерении  сестры.  -  Ты
хочешь оставить нас и погибнуть вместе с нашим врагом?
     - Никто из моей семьи не может сказать, что я мало сделала для  того,
чтобы отомстить Сиггейр, - гордо отвечала Сигни. - Этой мести я  посвятила
всю свою жизнь, ради нее я пожертвовала двумя старшими сыновьями,  которые
сейчас гибнут в пламени, зажженном тобой. Но долг есть долг, и жена должна
до конца следовать за мужем, как сказал мне на прощание мой  отец...  хотя
бы этого мужа ей дали насильно, - добавила она тихо.
     Сигни порывисто поцеловала брата и сына и, прежде чем  те  успели  ее
удержать, снова исчезла в огне.
     Долго, до самого восхода, горел замок Сиггейра. Уже давно рухнули его
стены, похоронив под собой короля Гаутланда и всю его семью, а Сигмунд все
стоял и стоял и в суровом молчании смотрел туда, где в последний раз видел
Сигни, достойную дочь своего благородного отца.



                            СМЕРТЬ СИНФИОТЛИ

     Сигмунд не пожелал более оставаться  в  Гаутланде  и  принял  решение
вернуться домой на родину. Его сопровождали  Синфиотли,  а  так  же  много
дружинников Сиггейра,  которые  после  смерти  своего  короля  перешли  на
сторону победителей. Успешно борясь с ветром и непогодой, корабли Сигмунда
вскоре достигли того места, откуда больше двадцати лет назад отправился  в
свое последнее  плавание  старый  Вольсунг.  Сигмунд  уже  приказал  своей
дружине высаживаться на берег, когда к нему обратился Синфиотли.
     - Дорогой отец! - сказал он. - Я в первый раз плаваю по  морю  и  еще
ничего не видел кроме своего замка да леса, в котором мы жили. Позволь мне
взять несколько кораблей и часть твоей дружины и постранствовать по свету.
Может быть, со временем и я сумею прославиться и стану  таким  же  героем,
как ты и мой покойный дед.
     Как ни грустно было Сигмунду расставаться со своим приемным сыном, он
понял желание юноши и без спора согласился исполнить его просьбу.
     Синфиотли взял десять кораблей и несколько сот воинов, распрощался  с
Сигмундом и поплыл на запад, а Сигмунд с остальной дружиной  высадился  на
берег и двинулся вглубь страны. По дороге он узнал, что над франками давно
уже царствует другой король и  стал  готовиться  к  сражению,  но  ему  не
пришлось  прибегнуть  к  оружию.  Узнав  о   возвращении   старшего   сына
знаменитого Вольсунга, дружины франков перешли на его сторону,  да  и  сам
новый король даже и не думал сопротивляться. Сигмунд изгнал его из  страны
и снова поселился в замке своего отца под сенью  дуба  валькирий.  Так  он
прожил несколько лет, мудро и умело правя  страной  и  забыв  на  время  о
войнах и сражениях. Но вскоре одиночество ему наскучило. В  это  время  до
него дошла весть о том, что у датского короля есть красавица дочь по имени
Боргхильд. Сигмунд решил  к  ней  посвататься.  Имя  короля  франков,  его
богатство и древность рода были известны повсюду, и он не встретил отказа.
Уже  через  несколько  месяцев  состоялась  свадьба,  и  в  старом   замке
Вольсунгов появилась хозяйка.
     Сигмунд прожил с женой около года, когда из Дании прискакал  гонец  с
известием, что отец Боргхильд скончался, и обоим супругам пришлось поехать
туда за наследством.
     Тем  временем  Синфиотли  продолжал  странствовать   по   свету.   Он
участвовал во многих сражениях, побывал во всех северных  странах  и  даже
забирался далеко на юг,  где  северян  за  их  украшенные  крыльями  шлемы
прозвали крылатыми шапками.
     Однажды во время одного из его путешествий корабли Синфиотли пристали
к берегу страны варнов. Варны радушно встретили  гостей  и  провели  их  к
своей королеве.
     Удивительная красота и ум  Свинты  -  так  звали  королеву  варнов  -
очаровали Синфиотли.
     День шел за днем, неделя за неделей, а он все откладывал свой  отъезд
и наконец решил, что никто, кроме Свинты, не будет его женой.  Как  раз  в
это время в страну варнов прибыл со своей дружиной брат Боргхильд, датский
королевич Роар, известный и прославленный воин. Красота Свинты  пленила  и
его, и он тоже остался у нее в гостях.
     Оба королевича с первой же минуты возненавидели друг друга.  Особенно
сердился Роар, видя, что королева варнов оказывает явное предпочтение  его
сопернику. Наконец однажды утром, когда Синфиотли  сидел  один  на  берегу
моря, Роар подошел к нему и сказал:
     - Тебе лучше уехать отсюда. Я хочу жениться на Свинте, и  горе  тому,
кто станет мне поперек дороги.
     Синфиотли поднял голову и спокойно посмотрел на него.
     - Тебе не удастся запугать меня, Роар, - ответил он, - ты  брат  жены
Сигмунда, и я не хочу с тобой ссориться, но Свинту я не уступлю, пока  она
сама меня об этом не попросит.
     - Тогда ты умрешь, - угрюмо сказал датчанин.  -  Я  не  встречал  еще
человека, который бы мог устоять против меня в честном бою.
     - Наверное, потому что до сих пор ты встречался  только  с  детьми  и
стариками, - насмешливо возразил Синфиотли.
     При этих словах вспыльчивый и горячий Роар не мол далее  сдерживаться
и, выхватив меч, бросился на Синфиотли. Тот отскочил в сторону  и  в  свою
очередь выхватил меч. Датчанин был ловок  и  силен,  он  прекрасно  владел
оружием, но его соперника обучал военному искусству сам Сигмунд. Некоторое
время Синфиотли только защищался,  а  потом  неожиданным  ударом  ошеломил
противника и, прежде тот успел опомниться, пронзил  его  мечем.  Обливаясь
кровью, Роар упал на землю и тут же умер.
     Синфиотли  не  радовался  своей  победе.  Он  знал,   что   Боргхильд
возненавидит его за смерть брата, хотя тот и вызвал его первый. Он  позвал
слуг, приказал им, чтобы Роара похоронили с честью, как королевского сына,
а потом пошел к Свинте.
     - Мы только что дрались из-за тебя с Роаром, - сказал Синфиотли, -  и
теперь он лежит мертвый. Завтра я поеду к отцу и скажу, что хочу  на  тебе
жениться.
     Молодая королева опустила голову.
     - Хорошо, - отвечала она тихо, - поезжай, я буду тебя ждать.
     Синфиотли от радости забыл о смерти Роара и о том, что тот был братом
его мачехи. Он тут же собрал свою дружину и, попрощавшись с невестой,  уже
на заре следующего дня отправился в дорогу.
     На пути в страну франгов его корабли встретились с кораблями  датских
викингов. От них он узнал, что  Сигмунд  и  Боргхильд  недавно  прибыли  в
Данию, и приказал своим гребцам плыть туда же.
     Долго и горячо обнимались Сигмунд и его названый сын  после  стольких
лет разлуки. Боргхильд тоже ласково встретила своего пасынка, но едва  она
услышала откровенный рассказ Синфиотли о его поединке  с  Роаром,  как  ее
радушие сменилось гневом.
     - И ты посмел после этого явиться в наш дом! - вскричала она, сверкая
глазами.  -  Ты  убийца  моего  брата!  Уходи  прочь,  или  я  убью   тебя
собственными руками!
     - Твой брат пал в честном бою, Боргхильд, - возразил  Сигмунд.  -  Он
сам вызвал Синфиотли, и тот не мог отказаться. Останься, сын  мой.  Я  так
хочу.
     - Ты хозяин в доме, и я покоряюсь твоей воле, -  отвечала  Боргхильд,
едва сдерживая злобу. Она встала  со  своего  места  и  хотела  выйти,  но
Сигмунд остановил ее.
     - Постой, Боргхильд, - сказал он. - По  нашему  обычаю,  за  убийство
полагается платить  выкуп.  Вместо  этого  мы  устроим  по  Роару  богатые
поминки, и твоя честь нисколько не пострадает.
     Боргхильд сделала вид,  вполне  согласна  с  мужем,  и  уже  спокойно
выслушала дальнейшие рассказы Синфиотли о его странствиях и о сватовстве к
прекрасной королеве варнов.
     Через несколько дней Сигмунд  действительно  устроил  большой  пир  в
честь Роара, на который  созвал  многочисленных  гостей.  На  пиру  был  и
Синфиотли, и при виде его гнев Боргхильд вспыхнул с новой силой.  В  самый
разгар пиршества она потихоньку вышла,  наполнила  большой  рог  медом  и,
положив в него яд, снова вернулась в зал.
     - Выпей за благополучие нашей семьи, Синфиотли! -  ласково  улыбаясь,
сказала она, подавая ему рог.
     Сердце Синфиотли почувствовало недоброе.
     - Этот мед нехорош, - сказал он.
     - Давай его сюда, сын мой! - воскликнул Сигмунд, поняв в чем дело.
     Он взял рог и осушил его одним духом.
     Боргхильд со страхом посмотрела на мужа, но на Сигмунда не действовал
ни один яд, и он продолжал как ни в чем не бывало шутить и разговаривать с
гостями.
     Неудача не заставила королеву отказаться от своего злого умысла.  Она
вышла и принесла новый рог с медом, в который снова подмешала яд.
     - Нехорошо заставлять других пить вместо себя, Синфиотли,  -  сказала
она. - Этот рог ты должен выпить сам.
     - Я бы выпил, да к меду что-то добавлено, - отвечал Синфиотли.
     Услышав это, Сигмунд усмехнулся и, взяв из рук жены рог,  осушил  его
так же как и первый.
     Разгневанная Боргхильд до боли стиснула свои пальцы.
     - Ну погоди, - прошипела она, - рано или поздно ты выпьешь то, что  я
для тебя приготовлю!
     Она подождала немного, а потом принесла Синфиотли третий рог.
     - Ты не Вольсунг, иначе ты не  был  бы  таким  трусом,  -  насмешливо
сказала она. - Почему ты не пьешь?
     - Потому что мед отравлен, - громко ответил Синфиотли.
     Но Сигмунд уже настолько  охмелел,  что  только  улыбнулся  и  сказал
заплетающимся языком:
     - Все хорошо, пей спокойно, сын мой!
     Синфиотли выпил и в тот же миг бездыханным упал на пол.
     Шум в зале смолк, гости поднялись  со  своих  мест,  но  их  опередил
Сигмунд. Весь его хмель разом прошел.  Он  осторожно  поднял  Синфиотли  и
приложил ухо к его груди. Сердце его  приемного  сына  не  билось.  Король
франков  медленно  поднял  голову  и,  будто  не  замечая  ни  гостей,  ни
побелевшую как смерть королеву, вышел из замка.
     Потеряв голову от горя, Сигмунд нес  на  руках  Синфиотли  в  поисках
места, где бы он мог  похоронить  своего  любимца.  Он  шел,  не  разбирая
дороги, все вперед и вперед, пока не очутился на берегу длинного и  узкого
морского залива. Была ночь, но светила полная луна, и в ее  свете  Сигмунд
увидел небольшую лодку, тихо скользившую по волнам.
     - Эй, лодочник! - позвал он. - Перевези меня на другой  берег,  и  ты
получишь щедрую награду!
     Лодка приблизилась. В ней сидел старик в старой широкополой  шляпе  и
синем плаще. Сигмунд сразу же узнал в незнакомце того, кто когда-то принес
ему чудесный меч.
     - Клади труп в лодку, - сказал ему старик, - и жди меня здесь - лодка
слишком мала, чтобы взять сразу двоих.
     Сигмунд послушался и положил тело Синфиотли в лодку.  Однако,  вместо
того чтобы плыть к противоположному берегу, старик  направил  ее  прямо  в
открытое море.
     - Стой, стой! - крикнул Сигмунд. - Ты не туда едешь!
     Старик, не отвечая, продолжал молча  работать  веслами,  уплывая  все
дальше и дальше.
     - Это Один, сам Один! - вдруг поняв все,  воскликнул  Сигмунд.  -  Он
увозит Синфиотли в Валгаллу!
     В этот миг неизвестно откуда набежавшее облачко на миг закрыло  луну,
а когда она снова вынырнула,  ни  старика,  ни  лодки  уже  не  было.  Они
исчезли.



                            СМЕРТЬ СИГМУНДА

     Сигмунд вернулся к себе в замок только на  рассвете.  Его  гости  уже
разошлись, а Боргхильд ушла в  свою  спальню  и  не  показывалась.  Король
франков позвал слугу и приказал ему передать королеве, что  он  желает  ее
видеть. Спустя некоторое время в пиршественную залу тихо вошла Боргхильд.
     -  Ты  хотел  со  мной  поговорить,  супруг  мой?  -  спросила   она,
нерешительно останавливаясь у порога.
     Сигмунд окинул ее мрачным взглядом.
     - Ты отравила моего названого  сына,  -  сказал  он.  -  Как  же  мне
отплатить тебе за это?
     - Синфиотли убил моего брата, - побледнев, возразила Боргхильд, - и я
ему отомстила. Неужели ты не простишь меня? Или сын твоей сестры для  тебя
дороже жены?
     Лицо Сигмунда побагровело от гнева.
     - Ты не жена мне больше! - прогремел он. - Твое  счастье,  что  я  не
убиваю женщин. Ступай прочь из моего дома, и горе тебе, если  ты  еще  раз
попадешься мне на глаза.
     Королева хотела что-то сказать, но,  взглянув  в  глаза  мужа,  молча
опустила голову и вышла. Больше Сигмунд ее не видел, а  несколько  месяцев
спустя, когда он уже вернулся к себе на родину, до него дошла  весть,  что
Боргхильд не вынесла позора и вскоре после своего изгнания умерла.
     Король франков вновь остался один. Шли годы.  Его  волосы  постепенно
белели, он чувствовал, что начинает стареть, и, как его дед Рерир,  боялся
умереть, не оставив по себе наследника.
     Многие советовали ему еще раз жениться, но он все колебался, не зная,
на ком остановить свой выбор.
     Но вот как-то раз  Сигмунд  посетил  своего  соседа,  старого  короля
Гилими, у которого была взрослая дочь по имени Гьердис. Умная и  красивая,
она отличалась спокойным и кротким нравом и с первого же  взгляда  пленила
сердце короля франков.  С  каждым  днем  Сигмунд  все  сильней  и  сильней
влюблялся в девушку, хотя и боялся, что он слишком стар  для  того,  чтобы
стать ее мужем. Наконец он все же решил посвататься, но в это же  время  к
Гьердис посватался и другой жених, не менее богатый  и  знатный.  Это  был
король Линги из рода Гундингов. Старый Гилими долго не мог решить, что ему
делать. Он боялся, что, выбрать одного из соперников, он обидит другого  и
тем самым наживет себе смертельного врага. Тогда, поразмыслив  хорошенько,
он пригласил к себе Сигмунда и Линги, приказал позвать Гьердис и сказал:
     - Дочь моя, перед тобой два могущественных короля, которые  просят  у
меня твоей руки. Один из них, Сигмунд, уже стар, но его  слава  гремит  по
всему свету; другой, Линги, молод и красив собой. Он не так знаменит,  как
Сигмунд, но впереди у него еще целая жизнь. Мне трудно решить, кто из  них
лучше, а поэтому выбирай сама. Кого из них ты назовешь, тот и будет  твоим
мужем.
     Гьердис, подумав немного, ответила:
     - Седины человека говорят о его уме, а для меня ум дороже  молодости.
Имя Сигмунда известно повсюду, он честен и храбр, и я выбираю его.
     - Ты и вправду разумна, дочь моя,  -  произнес  старый  Гилими.  -  Я
одобряю твой выбор и охотно отдаю тебя Сигмунду.
     Король франков не ожидал, что Гьердис назовет его имя, и сам не верил
своему счастью. Зато гордый Линги почувствовал себя оскорбленным и тут  же
уехал, поклявшись, что рано или поздно дочь Гилими будет принадлежать ему.
     Еще ни одна свадьба не праздновалась так долго и весело, как  свадьба
Сигмунда и Гьердис. Некоторое время оба супруга жили  в  замке  Гилими,  а
потом переехали в страну франков, куда за ними последовал и старый король,
не пожелавший расставаться с любимой дочерью.
     После долгих лет скорби и  одиночества  для  Сигмунда  вновь  настали
счастливые дни, а вскоре его ждала еще большая  радость:  Гьердис  сказала
ему, что у нее скоро родится ребенок. Радовался этому и старый Гилими.
     Как-то майским утром Сигмунд и его тесть собрались на охоту на охоту.
В сопровождении нескольких дружинников оба короля рысью выехали за  ворота
замка. Вдруг какой-то человек в крестьянской одежде, запыленной от  долгой
ходьбы, подбежал  к  Сигмунду  и,  указывая  рукой  на  север,  воскликнул
прерывающимся от усталости и волнения голосом:
     - Там... Там  король  Линги...  Он  высадился  на  берегу  со  своими
братьями и несметным войском и идет сюда.
     - Спасибо тебе, - ответил Сигмунд и повернулся к  Гилими.  -  Собирай
наши дружины, отец, - сказал он, - а я пойду к Гьердис.
     Он соскочил с лошади  и  вбежал  в  замок.  У  порога  его  встретила
встревоженная королева.
     - Что случилось? - спросила она.
     - Линги вместе с своей  родней  высадился  на  берегу  и  грозит  нам
войной, - отвечал Сигмунд. - Я надеюсь, что нам удастся  его  разбить,  но
лучше будет, если ты все же спрячешься. Ты знаешь большой  лес  неподалеку
от моря. Возьми свою служанку и все самое ценное из моих сокровищ и ступай
туда. Если мы победим, я буду знать, где тебя найти, если же нет, то тогда
отправляйся к кому-нибудь из наших соседей и проси у него приюта и помощи.
     Гьердис пыталась возразить, но Сигмунд остановил ее.
     - Ты теперь не одна, - сказал он, - и должна думать о  нашем  будущем
ребенке.
     И в последний раз крепко обняв жену, король франков быстро вышел.
     Принесенная крестьянином весть была не совсем верной. Высадившись  на
берег, Линги не стал продвигаться вглубь страны, а остался на месте, чтобы
дать своим людям отдохнуть после  долгого  плавания.  Здесь  его  и  нашли
Сигмунд и Гилими с их дружинами.
     Битва началась около полудня и продолжалась до самого захода  солнца.
Франков было значительно меньше, но их могучий  вождь  со  своим  мечем  в
руках один стоил многих. Ни один щит, ни один шлем не могли выдержать  его
ударов. Он не считал поверженных  им  врагов,  да  и  их  невозможно  было
сосчитать. К концу дня руки Сигмунда были в крови по самые плечи.  Потеряв
надежду победить короля франков в  рукопашном  бою,  неприятельские  воины
стали метать в него свои  копья,  но  две  невидимые  человеческому  глазу
валькирии, летая вокруг богатыря, ловили их на лету и  бросали  на  землю.
Дружина Линги, не выдержав натиска франков, стала  отступать  к  кораблям.
Сигмунд яростно преследовал их, как вдруг перед  ним,  как  из-под  земли,
вырос одноглазый старик в широкополой шляпе и синем плаще. На этот  раз  в
его руке был не меч, а длинное, покрытое диковинной резьбой копье,  острие
которого ярко сверкало в лучах солнца.
     - Настал твой час, Сигмунд! - сказал он.
     Король франков только усмехнулся и изо всех сил ударил его мечем.  Но
чудесный клинок Сигмунда, встретившись с копьем старика, вдруг  разлетелся
пополам. В тот же миг охранявшие богатыря валькирии улетели прочь, и  одно
из брошенных врагами копий тяжело  ранило  его  в  грудь.  Кровавый  туман
застлал глаза Сигмунда, и он, теряя сознание, упал прямо  под  ноги  своих
врагов.
     И тут же  ряды  франков  дрогнули.  Напрасно  старый  Гилими  пытался
повести их в бой. Охваченная  паническим  страхом,  дружина  обратилась  в
бегство, а вскоре и сам Гилими с разрубленной головой уже  лежал  на  поле
невдалеке от своего зятя.
     Увидев, что франки бегут, Линги с братьями устремился к  королевскому
замку. Он спешил взять в плен Гьердис,  а  заодно  и  сокровища  Сигмунда,
которые манили его не меньше, чем прекрасная дочь Гилими. Однако его ждало
разочарование - он нашел пустым.  Молодая  королева,  а  вместе  с  нею  и
значительная часть сокровищ бесследно исчезли.  Взбешенный  Линги  призвал
воинов и приказал им тотчас же разыскать и привести беглянку, но наступила
ночь, и они были вынуждены отложить свои поиски до утра.
     Повинуясь воле Сигмунда, королева и ее служанка еще до полудня ушли в
лес. Там они зарыли принесенные ими драгоценности, а  сами  пробрались  на
опушку, откуда им было видно все сражение.
     Когда Гьердис увидела, что ее муж упал, она вскрикнула и, вскочив  на
ноги, хотела бежать к нему, но верная служанка удержала ее за платье.
     - Остановись, госпожа! - воскликнула она. - Короля ты не  спасешь,  а
только погубишь себя и свое дитя.
     Молодая женщина вспомнила  наказ  Сигмунда  и  послушно  осталась  на
месте, но едва последний неприятельский воин покинул  поле  сражения,  как
она уже была около своего мужа. Опустившись на колени,  Гьердис  осторожно
приподняло руками голову  Сигмунда  и  прижалась  щекой  к  его  широкому,
испещренному морщинами лбу. Король франков вздохнул и открыл глаза.
     - Ты жив, ты только ранен! - радостно воскликнула королева.  -  Скажи
скорей, чем я могу тебе помочь?
     - Мне не нужно ничей помощи, Гьердис, - тихо ответил Сигмунд. -  Есть
люди, которые до конца цепляются за  жизнь,  но  я  сделал  все,  что  мне
предназначено, и теперь хочу умереть. Ты  видишь  сама,  что  счастье  мне
изменило: мой чудесный меч сломался пополам. Сам  Один  призывает  меня  к
себе, и я должен идти.
     - Нет, останься со мной, мой дорогой! - обливаясь слезами,  вскричала
Гьердис. - Кто же отомстит Линги за твою смерть?
     - Это сделает другой: тот, кого ты носишь под своим сердцем, - сказал
Сигмунд. - Глаза умирающего смотрят в будущее,  боги  открывают  ему  свои
предначертания. Запомни же мои слова: наш сын  станет  богатырем,  равного
которому не было и не будет на свете. Он совершит бессмертные  подвиги,  и
скальды воспоют его имя в своих песнях.
     Он с трудом приподнялся и, взяв обе половинки своего  меча,  протянул
их Гьердис.
     - Возьми их, - слабеющим голосом  произнес  он.  -  Придет  время,  и
искусный мастер сделает из них меч для моего  сына.  Он  будет  называться
"Грам" и принесет смерть тому, кто сделал тебя вдовой.
     - Скажи, как мне назвать сына? - спросила Гьердис, наклоняясь  к  его
губам.
     - Назови его Сигурд, - прошептал король франков.
     Его голова бессильно поникла, и глаза закрылись навсегда.
     Молодой месяц уже давно  скрылся  за  лесом,  короткая  майская  ночь
подходила к концу, а королева по-прежнему сжимала в руках голову мужа и не
шевелилась.
     Вдруг к ней подбежала служанка.
     - Госпожа, - сказала она, - бежим в лес!  В  море  показались  чьи-то
корабли!
     Гьердис   подняла   голову.   Далеко-далеко,   там,   где    бледное,
предрассветное небо сливалось с еще темной полоской моря,  были  отчетливо
видны паруса многочисленных кораблей. Она  наклонилась,  в  последний  раз
крепко поцеловала побелевшее лицо Сигмунда и тихо опустила его  голову  на
землю.
     - Пойдем, - сказала она вставая.
     Обе женщины снова ушли в лес и спрятались в кустах на опушке.
     С первыми лучами солнца с моря подул свежий  ветер.  Воспользовавшись
этим, неизвестные корабли подошли к самому берегу. Королева и ее  служанка
увидели, как на  берег  высадились  рослые  воины  в  высоких,  украшенных
лебедиными крыльями шлемах.
     Это викинги, - прошептала Гьердис и, помолчав немного добавила:  -  Я
пойду к ним и попрошу их помощи. Здесь мы все  равно  умрем  с  голоду,  а
попасться в руки Линги для меня хуже смерти.
     - Подожди, госпожа, -  возразила  служанка.  -  Давай  лучше  сначала
поменяемся платьями и захватим из леса драгоценности. Кто знает, что может
случиться.
     - А ты не боишься, что они уедут раньше, чем мы вернемся? -  спросила
Гьердис.
     - Нет, госпожа: ветер дует с моря, и, если они захотят  отчалить,  им
придется здорово поработать веслами. Наверное, они  подождут,  пока  ветер
переменится.
     Служанка была права. Когда обе женщины, переодевшись и с трудом  неся
мешки с золотом,  вышли  из  лесу,  викинги  все  еще  были  на  берегу  и
осматривали трупы убитых воинов. Среди приехавших особенно выделялся один.
Он был выше всех ростом, и его  вооружение  было  намного  богаче,  чем  у
остальных.  Увидев  служанку,   переодетую   в   королевское   платье,   и
сопровождавшую ее Гьердис,  он  сделал  несколько  шагов  им  навстречу  и
сказал:
     - Я король Альф, сын Хиальпрека Датского. Мы возвращались  на  родину
из дальнего плавания и решили немного отдохнуть  на  вашем  берегу.  Но  я
вижу, - тут он показал рукой на покрытый многочисленными трупами берег,  -
что здесь не далее чем вчера произошла жестокая битва.
     - Ты прав, - ответила служанка, стараясь подражать  голосу  и  осанку
своей госпожи. - Вчера здесь действительно была битва, и в  этой  битве  я
потеряла своего мужа, Сигмунда, сына  Вольсунга.  Мой  замок  и  вся  наша
стража захвачены королем Линги из рода Гундингов,  и  теперь  я  вынуждена
просить твоей помощи.
     - И ты ее получишь! - воскликнул король Альф.  -  Я  много  слышал  о
Сигмунде и знаю, что это был великий король  и  славный  воин.  Но  ты  не
сказала мне свое имя.
     - Меня зовут Гьердис. Я дочь короля Гилими, который тоже пал  в  этом
сражении, - отвечала мнимая королева.
     - Мы  похороним  их  обоих  с  подобающими  почестями!  -  воскликнул
датчанин. - А ты вместе со своей служанкой ступай на мой корабль. Там  вал
накормят и напоят, и вы сможете спокойно отдохнуть.
     Гьердис и ее служанка направились к  кораблям,  а  датский  король  с
удивлением посмотрел им вслед. От зоркого взгляда Альфа не  укрылось,  что
та, которая выдавала  себя  за  королеву,  ступала  тяжело,  как  человек,
привыкший много работать, и была далеко не так красива, как ее служанка.
     Вскоре пламя огромного погребального костра, который развели викинги,
поглотило трупы короля франков и его тестя.
     Все разошлись по своим кораблям. Ветер уже переменился, и суда датчан
легко заскользили по волнам по направлению к берегам своей родины.
     Во время плавания Альф внимательно разглядывал  обоих  женщин  и  все
больше и больше убеждался в том, что его обманывают. Наконец  он  отвел  в
сторону мнимую королеву и спросил:
     - Скажи-ка мне, Гьердис, дочь Гилими и супруга славного Сигмунда, как
ты узнавала в длинные зимние ночи, что уже утро и тебе пора вставать?
     - О, - рассмеялась та, - проспать я никак не  могла:  отец  или  мать
задолго до рассвета будили меня хорошим пинком в бок.
     -  Странные  привычки  имели  твои  родители,  королева  франков,   -
прошептал про себя Альф. - Подожди меня здесь, - добавил он громко, а  сам
пошел к Гьердис.
     - Скажи мне, служанка, - повторил он свой вопрос, - как ты узнавала в
длинные зимние ночи, что настало уже утро  и  тебе  пора  вставать,  чтобы
прислуживать своей госпоже?
     - Мой отец подарил мне золотое кольцо, которое я носила на пальце,  -
ответила Гьердис. -  К  утру  кольцо  становилось  холоднее,  и  по  этому
признаку я знала, что пора вставать.
     - Ну и богата же ваша страна, если даже служанки у вас носят  золотые
кольца! - рассмеялся датчанин. - А теперь скажи мне, королева,  почему  ты
задумала меня обмануть?
     Гьердис сначала испугалась, а потом честно призналась Альфу, что она,
не зная, как ее примут викинги, послушалась совета служанки и обменялась с
ней платьем.
     - Не бойся ничего, - сказал молодой  король,  -  ты  будешь  почетной
гостьей в доме моего отца, и твой будущий  ребенок  станет  ему  таким  же
внуком или такой же внучкой, как дети его детей.
     Гьердис молча опустила  голову:  ей  вспомнились  предсмертные  слова
мужа.
     - Это будет мальчик, - прошептала она  наконец.  -  И  я  назову  его
Сигурд.



                             ЮНОСТЬ СИГУРДА

     Король Альф не обманул Гьердис. Его отец, Хиальпрек Датский,  радушно
принял вдову знаменитого Сигмунда. Он поселил ее в своем  замке,  приказав
слугам оказывать ей королевские почести и позаботиться о том, чтобы она ни
в чем  не  нуждалась.  Когда  же  спустя  несколько  месяцев  предсказание
покойного вождя франков сбылось и у Гьердис  родился  сын,  старый  король
попросил ее принести ребенка к нему и долго любовался маленьким крепышом с
голубыми глазами, нежным, красивым личиком и белокурыми  локонами.  Узнав,
что  молодая  женщина  назвала  мальчика  Сигурдом,   Хиальпрек   довольно
усмехнувшись, в свою густую, начинающую седеть бороду.
     - Это хорошее имя, - сказал  он.  -  Оно  происходит  от  двух  слов:
"побеждать" и "защищать". Тот, кто его носит,  должен  со  временем  стать
верным защитником своей страны и победами над врагом  охранять  ее  мир  и
спокойствие. Твоему сыну предстоит славное будущее.
     С этого дня маленького Сигурда часто  приносили  к  Хиальпрек,  и  он
постепенно привязался к доброму старику не меньше чем к родной матери.
     Мальчик рос удивительно быстро. В  три  года  он  был  уже  ростом  с
шестилетнего, когда же ему исполнилось восемь лет, многие принимали его за
взрослого юношу. Тогда его дед,  как  он  называл  Хиальпрек,  решил,  что
настала пора его учить.
     В замке датского короля уже  много  лет  жил  гном  Регин,  маленький
горбун с длинной черной бородой и  крохотными  хитрыми  глазками.  Он  был
угрюм и молчалив, а порой злобен. Но  старый  король  ценил  его  обширные
познания во всех науках  и  за  то  редкостное  искусство,  с  которым  он
изготовлял  оружие  и  всевозможные  украшения  из   серебра,   золота   и
драгоценных  камней.  Ему-то  и  поручил  Хиальпрек   воспитывать   своего
названого внука, и Регин с обычным усердием принялся за новую работу.
     Сигурд оказался способным учеником, и спустя  несколько  лет  он  уже
знал все, что надлежало знать королевскому сыну.  Юноша  научился  читать,
писать, ездить верхом, владеть оружием и играть во всевозможные  игры.  Он
выучил так же языки всех соседних народов и постиг искусство мореплавания.
Предсказания Сигмунда продолжали сбываться. В свои пятнадцать  лет  Сигурд
был на голову выше самого рослого воина, а его  могучие  плечи  и  широкая
грудь  говорили  об  исполинской  силе.  Занимаясь  с  юношей,  Регин  был
по-прежнему замкнут и молчалив,  но  чем  старше  становился  Сигурд,  тем
внимательнее приглядывался к нему хитрый гном, словно  одолеваемый  тайной
думой.
     - Послушай, - сказал он однажды своему воспитаннику, когда они вдвоем
сидели во дворе королевского замка, - неужели тебе не стыдно так жить?  Ты
молод и знатен, твой отец был великий  король,  а  здесь  тебя  держат  на
положении слуги.
     Сигурд широко раскрыл глаза.
     - На положении слуги? - повторил он удивленно. - Почему? Разве король
Хиальпрек мне в чем-то отказывает, разве он относится ко мне хуже,  чем  к
другим своим внукам?
     Регин рассмеялся.
     - У нашего короля недурно живется и простым слугам, - сказал он. - Но
я вижу, что все внуки Хиальпрека уже давно имеют собственных лошадей, а ты
ходишь пешком, как какой-нибудь пастух.
     - Я никогда не просил деда подарить мне коня, - возразил Сигурд. -  А
если попрошу, то будь уверен, что он мне в этом не откажет.
     С этими словами юноша поднялся  и,  оставив  Регина,  пошел  прямо  к
Хиальпреку.
     - Дедушка, - сказал он ему, - я уже вырос и хочу  иметь  собственного
коня.
     - Я давно жду от тебя этой просьбы, -  добродушно  улыбаясь,  ответил
старый король, - и рад ее исполнить. Ты знаешь,  где  пасется  мой  табун,
ступай к нему и выбери себе любого коня, который придется тебе по нраву.
     Обрадованный юноша горячо  обнял  старика  и,  не  медля  ни  минуты,
поспешил на пастбище.
     Табун Хиальпрек пасся на опушке небольшого леса, в двух часах  ходьбы
замка. В нем было несколько сот коней разной породы и масти. Сигурд  долго
в нерешительности ходил вокруг, не зная, на каком из них  остановить  свой
выбор, когда вдруг увидел одноглазого старика в широкополой шляпе и  синем
плаще, который шел к нему из лесу.
     - Что ты тут делаешь и могу ли я тебя помочь?  -  приветливо  спросил
его незнакомец, подходя ближе.
     - Я выбираю себе коня, -  ответил  юноша.  -  Ты  стар  и  опытен  и,
конечно, знаешь больше меня. Скажи, как мне узнать, какая из этих  лошадей
самая лучшая?
     - Это не так трудно сделать, - сказал одноглазый старик. - Поблизости
отсюда течет река. Загони в нее табун и возьми  себе  того  коня,  который
первым переплывет на другую сторону.
     - Спасибо за совет! - радостно воскликнул Сигурд. Подожди меня здесь,
и ты увидишь, что я не останусь неблагодарным.
     И он, громко  свистя  и  размахивая  руками,  погнал  табун  к  реке.
Испуганные лошади сгоряча бросились прямо в воду, но  поток  был  широк  и
стремителен, и все вскоре повернули обратно к берегу, кроме одного  серого
жеребца,  который,  легко   борясь   с   волнами,   быстро   переплыл   на
противоположный берег, а потом, видя, что никакой  опасности  больше  нет,
так же легко вернулся назад.
     - Вот тебе и конь! - рассмеялся одноглазый старик, который неотступно
следовал за юношей. - Да к тому же лучший конь на  земле,  потому  что,  -
добавил он тихо, - он происходит от самого Слейпнира, восьминогого жеребца
Одина.
     Сигурд обернулся, чтобы спросить незнакомца  о  том,  откуда  он  это
знает, но, к своему изумлению, увидел, что тот уже исчез. Догадавшись, что
с ним разговаривал не простой смертный, он решил никому не рассказывать об
этой встрече и, позвав конюхов,  приказал  им  отвести  серого  жеребца  в
замок.
     Таинственный незнакомец не обманул юношу. Грани - так  Сигурд  назвал
своего скакуна - был быстрее и выносливее любой другой лошади.  Он  быстро
привык к юноше и на каждое ласковое слово  молодого  хозяина  отвечал  ему
радостным  ржанием.  Регин  с  довольной  усмешкой  смотрел,  как   Сигурд
объезжает Грани, но, когда тот спросил его, похож ли он теперь  на  слугу,
карлик лукаво прищурился и ответил:
     - Одна лошадь еще не делает воина.  Настоящего  воина  делает  добрый
меч.
     - Ну, так выкуй мне его, - сказал Сигурд. - Ты искусный мастер, и для
тебя это не составит труда.
     - Сковать меч для такой руки, как твоя, - большой труд, и  для  этого
действительно требуется настоящее искусство, - отвечал Регин. - Но у  тебя
будет меч, и такой, лучше которого я не делал.
     Они пошли к кузнецу, и гном тут же принялся за  работу.  Несмотря  на
маленький рост, он был силен и крепок и, как перышком, размахивал огромным
молотом. Сигурд видел много мечей, изготовленных Регином, но на  этот  раз
гном превзошел самого себя, и скованный им клинок был намного острее  всех
тех, которые он делал раньше.
     - Ты доволен? - гордо спросил он юношу, внимательно разглядывая  свою
работу.
     - Не знаю, - ответил тот. - По красоте твой меч не знает себе равных.
Но посмотрим, каков он будет в деле.
     Он размахнулся и изо всех сил ударил  мечем  по  железной  наковальне
Регина. Клинок со звоном разлетелся на куски. Сигурд  молча  посмотрел  на
гнома.
     - Да, ты силен, - покачав головой, сказал Регин. - Ты  даже  сильнее,
чем я думал. Придется мне теперь показать все мое искусство.
     И он снова застучал  молотом.  Его  второй  меч  оказался  еще  лучше
первого, но и он сломался пополам при первом же ударе Сигурда.
     - Тебе придется искать себе другого мастера, - ворчливо сказал Регин,
гася горн и сердито швыряя в сторону молот и клещи. - Для твоей  руки  мои
мечи не годятся.
     Разочарованный юноше вышел из кузницы  и  печально  побрел  в  замок.
Гьердис сразу заметила  сдвинутые  брови  сына  и  спросила  его,  чем  он
озабочен.
     - Ах, - ответил Сигурд, - мне говорят, что тот не воин,  у  кого  нет
доброго меча, а они все ломаются в моих руках, как деревянные.
     Гьердис улыбнулась.
     - Подожди немного, - сказала она. -  Может  быть,  мне  удастся  тебе
помочь.
     Бывшая королева франков прошла в свою опочивальню и вскоре  вернулась
назад, держа в руках две половинки меча.
     - Это клинок твоего отца, Сигмунда, - сказала  Гьердис,  -  сам  Один
подарил ему этот меч.  Он  же  и  сломал  его  своим  копьем.  Отнеси  эти
половинки Регину и попроси его сковать их вместе. Тогда у тебя будет  меч,
который выдержит любые удары. Но помни, Сигурд, - добавила  она,  -  отец,
умирая, ожидал, что ты отомстишь за него этим мечем. Этого жду от  тебя  и
я.
     Глаза Сигурда заблестели. Он прижал к груди предсмертный дар Сигмунда
и побежал обратно к Регину. Гном долго с удивлением  рассматривал  обломки
замечательного клинка, потом, не говоря ни  слова,  опять  разжег  горн  и
поднял с земли брошенные инструменты. Сигурд также  молчал,  с  замиранием
сердца ожидая конца работы Регина. Все так же молча взял он немного  позже
из рук гнома готовый меч, ударил им по железной наковальне  и  только  тут
вскрикнул от восторга: чудесный подарок отца богов  рассек  ее  пополам  и
глубоко ушел в землю.
     - Я радуюсь за тебя, Сигурд!  -  воскликнул  гном,  маленькие  глазки
которого горели как угольки. - Но еще больше я  радуюсь  за  себя.  Пришло
время раскрыть тебе мою тайну.
     - Твою тайну, Регин? - переспросил юноша.
     - Да, Сигурд, великую тайну, - отвечал карлик, улыбаясь  и  показывая
свои острые белые зубы. - Но скажи мне сначала, любишь ли ты золото?
     - А за что мне его любить? - в свою очередь спросил Сигурд. - Я знаю,
что у моего отца было много золота. Мать спасла его, и оно хранится у деда
Хиальпрека, но я сам никогда не держал его в своих руках.  У  меня  и  без
золота есть все, что мне нужно!
     Регин засмеялся тонким, пронзительным смехом.
     - Ты еще не знаешь власти золота, - сказал он.  -  А  оно  всемогуще.
Золото может сделать тебя величайшим королем  в  мире  вернее,  чем  самый
лучший меч.
     - Ты ошибаешься, Регин! - возразил Сигурд. - Я слышал не раз от своей
матери, что когда-то мой отец отказался продать королю Гаутланда  Сиггейру
вот этот самый меч за все его золото, а потом одержал над ним победу.
     Гном покачал головой.
     - Я тоже слышал об этом, - сказал он. - Но Сиггейр был далеко не  так
богат, как ты думаешь. Выслушай мою историю, и тогда ты узнаешь, что такое
настоящее богатство и как его найти.  Только  сначала  сядем,  потому  что
рассказывать я буду долго, очень долго!



                              РАССКАЗ РЕГИНА

     - Я родился очень и очень давно, - начал Регин свой рассказ, -  много
веков назад. Не удивляйся: гномы живут долго, и я уже не  могу  сосчитать,
сколько поколений людей прошло с тех пор перед моими  глазами.  Мой  отец,
богатый крестьянин Грейдмар, имел трех сыновей. Я  был  вторым,  Фафнир  -
старшим, а Отр - младшим. Мои братья были намного выше и красивее меня,  а
кроме того, они, как и отец, умели колдовать и  превращаться  в  различных
зверей и птиц, но мы жили дружно и счастливо, ни в чем не нуждались  и  не
мечтали о лучшем. Возле нашего дома текла большая река, и, в то время  как
мы с Фафниром ходили на охоту, или работали в поле, Отр,  превратившись  в
огромную выдру (с тех пор в наших краях выдру называют не иначе, как Отр),
ловил в ней рыбу. Это его и погубило.
     Случилось, что три бога - Один, Генир и Локи, - странствуя  по  свету
(в те времена боги спускались на землю куда  чаще,  чем  теперь),  шли  по
течению этой реки и, увидев моего брата с лососем в зубах, приняли его  за
настоящую выдру. Локи взял камень, осторожно подкрался  к  Отру  и  метким
броском убил его на месте. Захватив с собой добычу, Асы подошли  к  нашему
дому и попросились переночевать. В награду за  это  они  предложили  шкуру
убитого ими зверя.
     Кровью налились глаза  моего  отца,  когда  в  этом  звере  он  узнал
собственного сына, но он сдержал свой  гнев  и,  радушно  приняв  незваных
гостей, накормил их ужином и уложил спать.
     В тот день мы с Фафнир долго убирали сено и вернулись домой только  к
ночи.
     "Отр убит, - такими словами встретил нас отец,  едва  мы  переступили
порог своей хижины. - И вот спят его убийцы".
     Услышав это, Фафнир в ярости схватил копье Одина и замахнулся  им  на
богов, но отец удержал его руку.
     - Ты нас погубишь! - воскликнул он. - Им не суждено  пасть  от  твоей
руки, да и остальные Асы жестоко бы расправились с нами  за  это.  Давайте
лучше возьмем их в плен и заставим уплатить нам большой выкуп.
     Мы согласились и, пока боги спали, схватили их и крепко связали их по
рукам и ногам.
     Проснувшись, Асы стали требовать, чтобы мы их освободили, угрожая нам
своим гневом, но отец показал им шкуру Отра.
     - Вы убили моего сына, - сказал он,  -  и  должны  заплатить  за  его
смерть.
     - Справедливость - высший закон богов, - отвечал Один. - Мы не знали,
что эта выдра - твой сын, но ты получишь за него любой выкуп. Говори,  что
тебе надо?
     Отец задумался, потом расстелил на полу шкуру выдры, а она была очень
большая, больше, чем иная воловья, и сказал:
     - Набейте эту шкуру золотом и покройте ее им же сверху, да так, чтобы
ни одного волоска не было видно, и я отпущу вас на свободу.
     Ты удивляешься, что мой отец запросил так много? Но тогда люди делали
из золота посуду и разные инструменты, а не копили его, как теперь.
     Один спокойно выслушал слова отца и кивнул головой.
     - Я согласен, - сказал он. - Освободи одного из нас,  и  он  принесет
тебе столько золота, сколько  ты  хочешь,  но  сначала  дадим  друг  другу
клятву: мы в том, что не будем звать на помощь других богов и уплатим весь
выкуп, а ты и твои сыновья - в том, что, получив  его,  отпустите  нас  на
свободу.
     Подумав, мы решили, что  он  прав  и  скрепили  наш  уговор  обоюдной
клятвой, а на рассвете отец развязал бога огня Локи,  и  тот,  надев  свои
крылатые сандалии, помчался за выкупом.
     Больше всего золота было у гнома Андвари,  который  уже  давно  волей
одной злой норны был  превращен  в  щуку  и  плавал  в  реке  у  водопада,
носившего его имя. Там, глубоко под водой, он и хранил свои сокровища.  От
их блеска светились даже волны. И  люди  прозвали  золото  Андвари  "пламя
реки".
     Локи знал об этом и направился прямо к водопаду, однако  договориться
с хитрым гномом было не так-то просто. Тщетно бог огня кричал и звал гнома
по имени: он не показывался. Тогда рассерженный Ас зашел глубоко в воду  и
попытался поймать Андвари руками, но гном в образе щуки легко  выскользнул
из его пальцев и, высунув из воды свой узкий  и  длинный  нос,  рассмеялся
пронзительным, тонким смехом.
     - Ну погоди же! - воскликнул в гневе бог огня.
     - Он побежал к великанше Ран, грозной повелительнице морских  глубин,
и выпросил у нее ту самую сеть, которой она  увлекает  на  дно  корабли  и
собирает в свой подводный грот тела  утонувших  людей.  С  этой  сетью  он
вернулся назад к водопаду.
     Как ни ловчил, как ни  изворачивался  гном,  на  сей  раз  он  быстро
попался, и лукавый Ас с торжеством вытащил его на берег.
     - Пощади, Локи! - взмолился Андвари, тщетно пытаясь  освободиться  от
стягивающей его жабры петли. - Отпусти меня обратно в  реку,  и  я  сделаю
все, что ты хочешь.
     - Я отпущу тебя, Андвари, - отвечал бог огня, - но за это  ты  отдашь
мне все свое золото.
     - Ты получишь золото! -  воскликнул  гном.  -  Ты  получишь  все  мое
золото, клянусь тебе, но только брось меня в воду - я задыхаюсь!
     Локи исполнил его  просьбу,  и  Андвари,  облегченно  вздохнув,  стал
поспешно нырять, выбрасывая на прибрежный песок свои сокровища. Он работал
долго. Наконец, когда солнце начало склоняться к  западу,  а  перед  богом
огня вырос целый золотой холм, гном вынырнул в последний раз и заявил, что
больше у него ничего нет.
     Довольный Локи уложил золото в сеть и  уже  собирался  отправиться  в
дорогу, как вдруг увидел,  что  под  одним  из  плавников  Андвари  что-то
блеснуло.
     - Что ты там прячешь? - спросил он.
     Гном неохотно достал маленькое золотое  кольцо  и  показал  его  богу
огня.
     - Это все, что у меня осталось, -  сказал  он.  -  С  его  помощью  я
собираюсь вновь умножить мои богатства.
     Кольцо ярко сверкало в лучах солнца и  словно  манило  к  себе  Локи,
который не мог оторвать от него глаз.
     - Я беру его, - сказал он. - Ты поклялся, что  отдашь  мне  все  свое
золото, и должен сдержать клятву.
     - Смилуйся, Локи! - в ужасе закричал Андвари.  -  Неужели  тебе  мало
того, что ты уже получил?
     - Отдай мне кольцо, - неумолимо настаивал бог огня, -  или  я  отберу
его силой!
     Перепуганный гном попытался нырнуть в воду, но  Локи  успел  схватить
его одной рукой, а другой вырвал кольцо.
     - Я оставлю его у себя, - сказал он. - Сам не знаю  почему,  оно  мне
кажется лучше всех драгоценностей в мире.
     Он бросил Андвари в воду, надел кольцо на палец и, взвалив  на  плечи
сеть с золотом, тронулся в обратный путь. Не успел он,  однако,  пройти  и
десяти шагов, как гном высунулся из воды и крикнул им вслед:
     - Ты отнял у меня кольцо, последнее, что у меня оставалось. Так пусть
же отныне мое проклятие преследует тебя и  всякого  другого,  кто  к  нему
прикоснется! Пусть погибнет каждый, кто возьмет его в руки. Мои  сокровища
принесут в мир алчность и преступления, из-за них будет проливаться кровь,
но никогда - ты слышишь, - никому и никогда не доставят они счастья.
     Локи в ответ только рассмеялся и, махнув рукой, зашагал дальше.
     Наступил вечер, когда он, сгибаясь под тяжестью своей ноши, дошел  до
нашего дома. Золота было так много, что его как раз хватило на  то,  чтобы
набить им шкуру Отра и полностью закрыть ее сверху.
     Увидев это, отец развязал Асов. В этот миг Один заметил на  пальце  у
Локи кольцо Андвари.
     - Подари мне его, - попросил он. - Это кольцо  нравится  мне  больше,
чем мой Драупнир.
     Локи, вспомнив проклятие гнома,  с  недоброй  усмешкой  протянул  ему
роковое кольцо, и тут мы увидели эту  крохотную  золотую  вещицу,  которая
принесла впоследствии столько несчастий нашей семье,  а  вместе  с  нею  и
всему миру. Я не знаю, Сигурд, как и почему это случилось, но  при  первом
же взгляде на кольцо Андвари я  стал  пожирать  глазами  лежащее  на  полу
золото.  Теперь  мне  уже  показалось,  что  его  слишком  мало,  и  я   с
неудовольствием думал о предстоящем дележе с отцом и братом.
     - Ну что ж, Грейдмар, - сказал Один, - ты получил выкуп, и теперь  мы
можем идти. Отдай мне мое копье.
     Отец нахмурился, как будто жалея о данной  им  клятве,  и  ничего  не
ответил. Нагнувшись, он еще раз внимательно посмотрел, хорошо  ли  закрыта
шкура Отра. Вдруг его лицо прояснилось и глаза сверкнули.
     - Один усик выдры не закрыт! - торжествующе воскликнул  он.  -  Отдай
мне кольцо, которое принес Локи, и тогда я вас выпущу.
     Один, нахмурившись, отдал ему кольцо, и отец  поспешно  зажал  его  в
руке.
     - Вот твое копье, - сказал  он  со  вздохом.  -  За  смерть  Отра  вы
расплатились, хотя я и взял с вас слишком мало.
     Боги, не отвечая, направились к выходу, но на самом пороге Локи вдруг
остановился и злобно рассмеялся.
     - Не к добру ты взял это копье, Грейдмар, - сказал он, - оно принесет
гибель тебе и всему твоему роду.  Андвари  проклял  каждого,  кто  к  нему
прикоснется.
     И он поведал нам все, о чем я тебе рассказывал.
     - Да будет так, - торжественно произнес Один. -  И  ты,  Грейдмар,  и
твои дети, и много еще славных богатырей погибнет из-за сокровищ гнома,  и
никому не удастся ими воспользоваться.
     - Сказал бы ты это раньше, не выйти бы вам так легко из моего дома, -
проворчал отец.
     Но боги только усмехнулись и скрылись в темноте наступающей ночи.
     С этого дня, Сигурд, счастье навсегда покинуло наш дом. Мы  с  братом
требовали от отца, чтобы он поделился с нами своими сокровищами, а он стал
настолько жаден, что не хотел об этом и слышать. Наша ненависть к нему все
росла и росла, и однажды ночью, когда он спал, Фафнир  пронзил  его  своим
мечом.
     Смерть отца не принесла мне желанного золота:  его  захватил  старший
брат. С  помощью  волшебного  шлема  отца  он  превратился  в  чудовищного
дракона, и мне пришлось бежать, чтобы спасти свою жизнь, а Фафнир все  так
же, в образе дракона, стережет свои сокровища, и  не  было  еще  на  свете
богатыря, который бы осмелился вызвать его на бой.
     Но знай, Сигурд, проклятие Андвари поразило  не  только  нашу  семью.
Жажда наживы, жажда золота охватила мир. Ради богатства люди начали  вести
братоубийственные войны, они  стали  грабить,  обманывать,  нарушать  свои
клятвы. Даже боги и те вступили в кровопролитную борьбу с  добрыми  духами
Ванами, и все это ради золота, потому что уже не они, а  оно  господствует
над миром.
     Теперь ты понимаешь, Сигурд, какую власть имеет этот желтый металл. С
его помощью можно собрать  многочисленнейшие  дружины  и  завоевать  целые
страны, с его помощью можно стать могущественнейшим из земных  королей,  и
ты будешь таким королем, потому что только ты, и  только  ты  один  можешь
победить Фафнира и отнять у него сокровища Андвари. Меч,  который  я  тебе
сковал, пронзит сердце жадного дракона и отомстит за  смерть  моего  отца.
Половина сокровищ по праву будет принадлежать мне. Другая  половина  будет
твоей, Сигурд, а вместе с ней и слава, равной которой еще не было в мире.



                          СИГУРД МСТИТ ЗА ОТЦА

     Окончив свой рассказ, Регин выжидающе посмотрел на Сигурда, но юноша,
казалось, даже не думал о сокровищах  Фафнира  и,  опустив  голову,  молча
играл рукояткой своего меча.
     - Золото Андвари ждет нас, - нетерпеливо сказал наконец гном. - Когда
мы едем?
     Сигурд поднял на него глаза.
     - Я скоро поеду, Регин, - спокойно ответил он,  -  но  только  не  за
золотом. Прежде чем мстить за твоего отца, я должен отомстить за своего.
     Лицо гнома вытянулось от досады.
     - Ты хочешь плыть в страну франков и сражаться там  с  Гундингами!  -
насмешливо воскликнул он. - Но ведь у тебя нет ни дружины, ни кораблей. Уж
не хочешь ли ты один победить  войско  короля  Линги?  Послушайся  меня  и
добудь сначала сокровища моего брата. Тогда ты соберешь под  свои  знамена
сколько угодно воинов.
     - Или раньше  отправлюсь  к  своим  предкам  в  Валгаллу,  -  так  же
насмешливо возразил ему Сигурд. -  Мне  не  страшна  смерть,  но,  если  я
погибну в битве с драконом, мой отец останется неотомщенным. Нет, Регин, я
уже принял решение, и тебе не удастся меня отговорить.
     Он встал и, не слушая больше гнома,  который  что-то  сердито  ворчал
себе под нос, вышел из кузницы.
     В тот же день вечером  он  рассказал  Хиальпреку  о  своем  намерении
поехать в страну франков.
     - Ты настоящий сын своего отца,  мой  мальчик!  -  любовно  глядя  на
юношу, воскликнул старик. - И я не оставлю тебя  без  помощи.  Возьми  мои
корабли и мою дружину. Она не так многочисленна, как дружины короля  Линги
и его братьев, но зато состоит из опытных и храбрых воинов. Ты  отважен  и
честен, и я верю, что боги даруют тебе победу.
     Сигурд начал благодарить старого короля, но тот прижал его к груди  и
сказал:
     - Когда ты был еще  ребенком,  я  предсказал  тебе  славное  будущее.
Оправдай мои слова, будь достоин своего имени - лучшей благодарности мне и
не надо.
     Получив согласие Хиальпрека,  Сигурд  стал  немедленно  готовиться  к
походу. Датский король  дал  ему  около  сотни  своих  кораблей.  Узкие  и
длинные, как и все корабли викингов, они могли  идти  под  веслами  и  под
парусами. В каждом из них помещалось от двадцати до пятидесяти  воинов.  В
ожидании  отплытия  эти  корабли  были  вытащены  на  берег  и   тщательно
проконопачены, а их оснастка заменена новой. Тем  временем  молодой  вождь
отобрал воинов для своей дружины.  Все  это  были  рослые,  крепкие  люди,
прекрасно владевшие оружием и не раз принимавшие участие в самых дальних и
опасных походах. Некоторые из них побывали и на знойном юге, и у скалистых
берегов Исландии, а иные заплывали даже в страну мрака,  где  по  преданию
жили одни снежные великаны.
     Регин долго сердился на Сигурда,  но  незадолго  до  его  отъезда  он
неожиданно пришел к нему  и,  стараясь  смягчить  свой  резкий,  скрипучий
голос, спросил:
     - Скажи мне, Сигурд, что ты будешь делать, когда одержишь победу  над
Гундингами?
     Когда я одержу победу над Гундингами, - улыбнулся Сигурд, - я поеду с
тобой за сокровищами Андвари. Правда, к золоту я равнодушен, но  я  охотно
померяюсь силой с твоим братом драконом.
     - Тогда позволь и мне сопутствовать тебе в походе, - сказал Регин.  -
В бою я не много стою, но, может быть, помогу тебе добрым советом.
     - А ты не боишься, что мы сложим в этом походе свои головы? - спросил
Сигурд.
     - Я уже говорил однажды, что  никто,  кроме  тебя,  не  может  добыть
"пламень реки", - возразил Регин. - Если ты  погибнешь,  золото  для  меня
навсегда потеряно, а жить без него я не могу. Будь что  будет,  я  разделю
твою судьбу.
     - Хорошо, - рассмеялся Сигурд, который не мог понять алчности Регина.
- Если так, я согласен и беру тебя с собой.
     Через несколько дней корабли датчан были спущены на воду.  Украшенные
флагами с изображением летящих воронов и морских ястребов и прикрепленными
на носу резными фигурами медведей и волков, они вытянулись  вдоль  берега,
готовые по первому знаку молодого  вождя  пуститься  в  плавание.  На  них
разместилось несколько тысяч  воинов,  которые  должны  были  сопровождать
юношу в его походе в страну франков. Сигурд не мог взять в  поход,  но  он
все-таки нашел место для  Грани  на  "Драконе",  самом  большом  из  своих
кораблей, на котором он плыл сам вместе с Регином  и  полусотней  отборных
воинов. Гьердис и Хиальпрек пришли его провожать.  Глаза  бывшей  королевы
франков сияли: она не сомневалась в победе сына.
     - Что-то говорит мне, что нам не суждено больше увидеться, -  сказала
она. - Но тебе предстоит совершить еще много подвигов. Только не  забывай,
что ты принадлежишь к роду Вольсунгов, а они никогда  не  отступали  перед
врагом, как бы силен он не был. Прощай.
     - И помни мои слова, - добавил старый король. - Будь  достоин  своего
имени.
     Солнце уже клонилось к закату, когда  корабли  Сигурда,  подхваченные
свежим  северным   ветром,   оставили   берега   Дании.   Погода   сначала
благоприятствовала плаванию, но уже под вечер ветер  усилился,  а  к  ночи
перешел в настоящий ураган. Регин посоветовал Сигурду спустить паруса,  но
тот приказал поднять их еще выше, и легкие суда датчан как птицы понеслись
вперед.
     - Ты погубишь нас всех! - стонал гном, закрывая от страха глаза.
     - Зато мы быстрее доберемся до цели! - отвечал юноша.
     Однако к утру на море разыгралась такая буря, что даже самые отважные
и опытные воины из дружины Сигурда приуныли. Они убрали часть парусов, он,
не смотря на это, мачты корабля  гнулись,  и  казалось,  что  они  вот-вот
сломаются; совсем же спустить паруса молодой вождь не  решался  -  это  бы
сделало его корабли игрушкой волн: идти на  веслах  в  такую  погоду  было
почти невозможно.
     Неожиданно Сигурд услышал грохот еще более страшный, чем рев бури,  и
увидел прямо перед собой  высокий  утес,  о  который,  клубясь  и  пенясь,
разбивались  огромные  седые  валы.  Он  уже  собирался   повернуть   руль
"Дракона", чтобы избежать этой новой опасности, но  тут  до  него  долетел
чей-то голос, столь могучий и громкий, что он заглушил  собой  и  ветер  и
море.
     - Эй, Сигурд, не бойся и плыви ко мне!
     В тот же миг море вокруг утеса успокоилось, и "Дракон" смог подойти к
нему вплотную. На его вершине стоял одноглазый старик в широкополой  шляпе
и синем плаще, тот самый, который не так давно помог Сигурду выбрать  себе
жеребца.
     - Привет тебе, сын Сигмунда и внук Вольсунга! - сказал он. - Я  знаю,
ты едешь в страну франков. Возьми и меня с собой. Ты об этом не пожалеешь!
     - Охотно, - отвечал юноша. - Я рад, что  снова  встретился  с  тобой.
Ведь я еще не поблагодарил тебя за оказанную мне услугу.
     - Она не была последней, как не будет последней и та, которую я окажу
тебе сегодня, - отвечал старик, легко перепрыгивая с утеса на  корабль.  -
Море хочет поглотить тебя и твоих людей, но я постараюсь его успокоить.
     Он стал на носу "Дракона",  поднял  вверх  руки,  и  Сигурд  невольно
вскрикнул от изумления. Ураган тут же стих,  волны  опали,  и  поверхность
моря сделалась ровной, как зеркало. Старик продолжал  стоять  с  поднятыми
руками, и вот тучи внезапно раздвинулись и  яркие  лучи  утреннего  солнца
осветили утомленные бессонной ночью  лица  датчан  и  весело  заиграли  на
золоченых крыльях их шлемов. Незнакомец обернулся к Сигурду.
     - Ты доволен? - спросил он.
     - Да, я доволен, - отвечал тот, - но, говоря по правде,  я  предпочел
бы этому затишью небольшой ветер: под веслами мы  не  скоро  доберемся  до
берега.
     Старик улыбнулся.
     - Хорошо, я исполню твое желание, - сказал он и махнул рукой.
     Сейчас же подул ровный попутный ветер, и суда  датчан,  снова  подняв
паруса, быстро понеслись к югу.
     - Ты действительно велик и  мудр,  незнакомец,  -  сказал  пораженный
юноша. - Но вот уже второй раз ты приходишь мне на помощь, а я до сих  пор
не знаю твоего имени.
     - Зови меня Гникар, - отвечал старик. - Хотя у меня столько же  имен,
сколько на земле племен и народов. Много лет живу я на свете, и мои волосы
были уже белы, когда родился твой дед, славный Вольсунг.
     - Я вижу, Гникар, что для тебя нет на  свете  тайн,  так  скажи  мне,
отомщу ли я Гундингам за смерть отца? - спросил Сигурд.
     - Посмотри вверх! - усмехнулся старик.
     Юноша поднял голову и увидел орла, парящего высоко в небе.
     - Это вестник победы, - сказал Гникар, - так чего же ты спрашиваешь?
     Он завернулся в плащ, надвинул на глаза шляпу и не произнес больше ни
слова, пока они не причалили к берегу страны франков.
     Больше восемнадцати лет прошло со дня битвы, которой пали  Сигмунд  и
Гилими, и уже никто, кроме крестьян, страдавших под жестоким  владычеством
Гундингов, да  старых  воинов,  не  вспоминали  покойного  вождя  франков,
правившего так мудро и справедливо. В стране господствовали король Линги и
его братья. Их дружины были так многочисленны, что они  могли  не  бояться
нападений врагов и поэтому все свое время проводили в пирах и забавах.
     В тот же самый час, когда  северный  ветер  принес  к  земле  франков
корабли датчан, Линги в старом замке  Вольсунгов  принимал  многочисленных
гостей.  Разгоряченный  выпитым   медом   и   лестью   своих   придворных,
рыжебородый, с огромным орлиным  носом  и  желтоватыми  кошачьими  глазами
король  гордо  сидел  за  столом,  прислонившись  широкой  спиной  к  дубу
валькирий, и слушал песню одного  из  бродячих  скальдов,  который  пел  о
могучем богатыре Беовульфе и его замечательных подвигах.
     - Я не знаю, так ли велик  был  этот  Беовульф,  -  воскликнул  Линги
насмешлива, едва ли певец успел закончить последнее слово, - но вряд ли бы
он справился с нами, Гундингами! Вольсунги тоже хвастались, что ведут свой
род от самого Одина, а теперь мы сидим здесь, в их  замке,  и  нет  больше
никого, кто бы мог прогнать нас отсюда.
     Он еще говорил, когда снаружи послышался шум, и в зал вбежал  мальчик
лет пятнадцати, в грязной оборванной одежде.
     - Кто ты такой, - гневно вскричал  король,  -  и  как  ты  смел  сюда
явится?
     - Выслушай меня, господин! - отвечал испуганный мальчик, падая  перед
ним на колени. - Я пастух и сегодня, как обычно, пас свое стадо на  опушке
леса вблизи моря. Вдруг к берегу подошли неизвестные корабли, и высадилось
много вооруженных людей, а один из них, красивый как Бальдр и могучий, как
Тор, подозвал меня к себе и сказал: "Беги в замок и скажи своему господину
Линги, что Сигурд, сын Сигмунда и Гьердис и внук Вольсунга,  приехал  сюда
чтобы отомстить за своего отца и деда. Пусть король и его братья готовятся
к бою, который будет для них последним!"
     Кошачьи глаза Линги сузились от гнева. Он встал  со  своего  места  и
взялся рукой за меч, но потом неожиданно расхохотался.
     - Сын Сигмунда и Гьедрис! - воскликнул он. - Значит Гьедрис жива.  Но
ведь ее сыну не может быть и восемнадцати  лет.  И  этот  мальчишка  смеет
угрожать мне - мне, Линги из рода  Гундингов!  Скажи,  -  обратился  он  к
пастуху, - много ли с ним воинов?
     - Я не мог сосчитать их, господин, - ответил мальчик, - но знаю,  что
они приехали на ста кораблях.
     Линги снова расхохотался.
     Не слишком велика дружина у этого Сигурда, - сказал он  презрительно.
- Дружины его отца и деда, которые мы разбили, были куда больше. Собирайте
наших воинов! - приказал он братьям. -  Но  не  нападайте  первыми.  Пусть
последний потомок Вольсунгов отойдет подальше от берега. Я хочу уничтожить
и его и его людей до последнего человека. А ты, пастух, убирайся  назад  к
своему стаду.
     Он пнул ногой мальчика и, не обращая внимания на  встревоженные  лица
гостей, вышел из замка и приказал подать ему коня.
     Как только дружина  Сигурда  высадилась  на  берег,  к  нему  подошел
Гникар.
     - Нам пора проститься, - сказал  он.  -  Не  бойся,  скоро  мы  опять
увидимся. Еще раз приду я к тебе на помощь, ну, а потом, потом придет твоя
очередь, и ты придешь ко мне сам. Прощай!
     И он, не оборачиваясь, быстро направился к лесу и так незаметно исчез
в кустах, что юноше показалось, будто он растаял в воздухе.
     Не дождавшись  на  берегу  нападения  Гундингов,  Сигурд  повел  свою
дружину дальше на юг. Король Линги  поджидал  его  на  обширной  безлесной
равнине в двух днях пути от моря. Здесь он рассчитывал  легко  окружить  и
уничтожить небольшое войско молодого вождя.
     - Это будет не битва, а охота, - смеясь, говорил он своим братьям.  -
Зверь сам идет в наши руки, и я позабочусь о том,  чтобы  ему  не  удалось
улизнуть от моих воинов.
     И действительно, не успел отряд Сигурда выйти на открытое место,  как
на него со всех сторон обрушились пешие и конные дружины Гундингов.
     Казалось, что он будет мгновенно сметен их ударом, но  датчане,  стоя
плечом к плечу и дружно защищаясь, выдержали первый натиск врагов, а потом
и сами стремительно двинулись вперед.  Перед  их  рядами  на  своем  сером
жеребце бурей носился Сигурд. При каждом взмахе его волшебного меча падало
трое, а то и четверо неприятельских бойцов. Грани как мог  помогал  своему
хозяину. Он хватал зубами воинов Линги, сшибал их грудью и  топтал  своими
тяжелыми копытами.
     - Это сам Тир! Бог войны  Тир!  -  кричали  дружинники  Гундингов,  в
страхе разбегаясь во все стороны перед юным богатырем.
     Стоя поодаль на небольшом холме,  Линги  гневно  теребил  свою  рыжую
бороду.
     - Нам надо остановить его, братья, - воскликнул он,  -  или  он  один
перебьет всех наших людей. Вперед! За мной!
     Он пришпорил коня и помчался прямо на юношу. Его три брата, такие  же
рыжебородые и коренастые, как и он сам, поскакали за ним следом.
     Увидев короля и узнав его по золоченому рогатому  шлему,  и  богатому
вооружению, Сигурд радостно засмеялся.
     - Здравствуй, Линги! - крикнул он. - Час настал, и пора тебе уплатить
старый долг!
     Вместо ответа Линги яростно ударил  его  мечем,  однако  юноша  легко
отбил его удар и в свою очередь поднял меч.  Гундинг  закрылся  щитом,  но
Грам рассек его, словно он был  из  воска,  рассек  рогатый  шлем,  рассек
самого Линги и рассек его коня.
     "Мой добрый меч отомстил за своего хозяина", - подумал Сигурд,  глядя
на мертвого врага, но не успел он вымолвить этого вслух - на него со  всех
сторон напали три королевских брата.
     - Смерть тебе! - закричали они.
     - Смерть вам! - отвечал юноша и изо всех сил взмахнул Грамом.
     Три разрубленных пополам трупа одновременно  упали  на  землю,  а  из
груди неприятельских воинов вырвался громкий крик ужаса. Не пытаясь больше
сопротивляться и бросив оружие, они кинулись бежать, думая лишь о том, как
бы спасти свою жизнь.
     Сигурд не стал их  преследовать.  Он  приказал  своим  дружинникам  с
честью похоронить тела убитых, а сам  повернул  Грани  и  медленно  поехал
обратно на север. Тут его окликнул  Регин.  Во  время  битвы  хитрый  гном
прятался за спины  датских  воинов,  с  тревогой  наблюдая  оттуда  за  ее
исходом, и теперь был вне себя от радости.
     - Ты куда едешь, Сигурд? - спросил он.
     - Я хочу посмотреть на старый замок Вольсунгов, где родился мой отец,
- ответил юноша. - А потом готов ехать с тобой за золотом.
     - Разве ты не желал бы остаться в этой стране и править  ею,  так  же
как твои предки? - удивился Регин.
     Сигурд покачал головой.
     - Я еще слишком молод, чтобы быть хорошим королем, -  ответил  он.  -
Пусть страной франков отныне управляет  мой  дед,  Хиальпрек,  он  добр  и
справедлив и будет любим народом, а я пока постранствую по свету в поисках
славы и подвигов.
     Регин с трудом сдержал торжествующую улыбку.
     - Подожди, я поеду вместе с тобой, -  сказал  он.  -  Только  сначала
найду себе лошадь.
     Сигурд рассмеялся. Потом нагнулся, поднял одной рукой гнома и посадил
его сзади себя.
     - Ни одна лошадь не угонится за моим Грани, - сказал он, - но зато он
легко понесет двоих. Только держись за меня покрепче.
     Слуги Линги, узнав о поражении дружины Гундингов и  о  смерти  своего
господина, в страхе бежали прочь, и Сигурд нашел старый  замок  Вольсунгов
пустым. Он медленно прошел по его залам и наконец остановился перед  дубом
валькирий. Могучее дерево уже давно залечило рану,  нанесенную  ему  мечем
Одина, и лишь едва заметный шрам на его коре указывал на то место,  откуда
Сигмунд вытащил когда-то клинок, висящий теперь на поясе его сына.
     - Как ни стар этот дуб, он  переживет  последнего  из  Вольсунгов,  -
сказал Сигурд, оборачиваясь к Регину, который молча стоял за его спиной.
     - Зато замку осталось жить совсем не долго, ответил карлик, показывая
юноше на прогнившие бревна стен и осевшую крышу.
     - Чем скорее он рухнет, тем лучше, - угрюмо произнес  Сигурд.  -  Мое
сердце говорит мне, что Вольсунги никогда больше не переступят его порога,
а мне не хочется, чтобы он достался другим. Скажи лучше, долог ли путь  до
жилища твоего брата?
     - На твоем Грани все пути коротки, - ответил Регин. - Через пять  или
шесть дней мы будем уже вблизи Гнитахейде. Это огромная  степь  неподалеку
от страны готов. Там-то и живет Фафнир, и там он хранит свои сокровища.
     Сигурд на минуту задумался.
     - Я не знаю, Регин, зачем я  должен  проливать  кровь  того,  кто  не
причинил мне зла, и добывать для тебя золото, о  котором  ты  мечтаешь,  -
сказал он, - сказал он, - но я дал тебе слово и сдержу его. На рассвете мы
едем.



                       СИГУРД СРАЖАЕТСЯ С ДРАКОНОМ

     Вот уже много лет дракон Фафнир не покидал Гнитахейд, боясь  оставить
свои сокровища, но ужас перед ним  был  настолько  велик,  что  кругом  на
несколько дней пути не  было  ни  одного  человеческого  жилья,  ни  одной
протоптанной тропинки, и Сигурду с  Регином  пришлось  пробираться  сквозь
непроходимые леса и густые  заросли  кустарника,  которые  плотной  стеной
окружали жилище чудовища. Гном был молчалив и задумчив, но  в  его  глазах
все чаще вспыхивал недобрый огонек.
     - Послушай, Сигурд, - сказал он  как-то  вечером,  когда  они  сидели
около костра, - ты никогда не видел не видел Фафнира - уверен ли  ты,  что
тебе удастся его победить?
     - Я уверен, что не испугаюсь его, как бы велик он не был,  -  отвечал
юноша.
     - Не говори так! - усмехнулся гном. - Я рассказывал тебе, что  Фафнир
похитил волшебный шлем моего отца и с его помощью превратился  в  дракона,
но ты не знаешь, что этот шлем внушает страх всякому, кто его видит.
     Сигурд улыбнулся.
     - Страх можно внушить лишь тому, кто его знает, - сказал он. -  Я  же
еще ни разу никого и ничего не боялся.
     - Панцирь моего брата не может пробить ни один  меч,  а  из  его  рта
брызжет яд, каждая капля которого смертельна, - продолжал Регин.
     - Грам разрежет любой панцирь, а  яд  для  Вольсунгов  не  опасен,  -
возразил юноша. - Я слышал, что мой отец Сигмунд однажды выпил отравленное
вино и оно не причинило ему вреда.  Не  бойся,  Регин,  сокровища  Андвари
скоро будут в наших реках.
     Гном ничего не ответил, но глаза его жадно блеснули,  словно  он  уже
жалел, что обещал Сигурду половину золота.
     Наутро следующего дня лес кончился, и  путники  выехали  на  открытое
место. Перед ними лежала большая,  изрезанная  узкими  оврагами  степь,  в
самой середине которой за невысокими  крутыми  холмами  находилось  логово
дракона Фафнира.
     Регин схватил Сигурда за руку.
     - Это Гнитахейде, - шепнул он. - Осторожней! Если  брат  нас  увидит,
все пропало!
     Но Грани уже и сам  остановился.  Он  рыл  землю  копытом,  храпел  и
пугливо косил глазом, будто ожидая появления дракона.
     - Нам придется оставить его здесь и  идти  дальше  пешком,  -  сказал
Сигурд, спрыгивая на землю.
     - Не торопись, Сигурд, - возразил Регин,  в  свою  очередь  слезая  с
седла. - К северу отсюда течет река, к которой Фафнир  ежедневно  утром  и
вечером ходит на водопой. Пойдем туда и будем поджидать его там.
     Сигурд согласился. Они оставили Грани на опушке леса и  вскоре  нашли
маленькую речушку,  почти  полностью  скрытую  от  глаз  своими  высокими,
поросшими ракитой берегами. Осторожно, стараясь не шуметь, оба пошли вверх
по ее течению, продвигаясь все ближе и ближе к жилищу дракона.  Неожиданно
кусты ракиты окончились, и Сигурд, который шел  впереди,  увидев  широкую,
словно выжженную полосу голой земли, посредине которой  тянулась  большая,
похожая на русло высохшей реки канава.
     - Это дорога Фафнира, - тихо проговорил  Регин  за  спиной  юноши.  -
Трава вокруг сожжена его ядовитым дыханием, а канава, которую ты видишь, -
след от его брюха.
     - След от его брюха? - недоверчиво спросил Сигурд.
     Он подошел поближе.  По  обе  стороны  канавы  были  заметны  глубоко
врезавшиеся в землю отпечатки гигантских когтистых лап.
     - Как велик твой брат, Регин! - сказал  юноша,  меряя  глазами  следы
чудовища.
     - Да, Сигурд, - отвечал гном, боязливо выходя из-за кустов. - Он  так
велик, что даже Грам не достанет его спереди до сердца. Лучше вырой яму на
дне канавы и спрячься в ней. Когда Фафнир проползет над тобой, ты поразишь
его мечем снизу.
     Совет Регина показался юноше разумным.
     - Хорошо, - сказал он. - Так я и сделаю, а ты пока ступая к  Грани  и
постереги его, чтобы на него не напали волки.
     Гном наклонил голову, чтобы скрыть торжествующую улыбку,  и  поспешно
зашагал к лесу. По дороге он еще раз обернулся и, увидев, что Сигурд  роет
мечем яму, весело потер руки.
     - Золото достанется мне одному, -  прошептал  он.  -  Золото  Андвари
достанется мне одному!
     Юноша уже кончал свою работу, когда услышал позади чей-то голос:
     - Здравствуй, Сигурд. Что ты здесь делаешь?
     Сигурд обернулся  и  увидел  уже  хорошо  знакомого  ему  одноглазого
старика в широкополой шляпе и синем плаще.
     -  Привет  тебе,  Гникар!  -  воскликнул  он.  -  Я  рою  яму,  чтобы
подкараулить в ней дракона Фафнира.
     Гникар покачал головой.
     - Тот, кто дал тебе такой совет, - твой злейший враг, - сказал он.  -
Ты убьешь Фафнира, но и сам погибнешь вместе с ним, захлебнувшись в крови,
которая хлынет из его раны. А после вашей смерти Регин один  захватит  все
сокровища.
     - Что же мне делать? - спросил юноша, догадываясь о коварном  замысле
гнома.
     - Вырой несколько таких ям  и  соедини  их  между  собой,  -  ответил
старик, - тогда кровь Фафнира растечется по ним, и ты останешься в живых.
     - Спасибо тебе, Гникар, - сказал Сигурд. -  Это  уже  третья  услуга,
которую ты мне оказываешь, а я не расплатился за две первых.
     - Придет время - расплатишься, - промолвил старик. - Ты помнишь,  что
я сказал в прошлый раз? Теперь больше я к тебе не приду, а ты сам  придешь
ко мне. И придешь навсегда, - добавил он тихо.
     Юноша вздрогнул. Только теперь он понял, кто стоял перед ним.
     "Ты - Один!" - хотел было воскликнуть он, но старик уже исчез так  же
внезапно, как появился.
     "Да, это Один: он помогает мне, как помогал и моему отцу до тех  пор,
пока не пробил его час", - подумал Сигурд, снова принимаясь за работу.
     Следуя совету Гникара, он выкопал несколько  ям,  соединил  их  между
собой и прикрыл сверху ветками ракиты. Тем  временем  солнце  скрылось  за
лесом. Приближалась минута, когда Фафнир должен  был  спуститься  к  реке.
Сигурд вытащил меч, спрыгнул в одну из ям  и  присел  на  ее  дне,  ожидая
появления дракона. Не прошло и получаса, как земля вокруг него  задрожала,
послышалось  громкое  свистящее  дыхание  чудовища,  напоминающее  сопение
целого стада быков, и тяжелая, шлепающая поступь его  лап.  Сигурд  затаил
дыхание. Внезапно на лицо ему упали крупные горячие капли ядовитой  слюны,
и в следующее мгновение грузное тело дракона плотно закрыло небо  над  его
головой. Юноша быстро приподнялся и по рукоятку вонзил в него меч, а потом
так же проворно выдернул его  снова.  Из  раны  обильным  потоком  хлынула
кровь, растекаясь ручьями по всем вырытым ямам. Фафнир  глухо  застонал  и
тяжело упал на бок.
     "Кажется, я победил", - подумал Сигурд, поспешно выскакивая из своего
убежища.
     Увидев юношу, дракон с трудом повернул к  нему  огромную  безобразную
голову.
     - Кто ты, осмелившийся пронзить мечом сердце Фафнира?  -  спросил  он
слабеющим голосом. - Как звали твоего отца и откуда ты родом?
     Юноша вспомнил, как его еще  в  детстве  учил  Регин,  что  проклятие
умирающего может причинить  вред,  если  он  знает  имя  своего  врага,  и
ответил:
     - У меня нет ни роду, ни племени, ни отца, ни матери. Один брожу я по
свету, а зовут меня "Гордый олень"
     - Значит, тебя породило само чудо, - сказал  Фафнир.  -  Долгие  годы
носил я волшебный шлем и внушал ужас всем отважным героям. Ты  первый  без
страха стоишь передо мной.
     - Сердце истинного храбреца не  испугает  никакой  шлем!  -  возразил
Сигурд.
     - Если ты такой храбрец, так почему же ты побоялся сказать  мне  свое
имя? - усмехнулся Фафнир.
     Юноша покраснел и гордо поднял голову.
     - Ты прав, Фафнир, я тебе солгал! - смело воскликнул он. - Меня зовут
Сигурд, я сын Сигмунда и внук Вольсунга, хотя, быть может, ты и не  слыхал
о нашем роде.
     - Нет, Сигурд, я знаю все, - ответил дракон. - Я слышал о твоем отце:
он был герой, поэтому и его сын так дерзок. А все-таки ты пленник датского
короля и его слуга.
     - Никто не брал меня в плен на поле битвы, - с достоинством  произнес
юноша. - А слуга я или свободный человек, в этом ты убедился сам.
     - Ладно, Сигурд, не сердись, - тихо промолвил Фафнир. -  Я  умираю  и
хочу перед смертью дать тебе добрый совет. Не бери  мое  золото,  не  бери
Андваранаут, кольцо Андвари, - это принесет тебе гибель.
     - Смерть - удел каждого, рано или поздно  она  придет  и  ко  мне,  -
сказал Сигурд. - Почему же я должен ее бояться?
     - Да, смерть удел всякого, - ответил Фафнир. - Но  хорошо  умирать  в
преклонные годы, оставляя после себя наследников, - ты же еще молод,  и  с
тобой окончится род Вольсунгов. Не трогай сокровищ  Андвари,  Сигурд.  Над
ними тяготеет проклятье, а больше всего бойся моего брата. Я знаю, что  он
ради золота научил тебя убить меня, ради золота он убьет и тебя.
     - Спасибо за совет, Фафнир, - сказал Сигурд. - Но я уже говорил тебе,
что не знаю, что такое страх.
     - Тогда ты скоро умрешь, - глухо прошептал дракон.
     Его голова упала на землю, огромное тело вытянулось - он был мертв.
     В наступившей тишине Сигурд услышал чьи-то легкие,  осторожные  шаги.
Он оглянулся и при свете взошедшей луны увидел маленькую, чуть сгорбленную
фигуру Регина. Гном, словно не веря  своим  глазам,  посмотрел  на  юношу,
потом кинул быстрый взгляд на  убитого  дракона,  и  его  лицо  недовольно
сморщилось.
     - Ты убил моего брата, Сигурд! - сказал он плаксивым голосом. - Какой
выкуп я получу от тебя за его смерть?
     - Ты хочешь получить выкуп за смерть брата?! - воскликнул возмущенный
юноша. - Но разве не ты подстрекал меня его  убить?  Разве  не  ты  мечтал
захватить его золото?
     - Ты прав, Сигурд, - согласился гном. - Однако, по нашим  обычаям,  я
все равно должен получить выкуп. Многого я не прошу.  Пусть  этим  выкупом
будет сердце Фафнира. Вынь его, зажарь и  отдай  мне.  Тогда  ты  со  мной
расплатишься.
     - Хорошо, - сказал удивленный Сигурд. Он ожидал, что Регин попросит у
него часть золота. - Это я могу сделать.
     Он пошел в лес,  принес  оттуда  большую  охапку  хвороста,  разложил
костер и, вырезав своим мечем сердце дракона,  принялся  его  поджаривать.
Гном молча наблюдал за ним, а потом лег у  костра  и,  попросив  разбудить
его, когда сердце поджарится, заснул.
     Постепенно ночной  мрак  рассеялся,  взошло  солнце,  и  в  небе  над
Гнитахейде появились первые птицы.
     "Наверное, жаркое уже готово и мне пора  будить  Регина",  -  подумал
Сигурд. Он потрогал сердце дракона руками и при  этом  сильно  обжег  себе
палец. Еле удержавшись от крика, юноша сунул себе палец в рот и в  тот  же
миг услышал, как одна из пролетавших над его головой ласточек прощебетала:
     - Вот сидит Сигурд и жарит для Регина сердце дракона.  Он  бы  сделал
умнее, если бы съел его сам.
     - А вон лежит Регин и, притворясь спящим, думает лишь о том,  как  бы
ему убить Сигурда, - ответила ей другая ласточка.
     - Надо было бы Сигурду сделать его на голову  короче!  -  воскликнула
третья.
     - Да, мудр был бы Сигурд, если бы он все понял и сделал так,  как  вы
советуете, - сказала четвертая.
     - Ах, что вы! Этот Сигурд просто глуп! - возразила пятая. -  Он  убил
одного брата и оставил в живых  другого.  Не  понимаю,  как  он  не  может
догадаться, что Регин все равно убьет его ради золота.
     - Да, ты права: глупо щадить врага, который в мыслях уже трижды  тебя
предал, - согласилась с ней шестая.
     - Ах, Сигурд, Сигурд! О чем ты только думаешь? - промолвила  седьмая.
- Отруби ему голову:  избавься  навсегда  от  врага  и  распоряжайся  всем
золотом Фафнира!
     Сигурд  опустил   голову.   Он   вспомнил   коварный   совет   Регина
подкарауливать Фафнира в яме, вспомнил злобные взгляды гнома, и  его  лицо
вспыхнуло от гнева. Недолго думая юноша вскочил на ноги и,  выхватив  меч,
одним ударом отрубил Регину голову. Затем он снял с огня сердце дракона  и
съел его кусок за куском.
     - Он  нас  послушался,  он  нас  послушался!  -  радостно  защебетали
ласточки. - Теперь он будет понимать язык всех зверей и птиц.
     А одна ласточка добавила:
     - Следуй за  нами,  сын  Сигмунда,  мы  покажем  тебе,  где  спрятаны
сокровища Андвари.
     Сигурд пошел  за  ласточками.  Рядом  с  широкой  и  глубокой  норой,
служившей жилищем дракону  Фафниру,  находился  небольшой  песчаный  холм.
Ласточки подлетели к нему и хором воскликнули:
     - Копай здесь, Сигурд, копай здесь!
     Юноша послушно раскинул мечем песок и невольно замер на месте.  Перед
ним,  ослепляя  глаза  своим  блеском,  возвышалась  целая  груда  золотых
слитков, среди которых лежало  маленькое,  но  искусно  сделанное  кольцо.
Юноше казалось,  что  он  еще  никогда  и  нигде  не  видел  ничего  более
прекрасного.
     -  Не  трогай  кольцо!  Бери  золото,  но  не  трогай   кольцо!   Это
Андваранаут, на нем лежит проклятье! - перебивая друг друга,  взволнованно
щебетали ласточки.
     Но Сигурд, не слушая их, уже надел кольцо на палец.
     - Ах, он  взял  Андваранаут,  он  погибнет!  -  горестно  воскликнули
птички.
     - Все мы когда богатырь и, оглядевшись вокруг, пронзительно свистнул.
     Издали послышалось громкое ржание, и через  минуту  к  юноше  крупным
галопом подскакал Грани, все еще пугливо поводя ушами и  раздувая  ноздри:
Он  чуял  запах  дракона.  Сигурд  отвязал  от  его  седла   уже   заранее
приготовленные Регином большие кожаные мешки - гном вез эти мешки из самой
Дании, - наполнив их золотом и взвалил на спину своего жеребца.  Они  были
намного тяжелее трех закованных в броню воинов, и юноша, боясь, что  Грани
не выдержит такого груза, решил идти пешком. Он взял коня  под  уздцы,  но
тот не двигался с места.
     - Ну, пойдем же, Грани, пойдем, - уговаривал его Сигурд, не  понимая,
в чем дело.
     Умное животное резким движением вырвало из рук узду и  повернулось  к
нему боком, словно приглашая сесть в седло. Удивленный юноше исполнил  его
желание, после чего могучий конь, радостно заржав, крупной  рысью  побежал
вперед.
     - Молодец, Грани,  ты  достойный  сын  Слейпнира!  -  ласково  сказал
Сигурд, поглаживая шею своего скакуна.
     В это время одна из ласточек опустилась на его правое плечо и шепнула
ему в самое ужо:
     - К югу отсюда, между страной франков и страной готов, стоит шатер, и
в нем спит прекраснейшая девушка на свете. У нее большие темно-синие глаза
и густые каштановые волосы. Она ждет тебя, о Сигурд!
     - Не слушай ее, - прошептала другая ласточка,  садясь  на  его  левое
плечо. - Ты слушай то, что скажу тебе я. Далеко к югу от  Гнитахейде  есть
страна, которой правит король Гьюки. У него есть дочь - прекрасная Гудрун.
У нее белокурые волосы и глаза цвета северного неба. Ты будешь ее мужем, о
Сигурд!
     - Хорошо, хорошо, ласточки. Я увижу и ту и другую, -  смеясь  отвечал
Сигурд.
     И он повернул Грани на юг.



                         СИГУРД БУДИТ БРУНХИЛЬД

     Снова дремучими лесами, потом  полями  и  долинами  рек  и,  наконец,
невысокими, каменистыми горами ехал Сигурд на юг, держа путь между  землей
франков и землей готов. На восьмой день он заметил  вдалеке  гору  выше  и
круче других, на самой вершине которой, казалось,  горел  большой  костер.
Юноша погнал Грани вскачь и, подъехав ближе, увидел  шатер,  сложенный  из
больших блестящих щитов, ярко сверкавших в лучах солнца.
     "Уж не в нем ли спит та девушка, о которой мне говорили ласточки?"  -
подумал Сигурд.
     Он спрыгнул с коня и, оставив его внизу, стал  быстро  подниматься  в
гору. Ее склоны были обрывисты, а порою почти отвесны, но юноша,  хватаясь
руками за уступы скал, продолжал смело лезть вверх и  вскоре  добрался  до
самого шатра. Однако, к своему удивлению, он нашел в  нем  не  девушку,  а
воина в высоком золоченом шлеме, броне и кольчуге.  Он  лежал  на  простой
деревянной скамье и, закинув руки за голову, крепко спал.
     "Видно, ласточки меня обманули, -  сказал  сам  себе  Сигурд.  -  Или
обещанная ими девушка ждет меня где-нибудь в другом месте?"
     - Проснись, друг! - крикнул он, хлопнув воина по плечу.  -  Проснись,
пора вставать!
     Но тот даже не шевельнулся.
     - Крепко же ты спишь, - сказал Сигурд и  резким  движением  стащил  с
него шлем.
     В  то  же  мгновение  к  его  ногам  упали  золотистые  волны  густых
каштановых волос. Воин оказался девушкой. Затаив дыхание и все еще держа в
руках шлем, Сигурд наклонился над спящей и взглянул ей в лицо.
     - Нет, я ошибся, ласточки мне не солгали,  -  прошептал  он.  -  Сама
богиня любви Фрейя, наверное, не так красива, как ты. Но как же  мне  тебя
разбудить?
     После некоторого раздумья он попытался снять с  девушки  панцирь,  но
его застежки проржавели и  не  поддавались  усилиям  юноши.  Тогда  Сигурд
вытащил из ножен Грам и быстро, но осторожно, чтобы не  поранить  лежавшую
перед  ним  красавицу,  разрезал  им  ее  латы,  кольчугу,  наколенники  и
нарукавники. Тяжелые доспехи с глухим звоном упали на камни.  Одновременно
бледные веки спящей дрогнули.  Огромные  темно-синие  глаза  с  удивлением
взглянули на юношу.
     - Кто ты? - спросила девушка, поднимая голову.
     - Я Сигурд, сын Сигмунда, покойного короля франков, - ответил юноша.
     - Покойного короля франков? - переспросила  девушка.  -  Долго  же  я
спала! Когда я заснула, он  был  безбородым  юношей.  А  ты,  Сигурд,  ты,
наверное, великий герой?
     - Я еще слишком мало живу на свете, - возразил юноша. -  Пока  что  я
успел только отомстить за смерть отца и убить дракона Фафнира.
     Девушка засмеялась и оправила на себе слежавшееся под броней платье.
     - Я и так знала, что ты смел, - сказала она. - Разбудить меня  должен
был самый храбрый человек на свете.
     - Кто же ты и как ты попала на эту гору? - спросил Сигурд.
     - Я валькирия Брунхильд, - с улыбкой отвечала красавица,  -  и  в  те
годы, когда твой дед, Вольсунг, был  еще  во  цвете  лет  и  сил,  не  раз
сражалась с ним на поле брани, хотя он меня и не  видел.  Да,  Сигурд,  во
многих битвах принимала я участие и,  покорная  воле  Одина,  поражала  на
смерть тех, кого он решил забрать  к  себе  в  валгаллу.  Но  вот  однажды
воевали друг с другом два короля. Один из них, его звали Гйальгуннар,  был
уже пожилой и опытный воин,  другой,  Агнар,  был  молод,  хорош  собой  и
совершал свой первый в жизни поход. Я не знаю почему, но  Один  за  что-то
любил старого короля и обещал ему помощь.
     "Послушай, Брунхильд, - сказал он мне, - ты отправишься  на  землю  и
будешь сражаться на стороне Гйальгуннара. Когда  же  его  враг  падет,  ты
принесешь его ко мне в Валгаллу".
     "Хорошо, все будет сделано так,  как  ты  сказал",  -  отвечала  я  и
послушно полетела выполнять его поручение.
     Однако, Сигурд, когда я  увидела  Агнара,  мужественно  бившегося  со
своим искусным противником, мне стало жаль этого славного юношу,  которому
боги отказали в своей защите.
     "Почему в Валгаллу должен уйти тот,  кто  еще  не  изведал  жизни  на
земле, а остаться тот, кому эта жизнь уже наскучила?" - подумала я. И тут,
Сигурд, моя рука как-то сама собой поднялась и, вместо того чтобы поразить
молодого короля, поразила старого. Агнар одержал победу, дружина его врага
разбежалась, а я, захватив с собою тело Гйальгуннара  поднялась  с  ним  в
Валгаллу. Ах, Сигурд, если бы ты видел, в  каком  гневе  был  Один,  когда
увидел меня с моей ношей!
     "Ты посмела ослушаться воли богов, дерзкая! - прогремел он. - С этого
часа ты больше не валькирия! Ты сегодня же отправишься к людям  и  выйдешь
за муж за того, кого мы тебе выберем".
     "Я отправлюсь к людям, о великий, - ответила я, - и выйду там за муж,
но,  клянусь  всеми  богами,  клянусь  ясенем  Игдразилем   и   священными
источниками Урд, что моим мужем будет лишь тот, кто  не  разу  не  изведал
чувство страха".
     Услышав мои слова, Один рассердился еще больше и изо всех сил  вонзил
в землю свое копье.
     "Ты надеешься перехитрить богов, Брунхильд! -  воскликнул  он.  -  Ты
думаешь, что никогда не выйдешь за муж, потому что такого человека нет  на
свете, но ты ошибаешься.  Придет  день,  и  он  родится!  А  чтобы  ты  не
состарилась до этого времени, ты будешь  спать,  спать,  пока  он  сам  не
разбудит тебя.
     Я и испугалась и обрадовалась, а старейший из Асов, помолчав немного,
добавил с усмешкой:
     "Я сказал, что он тебя разбудит, но не сказал,  что  он  будет  твоим
мужем, Брунхильд. Боги не помогают тем, кто непокорен их воле".
     После этого Один привел меня сюда,  в  этот  шатер,  и  уколол  шипом
волшебного терновника, который усыпляет на долгие годы. Вот почему я знаю,
что ты храбрей всех на свете.
     - И вот почему ты должна стать  моей  женой!  -  радостно  воскликнул
юноша.
     - Не торопись, Сигурд, - улыбаясь, возразила  Брунхильд.  -  Один  не
сказал, что ты будешь моим мужем.
     - Но он не сказал также, что я  им  не  буду,  -  ответил  Сигурд,  с
восхищением глядя на девушку. - Значит, мы должны решить это сами.  Или  я
тебе не нравлюсь?
     Брунхильд бросила быстрый взгляд на молодого богатыря.
     - Я жила у богов, но и среди них  не  видела  никого  красивее  тебя,
Сигурд, - задумчиво сказала она. - Быть твоей женой  большое  счастье,  но
мое сердце чует беду. Владыка мира не забыл моего своеволия  и  не  пошлет
нам удачи.
     - Нет, Брунхильд, нет! - прерывисто воскликнул Сигурд. -  Пусть  боги
делают что хотят, а я клянусь, что всегда буду любить только тебя одну.
     -  Ах,  Сигурд,  -  ответила  Брунхильд,  опуская  голову,   -   будь
осторожней! Разве ты не знаешь, что каждый, нарушивший свою клятву  должен
погибнуть?
     - Да, это так, но я не нарушу ее, Брунхильд, - промолвил богатырь.  -
Вот Андваранаут, кольцо Андвари, возьми его в залог моей верности.
     Брунхильд вздрогнула.
     - Андваранаут? - повторила она. - Кольцо, приносящее смерть? И ты его
взял, Сигурд? Да, видно, ты действительно смел! Ну  что  ж,  я  беру  его!
Может быть, нам не суждено быть вместе при жизни, но тогда мы, по  крайней
мере, вместе умрем.
     Девушка надела Андваранаут на палец и, выйдя из шатра, с  сияющим  от
счастья лицом оглядела раскинувшиеся вокруг леса, поля и горы.
     - Привет тебе, солнце!  -  воскликнула  она,  поднимая  к  небу  свои
обнаженные по самые плечи руки. - Привет тебе,  синее  небо!  Привет  вам,
цветы, трава и деревья, радующие глаза и сердце  человека!  Слава  и  вам,
великие Асы, создавшие все это. Простите мне мою вину и дайте вашей бывшей
валькирии хотя бы несколько лет счастья!
     Затем, повернувшись к Сигурду, который вышел вслед за ней,  Брунхильд
сказала:
     - Нам нужно расстаться, сын Сигмунда  и  внук  Вольсунга.  Но  ты  не
бойся, эта разлука будет недолгой. Я должна разыскать моего брата,  короля
Атли, и попросить его подготовить все к нашей свадьбе.  Когда  я  заснула,
Атли был еще мальчиком, но теперь он, наверное, уже стар.
     - Я слышал об Атли, - сказал  Сигурд.  -  Он  стал  могущественнейшим
королем и завоевал много земель. Его царство лежит на юго-восток  от  этой
горы. Я готов сопровождать тебя туда.
     - Нет, нет, Сигурд! - воскликнула Брунхильд. - Я поеду одна, а  ровно
через шесть месяцев ты приедешь за мной. Только не забудь своей клятвы.
     - Я ее не забуду, как и тебя, - отвечал юноша. -  Но  на  чем  же  ты
поедешь? Ведь у тебя нет лошади.
     - Зато у меня есть золото, и я  куплю  ее  в  первом  же  селении,  -
отвечала Брунхильд. - Не бойся за меня, Сигурд, и уходи. Ты слышишь?  Тебе
пора ехать, прощай!
     - Прощай, - сказал юноша, невольно подчиняясь воле бывшей  валькирии,
и, в последний раз окинув  взором  прекрасное  лицо  и  высокую,  стройную
фигуру девушки, начал спускаться вниз.
     Грани терпеливо поджидал его у подножия годы. Вскочив на него, Сигурд
поднял голову. Там, вверху, на самом краю обрыва, протянув  к  нему  руки,
стояла Брунхильд.
     - Прощай, Сигурд! - донеслось до него. - Прощай! Будь верен и  честен
и помни свою клятву!



                       СИГУРД В ГОСТЯХ У ГЬЮКИНГОВ

     Расставшись с Брунхильд, Сигурд продолжал не спеша ехать на юг. Через
два дня по свежему ветру, дувшему ему прямо  в  лицо,  и  по  кружившим  в
отдалении чайкам он понял, что находится вблизи большой  реки,  а  вскоре,
въехав на небольшую гору, увидел широкий поток, быстро кативший свои волны
меж высоких скалистых берегов.
     "Это, должно быть, Рейн, - подумал он. - А там,  на  другой  стороне,
начинается королевство Гьюкингов. Ласточки говорили мне,  что  здесь  меня
ждет белокурая дева с глазами цвета северного неба, мужем которой я должен
стать. Но ведь я уже дал клятву Брунхильд и прекрасней  моей  невесты  нет
никого на свете. Стоит ли мне туда ехать?"
     Сигурд потрепал рукой гриву своего жеребца и вдруг рассмеялся.
     - Поедем, Грани! - воскликнул он. - Может быть, там я  встречу  новые
приключения, а женить меня насильно никто не может.
     И, пустив коня шагом, он поехал вдоль берега Рейна, разыскивая место,
где бы можно было переправиться.
     Небольшое королевство Гьюкингов лежало между страной франков, страной
гуннов и страной готов.  Уже  более  полустолетия  им  правил  престарелый
король Гьюки. Совершив когда-то немало смелых подвигов, он был теперь слаб
и немощен и не смог бы отстоять свои земли от сил Гуннар и Хогни, рослые и
храбрые воины и умелые предводители дружин. Кроме них, у  Гьюки  была  еще
дочь, Гудрун, и пасынок, сын его жены от первого брака, по имени  Гутторн,
не любимый братьями и сестрой за хитрость и жадность и  очень  похожий  на
свою мать, Кримхильд, про которую многие говорили, что она злая колдунья.
     Был вечер, и семья Гьюкингов сидела за ужином в одном из залов своего
замка, когда глядевшая в окно Гудрун неожиданно громко вскрикнула.
     - Отец, братья, смотрите! - позвала она.  -  К  нам  скачет  какой-то
всадник! Но как же он высок и красив! Нет, это, конечно, не человек, - это
кто-нибудь из богов спустился на землю!
     Гьюки и его сыновья поспешили к окну и увидели Сигурда, который в эту
минуту подъезжал к воротам замка.
     - Может быть, он и не Ас, -  покачал  головой  старый  король,  -  но
такого богатыря я вижу первый раз в жизни.
     - Да и конь у него под стать своему хозяину, - заметил Гуннар.
     - У него богатая одежда и хорошее оружие. Видимо, он  знатного  рода.
Прими его получше, супруг мой, - сказала Кримхильд, тоже взглянув в окно.
     Тем временем Сигурд въехал в ворота и, спрыгнув  с  коня,  подошел  к
дверям замка, где был встречен старым королем и его сыновьями.
     - Привет вам, Гьюкинги, - сказал он. - Я Сигурд, сын Сигмунда из рода
Вольсунгов, и еду из Гнитахейде, где я убил дракона Фафнира.
     - Такой герой всегда будет желанным гостем в  моем  доме,  -  радушно
отвечал Гьюки. - Я помню твоего отца, Сигурд, мы с ним всегда жили дружно.
Входи, и пусть не скоро придет тот день, когда ты нас покинешь.
     - Мы с братом больше всего уважаем храбрость, - сказал  Гуннар.  -  А
Фафнира мог убить только храбрейший из смертных. Будь же нашим другом, сын
Сигмунда.
     - Послушай, Сигурд, - вдруг раздался голос Гутторна, который стоял за
спинами братьев,  -  ты  говоришь,  что  убил  дракона.  Так  где  же  его
сокровища, о которых я так много слышал? Или ты оставил их в Гнитахейде?
     - Вот  они,  -  простодушно  отвечал  богатырь,  показывая  рукой  на
висевшие по обоим бокам Грани мешки.
     Тусклые глаза Гутторна загорелись.
     - Как, эти огромные мешки полны золота? - воскликнул он. -  Тогда  ты
самый богатый человек на свете!
     - Не беспокойся о них, Сигурд, - сказал Гьюки. - Твои сокровища будут
храниться вместе с моими все время, пока ты будешь у нас гостить. А теперь
пройдем в замок. Там ты отдохнешь и поужинаешь.
     - И расскажешь нам, как ты сражался с  драконом,  -  добавил  Гуннар,
пропуская юношу вперед и следуя за ним.
     С почетом принятый в семье Гьюкингов, Сигурд остался у них на  долгое
время, и, когда он начинал поговаривать об отъезде, старый  король  всякий
раз уговаривал его переменить свое  решение.  Оба  его  сына,  и  веселый,
жизнерадостный Гуннар и молчаливый, задумчивый Хогни, искренне подружились
с молодым Вольсунгом. Они вместе ездили на охоту или состязались в  умении
владеть оружием, и, хотя Сигурд всякий раз одерживал над ними верх, братья
ему не завидовали и от души  восхищались  исполинской  силой  и  ловкостью
своего гостя. Но особенно  любезной  и  ласковой  была  с  ним  Кримхильд,
которой днем и ночью не давали покоя сокровища Фафнира.
     - Послушай, - сказала она как-то раз своему мужу,  -  лучшего  жениха
для Гудрун нам не найти, да и Сигурд, я думаю, не прочь взять в жены такую
красавицу. Попробуй сосватать ее за него.
     - Что ты, что ты! - удивленно воскликнул старый Гьюки. - Я не  меньше
тебя уважаю нашего гостя, но где же это видано, чтобы отец сам сватал свою
дочь! А Сигурд, по-моему, не обращает на нее никакого внимания.
     - Зато Гудрун не спускает с него глаз, - возразила Кримхильд. -  Тебе
не нужно стыдиться, Гьюки. Этот юноша так богат и знатен,  что  ради  него
можно нарушить старый обычай.
     Кримхильд была права. Со дня приезда Сигурда ее дочь не спала  ночей,
мечтая о молодом красавце-богатыре, так неожиданно  явившемся  в  их  дом.
Гудрун знала, что она хороша совой. Недаром скальды слагали о  ней  песни,
славя повсюду ее  нежные  голубые  глаза  и  белокурые  волосы,  а  многие
знатнейшие князья не раз просили у старого Гьюки ее  руки.  Однако  Сигурд
даже не смотрел в ее сторону, и девушка проливала украдкой горькие слезы.
     "Может быть, мне и в самом деле  просватать  дочь  за  Вольсунга?"  -
подумал старый король после разговора с женой  и  на  следующее  же  утро,
возвращаясь вместе с ним со своим гостем  с  охоты,  спросил  его  как  бы
невзначай:
     - А что, Сигурд, не пора ли тебе жениться?
     - А я и так скоро женюсь, - засмеялся тот. -  В  стране  гуннов  меня
ждет невеста. Она сестра короля Атли, и ее зовут Брунхильд.
     - Ах, так, - пробормотал разочарованный Гьюки. - Ну что ж, желаю тебе
счастья!
     В тот же день он рассказал Кримхильд  о  своем  разговоре  с  юношей.
Старая королева сначала побелела от злобы, но потом усмехнулась.
     - Сигурд хочет жениться на Брунхильд? - сказала она задумчиво. - Нет,
Гьюки, этому не бывать! Он будет мужем Гудрун!
     - Как же ты можешь женить его насильно? - удивился Гьюки.
     - Придет время, и он сам попросит руки  нашей  дочери,  -  промолвила
Кримхильд, загадочно улыбаясь, и, не сказав больше ни слова, вышла.
     Старый король только молча покачал головой. Он  привык  к  тому,  что
предсказания его жены обычно сбываются, хотя и не  знал  почему,  и  решил
терпеливо ждать, что будет дальше.
     Однако на другой день в замке поднялась тревога.  Прискакал  гонец  с
известием, что один из соседних готских королей с большим войском  вторгся
во владения Гьюкингов.
     Обеспокоенный Гьюки призвал к себе своих сыновей и пасынка.
     - Наш враг многочислен, дети  мои,  -  обратился  он  к  ним.  -  Так
многочислен, что у нас почти нет надежды его победить, а моя рука уже не в
силах держать меч. Придется вам одним защищать нашу страну и, может  быть,
с честью пасть на поле брани.
     - Мы сейчас же выступаем, отец, -  произнес  Гуннар.  -  И,  если  ты
увидишь дружины варягов у стен нашего замка, знай, что мы уже в Валгалле.
     - Я останусь здесь, чтобы защищать сестру и мать, - возразил Гутторн.
- Что будет с ними, если мы все погибнем?
     Гуннар с презрением посмотрел на сводного брата.
     - Поступай как знаешь! - сказал он. - Ты старше нас всех,  и  не  мне
учить тебя, где твое место.
     - Ты прав, Гуннар, - усмехнулся Хогни, - такой  богатырь  в  сражении
будет только мешать другим.
     И,  не  обращая  внимания  на  злобные  взгляды  Гутторна,  он  пошел
готовиться к походу. Гуннар вышел вслед за ним, но прежде чем  отправиться
к своей дружине, зашел сначала к молодому Вольсунгу.
     - Тебе нужно уезжать, Сигурд, - обратился он к нему. -  Мы  выступаем
против врага и вряд ли вернемся назад. Возьми свои  сокровища,  садись  на
грани и скачи к франкам. Оттуда ты легко доберешься до Дании.
     Сигурд рассмеялся.
     - Плохо ты обо мне думаешь! - произнес он. - Мой дед Хиальпрек сказал
мне на прощание, чтобы я был достоин своего имени. И плохо я  оправдал  бы
его слова, если бы бросил друзей, когда на них напали  враги.  Я  поеду  с
вами, Гуннар!
     Гьюкинг вскрикнул от радости и крепко стиснул его в своих объятиях.
     - Твоя помощь дает нам надежду на успех, - промолвил  он,  с  любовью
глядя на Сигурда. - Но ведь ты рискуешь жизнью: готы хорошие воины.
     - Не бойся, - отвечал молодой Вольсунг. - Первая половина моего имени
говорит о победе, и мы ее добьемся!
     В тот же день все трое вместе со своей дружиной  выступили  в  поход,
провожаемые взволнованными и опечаленными  взглядами  Гьюки,  Кримхильд  и
Гудрун. Гуннар был озабочен и почти не разговаривал, а Хогни  казался  еще
угрюмее, чем обычно, и один лишь Сигурд был весел. Лицо  его  не  выражало
ничего, кроме безмятежного спокойствия и уверенности в успехе.
     И он оказался прав. Сражение с готами, с которыми они встретились  на
следующий же день утром, принесло ему новую славу. Как и в битве с королем
Линги, он один обращал в бегство сотни неприятельских воинов. Появляясь то
здесь, то там верхом на своем могучем коне и всюду оставляя за собой  горы
трупов, он казался и друзьям и врагам одним из великих богов, спустившимся
с неба, чтобы подарить победу храбрейшим. Оба брата Гьюкинга старались  не
отстать от него, и готский  король,  потеряв  больше  двух  третей  своего
войска, был наконец  вынужден  отступить,  твердо  уверенный  в  том,  что
сражался с самими Асами.
     -  Ты  спас  нас  сегодня,  Сигурд,  -  сказал  Гуннар,   когда   они
возвращались назад после погони за бежавшим неприятелем. - Ты спас  нас  и
нашу страну. Как бы я хотел с тобой породниться!
     - И я тоже, - добавил Хогни, не любивший много разговаривать.
     - Что ж, лучших братьев, чем вы оба, мне не найти, - отвечал  Сигурд.
- Вы мужественные и честные люди, и я полюбил вас всей душой.
     - Если ты так думаешь, - произнес Гуннар, - то  давай  здесь  же,  на
этом поле, где мы вместе бились с врагом, совершим обряд братания.
     - Я готов, - сказал молодой Вольсунг, спрыгивая с коня.
     Оба брата тоже спешились. Гуннар подозвал своих воинов, и те, вырезав
длинную и широкую  полоску  дерна,  подняли  ее  на  копья.  Под  нее,  на
осыпавшуюся вниз землю, сначала ступил Сигурд, а за ним, на отпечаток  его
ноги по очереди наступили Гуннар и Хогни. Потом все трое  поцарапали  себе
руки и выдавили в оставшийся на  земле  след  по  нескольку  капель  своей
крови. После этого, по  древнему  обычаю,  оба  Гьюкинга  и  Сигурд  стали
кровными братьями и были обязаны мстить друг за друга.
     - А теперь опускайте дерн! - приказал Гуннар.
     Воины выдернули свои копья, и дерн упал на свое прежнее место - обряд
братания совершился.
     Торжественно и радостно возвращались  домой  победители.  Сам  старый
Гьюки, забыв о своих годах, выбежал им  навстречу.  Он  долго  прижимал  к
груди сыновей, а когда подошел к Сигурду, из его выцветших,  подслеповатых
глаз потекли горячие слезы.
     - Чем я вознагражу тебя, мой мальчик? - воскликнул он. -  Мой  замок,
моя страна - все к твоим услугам, как если бы ты был моим родным сыном!
     - Сигурд и так стал  твоим  сыном,  -  сказал  Гуннар,  -  мы  с  ним
побратались.
     - Вы хорошо поступили, - горячо ответил  старый  король.  -  И  пусть
проклят будет тот из вас, кто когда-нибудь нарушит свою клятву и  поступит
во вред нашему спасителю.
     Кримхильд с дочерью и Гуттунг поджидали героев в замке.  Нежные  щеки
Гудрун были румянее чем обычно, но они стали белее ее волос, когда  Сигурд
немного погодя сказал, что он уезжает в страну  гуннов.  Заметив  волнение
девушки, Кримхильд наклонилась к ней.
     - Успокойся, дочь моя, - прошептала она, - ступай к себе.  Все  будет
хорошо, поверь мне!
     В тот же вечер старая королева вышла из замка и ушла  одна  далеко  в
лес. Она вернулась только к ночи, скрывая под плащом пучок каких-то  трав,
и сразу же прошла к себе в спальню, приказав служанкам оставить  ее  одну.
Всю ночь из покоев Кримхильд доносился приятный запах неизвестного зелья и
слышалось зловещее бормотание. А наутро  одна  из  служанок  заметила  под
изголовьем своей повелительницы небольшой глиняный сосуд, который королева
тотчас же поспешно спрятала.
     После полудня в замок начали съезжаться многочисленные гости, которых
созвал Гьюки, желая получше отпраздновать победу над врагом,  и  к  заходу
солнца пиршество было уже в самом разгаре. На самом почетном месте,  между
старым королем и Гуннаром, сидел Сигурд. И хозяева и гости осушили  в  его
честь не один рог с медом, но сам богатырь пил мало и был молчаливей,  чем
обычно. Он думал о Брунхильд. Прошло около пяти месяцев с тех пор, как они
расстались, и приближался срок, когда он должен был отправиться за ней  ко
двору Атли.
     "А может быть, - говорил себе  юноша,  -  Брунхильд  меня  уже  давно
забыла или..."
     - О чем ты так задумался, Сигурд? -  прозвучал  совсем  рядом  с  ним
чей-то сладкий голос, и он  увидел  Кримхильд,  протягивающую  ему  рог  с
медом.
     - Выпей за счастье нашей семьи, отважный и великодушный сын Сигмунда,
- сказала она, ласково улыбаясь. - Выпей за то, чтобы боги  благоволили  к
нам так же, как они благоволят тебе, счастливейший из смертных.
     Боясь обидеть ее, Сигурд взял рог и, поднявшись во весь  рост,  выпил
его одним духом.
     "Какой странный вкус у этого меда", - подумал он, но в тот же  миг  в
голове у него так зашумело, что он поспешил снова сесть на свое место.
     - Что с тобой? - спросил Гуннар, наклоняясь к нему.
     - Ничего, - ответил юноша. - Просто у меня закружилась голова.
     - Хорош же у нас мед,  если  он  может  свалить  с  ног  даже  такого
богатыря, как ты! - засмеялся Гьюкинг.
     Но Сигурд не ответил на его смех. Он вдруг  почувствовал,  что  забыл
что-то очень важное, и не мог припомнить что.
     Стоя поодаль, Кримхильд со злорадной усмешкой на  бледных  старческих
губах несколько минут молча смотрела на  его  озабоченное  лицо,  а  потом
приказала слугам позвать дочь.
     - Поднеси Сигурду мед, дитя мое, -  сказала  она  девушке,  когда  та
явилась, и подала Гудрун второй рог.
     Опустив глаза, Гудрун нерешительно приблизилась к богатырю.
     - Выпей этот мед, Сигурд, - еле слышно проговорила она.
     Молодой Вольсунг поднял голову, и их глаза на мгновение встретились.
     "Какая  же  она  красивая!  -  пронеслось  в  голове  у  Сигурда.   -
Удивительно красивая! А я почти пять месяцев не обращал на  нее  внимания!
Хотя, может быть, это и есть то, о чем я забыл?"
     - Спасибо, Гудрун, и будь счастлива, - сказал он вслух, беря у нее из
рук рог.
     - Будь счастлив и ты, - ответила девушка.
     Их глаза встретились снова, и, когда Гудрун возвращалась к матери, ее
лицо впервые за последние несколько месяцев было довольным и радостным.
     Прошло  еще  несколько  дней,  Сигурд  уже  не  вспоминал  больше   о
Брунхильд. Теперь ему казалось, что он из Гнитахейде прямо приехал сюда, а
когда однажды Гуннар спросил его как-то, зачем он едет к Атли,  юноша  был
очень удивлен.
     - Я? К Атли?! - воскликнул он. - Разве я собирался к нему ехать? Нет,
Гуннар, я останусь у вас пока... Скажи лучше, что бы ты ответил, если бы я
посватался к твоей сестре, Гуннар?
     Услышав это, Гьюкинг в восторге схватил его за руку и увлек за собой.
Так они проследовали через весь замок  и  наконец  оказались  на  половине
короля и королевы.
     - Отец, мать!  -  громко  объявил  Гуннар,  подводя  к  ним  молодого
Вольсунга. - Мой названый брат просит руки вашей дочери. Что вы ему на это
скажите?
     - Я рад, - нерешительно заговорил старый король. - Я уже давно считал
тебя своим сыном, друг мой, но как же твоя не...
     - Мы рады, очень рады,  Сигурд!  -  поспешно  воскликнула  Кримхильд,
перебивая мужа и бросая на него быстрый, гневный взгляд. - И мне  кажется,
что и моя дочь будет рада. Позови сестру, Гуннар!
     Молодой Гьюкинг стремительно бросился за Гудрун и тут же  привел  ее,
счастливую и смущенную.
     - Сигурд просит твоей руки, - сказала ей Кримхильд. - Согласна ли  ты
стать его женой?
     - Я была согласна раньше,  чем  он  попросил  вас  об  этом,  -  тихо
отвечала Гудрун и поспешно отвернулась.
     - Ну как, Гьюки, разве не права я была? - засмеялась королева,  когда
они с мужем вновь остались одни. - Вот видишь,  Сигурд  сам  посватался  к
нашей дочери.
     - Да, ты права, - согласился  старый  король.  -  А  все-таки,  -  со
вздохом добавил он, - здесь таится какой-то обман, не может быть  счастья,
и я боюсь за наших детей, Кримхильд.



                            ЖЕНИТЬБА ГУННАРА

     Со дня свадьбы Сигурда и Гудрун прошло не более  года,  когда  старый
Гьюки тяжело заболел и  через  несколько  дней  тихо  скончался  на  руках
сыновей и дочери. Еще раньше него  умерла  Кримхильд.  Перед  смертью  она
приказала позвать к себе своего любимца Гутторна и о чем-то  долго  с  ним
говорила, после чего тот стал еще более скрытным, чем прежде.
     Как старший сын,  Гуннар  унаследовал  все  имущество  короля  и  был
провозглашен королем, но его дружба с Сигурдом от этого не  ослабла  и  он
по-прежнему не отпускал его от себя.
     - Тебе незачем возвращаться в Данию, - сказал он  ему  однажды.  -  У
Хиальпрека много других внуков, а пока ты живешь в нашей стране, ею правят
два короля. Да и для нас это лучше, - улыбнулся он, - потому  что  со  дня
битвы с готами ни один враг не осмеливается напасть на страну, которую  ты
защищаешь. Правда, у тебя нет собственного королевства,  но  я  не  женат,
Хогни тоже, и твои дети наследуют наше королевство.
     - А почему бы тебе не жениться? - спросил его Сигурд. - Неужели  тебе
не хочется иметь детей, которым бы ты мог передать свое имя?
     - Говоря по правде, я и  сам  давно  об  этом  подумываю,  -  отвечал
Гуннар, - но я не знаю, на ком остановить свой выбор.
     - Послушай, Гуннар, - сказал младший Гьюкинг. - Только что из  страны
гуннов приехал путник. Он рассказал, что король Атли  хочет  выдать  замуж
свою сестру, которая, по слухам, так прекрасна, что  ни  одна  девушка  не
может с ней сравниться. Но она дала богам клятву, что мужем ее будет самый
смелый человек на земле, и окружила свой замок стеной из  огня.  Тот,  кто
сумеет туда пробраться, и станет шурином короля Атли.
     - Вот бы тебе к ней посвататься, Гуннар, - заметил Гутторн  с  хитрой
усмешкой. - Ведь ты, наверное, не побоишься пройти сквозь пламя.
     - Скажи лучше, как зовут эту красавицу? - спросил Гуннар.
     - Ее  зовут  Брунхильд,  -  отвечал  Гутторн,  искоса  поглядывая  на
Сигурда.
     - Брунхильд? - повторил молодой Вольсунг, невольно вздрогнув.  -  Мне
знакомо это имя, но я не могу припомнить, где я его слышал.
     - Где бы ты раньше  ни  слышал,  теперь  тебе  придется  слышать  его
гораздо чаще! - засмеялся Гуннар.  -  Я  твердо  решил  жениться  на  этой
недоступной деве, Сигурд, и для этого пройду хотя бы сквозь  три  огненные
стены. Не поедешь ли ты вместе со мной к Атли?
     - Охотно! - воскликнул Сигурд. - Я уже давно хотел побывать  у  этого
могущественного короля и еще больше хочу, чтобы ты добился руки Брунхильд.
Когда ты хочешь ехать?
     - Завтра же, - сказал Гуннар вставая. - Надо  торопиться,  чтобы  нас
кто-нибудь не опередил.
     - Разрешите и мне вам сопутствовать, - попросил  Гутторн.  -  Я  тоже
хочу побывать у Атли, а Хогни будет тем временем охранять замок.
     - Хорошо, - промолвил молодой король, который, хотя и не любил своего
сводного брата, не хотел его обидеть. -  Я  согласен  и  оставлю  в  замке
одного Хогни. А теперь прощайте, я иду собираться в дорогу.
     "Брунхильд, - снова и снова повторял про себя Сигурд, -  Брунхильд...
Мне кажется,  что  я  забыл  что-то  очень  важное,  но  что,  я  не  могу
припомнить".
     Владения  короля  Атли  начинались  тут  же,  за  Рейном,  гранича  с
королевством  Гьюкингов,  и  Гуннар,  Сигурд  и  Гутторн  в  сопровождении
небольшой конной дружины уже на пятый день добрались до его замка.
     Грозный повелитель  гуннов,  известный  повсюду  своей  суровостью  и
жестокостью, принял их необычно ласково; когда же он посмотрел на Сигурда,
на его широком скуластом лице появилась довольная усмешка.
     - Я знаю, кто ты, хотя и вижу тебя  впервые,  -  произнес  он.  -  Ты
Сигурд, сын Сигмунда из рода Вольсунгов. Я думаю, что знаю также, зачем ты
ко мне приехал.
     - Мы приехали  сватать  твою  сестру  Брунхильд,  -  отвечал  молодой
Вольсунг, - которая...
     - ...которая уже соскучилась, дожидаясь тебя,  Сигурд,  -  со  смехом
перебил его Атли, сверкая белыми и острыми как у волка, зубами. - Ради нее
тебе придется пройти сквозь огненную стену, но для  такого  богатыря,  как
ты, это, конечно,  не  страшно.  Ну  что  ж,  я  рад  буду  породниться  с
обладателем сокровищ Фафнира и потомком самого Одина.
     - Ты ошибаешься, Атли, - возразил Сигурд. - Я  уже  больше  года  как
женат. Не я, а мой шурин, король Гуннар из  рода  Гьюкингов,  сватается  к
Брунхильд и готов пройти ради нее сквозь пламя.
     - Да, Атли, это я, Гуннар, сын Гьюки,  сватаюсь  к  твоей  сестре,  -
сказал молодой король, выступая вперед.
     Улыбка сбежала с лица Атли, а его и без того узкие глаза превратились
в щелки.
     - Итак, Сигурд уже женат, - промолвил он тихо, как бы  говоря  сам  с
собой,  а  потом  уже  громко  добавил:  -  Моя  сестра,  Гуннар,  по   ее
собственному желанию, достанется тому, кто пройдет  к  ней  сквозь  пламя.
Если это тебе удастся, она будет твоей женой.
     - Это мне удастся, Атли, - гордо ответил Гуннар.  -  Скажи,  где  мне
найти замок Брунхильд.
     Атли снова усмехнулся, но на этот раз хмуро и злобно.
     - Поезжайте на юго-восток отсюда, и часа через два вы будете на  горе
Гиндарфиаль, - ответил он. - Там стоит замок моей сестры, и там ты сможешь
доказать свою храбрость, Гуннар.
     Друзья попрощались с гунном и уже хотели уйти, но в  это  время  Атли
вдруг обратился к Сигурду:
     - Я вижу, ты живешь у Гьюкингов, сын Сигмунда, - сказал он. -  Твоему
шурину это, конечно, нравится - пока ты с ним, на него не нападет ни  один
враг, - но прилично ли для такого героя, как  ты,  не  иметь  собственного
королевства? Приезжай ко мне,  Сигурд.  Я  дам  тебе  большую  дружину,  с
которой ты завоюешь много земель и станешь могущественным  королем.  Тогда
нас с тобой будет бояться весь мир.
     Сигурд улыбнулся Гуннару, который со страхом ждал его ответа.
     - Нет, Атли, - возразил он. - Если бы я хотел стать королем, я бы уже
давно им был. Я убил короля Линги и  вернул  назад  королевство  отца,  но
отдал его своему  деду  Хиальпреку.  Я  убил  Фафнира  и  захватил  золото
Андвари, но оно лежит нетронутым в сокровищнице Гуннара. Я не хочу власти!
Я не хочу завоевывать чужие земли,  Атли!  С  меня  довольно  моей  славы,
доброго имени и верных друзей!
     Повелитель  гуннов  встал  со  своего  трона  и  подошел  к  молодому
Вольсунгу. Он был широкоплеч и коренаст, но невысок ростом, и  его  голова
едва доходила до груди богатыря.
     - Как хочешь, Сигурд, как хочешь, - промолвил он, глядя на него снизу
вверх. - Я не буду тебя уговаривать, но помни: придет день, и ты пожалеешь
о том, что отказался покинуть Гуннара. И лучшие друзья  подчас  становятся
злейшими врагами. Прощай!
     - Странные вещи говорил Атли,  -  сказал  Гуннар,  когда  они,  опять
вскочив на лошадей, поскакали по направлению к Гиндарфиалю.  -  Почему  он
думал, что это ты, Сигурд, собираешься жениться на Брунхильд, и почему  мы
должны когда-нибудь стать врагами?
     - Не знаю, Гуннар, - задумчиво отвечал богатырь. - Я тоже  многое  не
понял из его слов.
     - Зато я понял, - прошептал Гутторн, но так тихо, что  его  никто  не
расслышал.
     - Смотрите, смотрите! - вдруг закричал один из  дружинников  Гуннара,
поднимаясь на стременах и показывая  рукой  вдаль.  -  Впереди  нас  видно
зарево.
     - Правда, - согласился Сигурд, посмотрев в  ту  же  сторону.  -  Это,
должно  быть,  Гиндарфиаль.  Жарко  же  горит  пламя  вокруг  замка  твоей
избранницы, Гуннар!
     Молодой король, не отвечая,  пустил  своего  коня  в  галоп.  Путники
промчались  по  широкой,  поросшей  кустарником  долине,  потом  пересекли
небольшой  лес  и,  выехав  на  открытое  место,  наконец  увидели   замок
Брунхильд. Гора Гиндарфиаль, на которой он стоял, была невысока  и  полога
и, скорее, походила на большой  холм.  Вокруг  нее  бушевали  вырывавшиеся
из-под земли длинные  языки  пламени.  Жар  от  них  был  так  велик,  что
чувствовался за несколько сот шагов.
     Сигурд покачал головой.
     - Тебе не удастся пройти сквозь огонь пешим, Гуннар, - сказал  он.  -
Ты заживо изжаришься в своей броне. Попробуй  проскочить  сквозь  него  на
коне.
     - Я так и сделаю, - отвечал Гуннар и, недолго думая вихрем помчался к
горе.
     Сигурд и воины из дружины Гьюкингов затаив дыхание  следили  за  ним.
Король подскакал уже почти к самому огню, но тут его конь встал на дыбы и,
несмотря на все понукания всадника, повернул назад. Гуннар с  досады  рвал
на себе волосы.
     - Что мне делать, Сигурд, что мне делать? - восклицал он, возвращаясь
к своим путникам. - Может быть, попробовать еще раз на какой-нибудь другой
лошади?
     - Возьми моего Грани, - предложил ему Вольсунг, спрыгивая с седла.  -
Я думаю, что он не испугается.
     -  Спасибо  тебе,  Сигурд,  я  не  забуду  твоей  услуги!   -   вновь
развеселившись, отвечал Гуннар, быстро слезая  со  своего  коня  и  садясь
верхом на серого жеребца Вольсунга. - На нем я преодолею  любую  преграду.
Вперед, Грани!
     Но потомок Слейпнира не тронулся с места - он признавал только своего
хозяина.
     - Вперед, Грани! - крикнул Сигурд, надеясь, что тот его послушается.
     Умное животное искоса посмотрело на него, в раздумье повело  ушами  и
вдруг неожиданным резким движением сбросило с себя Гуннара.
     - Клянусь всеми богами, - проворчал Гьюкинг, подымаясь с земли,  -  я
первый раз падаю с лошади! Но мне не обидно. Твой  конь,  Сигурд,  так  же
могуч, как и ты сам. Но как же мне все-таки достигнуть замка? - воскликнул
он, снова помрачнев. - Для меня лучше погибнуть,  чем  вернуться  домой  с
пустыми руками.
     - Есть одно  средство,  -  сказал  Гутторн,  до  сих  пор  безучастно
глядевший на неудачи своего брата.  -  Мать,  умирая,  открыла  мне  тайну
заклинаний, с помощью которых люди могут обмениваться  своей  наружностью.
Только их глаза и голос остается прежним. Превратись на время в Сигурда, а
Сигурд пусть превратится в тебя.
     - Но я не хочу жениться на  Брунхильд  в  чужом  образе,  -  возразил
Гуннар.
     - Тогда на ней может жениться Сигурд, приняв твое обличье, -  ответил
Гутторн. - А на следующий день вы снова станете самими собой.
     - Нет, - решительно сказал Гуннар, - я не буду рисковать жизнью друга
даже ради такой красавицы.
     - Не бойся, - рассмеялся Сигурд. - Грани легко перенесет  меня  через
огонь!
     Гуннар  долго  колебался,  но  стыд  перед  неудачей  пересилил   его
сомнения, и он в конце концов уступил настояниям друга. Не желая, чтобы их
дружинники знали о том, что они собираются сделать, молодой король, Сигурд
и Гутторн скрылись в лесу, когда спустя пол часа, они вновь вышли  оттуда,
Сигурд стал уже Гуннаром, а Гуннар  -  Сигурдом.  Лишь  Грам,  по-прежнему
висевший на боку у Вольсунга да его большие голубые глаза могли бы  выдать
их обман, но поджидавшие их на опушке воины ничего не заметили.
     - Ну и силен же ты, Сигурд! - прошептал Гуннар  на  ухо  приятелю.  -
Теперь, когда у меня твои руки, я могу вырвать с корнем большое дерево.
     - И ты тоже не слаб, - ответил богатырь. - Но я боюсь,  что  меня  не
узнает даже Грани.
     И, подойдя к своему коню, он заговорил с ним вполголоса:
     - Успокойся, Грани, успокойся. Это я, твой хозяин.
     Не зная, чему верить - своим  ушам  или  глазам,  -  могучий  жеребец
тревожно заржал, переступая с ноги на ногу, но, когда  Сигурд,  вскочив  в
седло, привычным для него движением взялся за поводья, он сразу успокоился
и,  подчиняясь  руке  Вольсунга,  как  птица  рванулся  вперед,  навстречу
огненной преграде.
     - Скачи, скачи, - чуть слышно произнес Гутторн. - Может быть, там  ты
найдешь свою погибель, и тогда твои богатства достанутся мне.
     Он еще не договорил последних слов, как Сигурд достиг горы и исчез  в
окружавшем ее пламени. На одно мгновение нестерпимый жар  охватил  его  со
всех сторон, опаляя брови  и  волосы,  но  тут  же  в  лицо  снова  пахнул
прохладный ветер. Грани проскочил сквозь огонь и поскакал вверх по склонам
Гиндарфиаля.
     Навстречу Сигурду из дверей замка выбежала Брунхильд.
     - Это ты, это ты! - радостно воскликнула  она,  но  потом  неожиданно
остановилась и широко раскрытыми глазами уставилась на Вольсунга.
     Сигурд тоже молчал, не зная, что сказать.
     "Какая красавица! - подумал он. - Но мне кажется,  что  я  не  только
слышал ее имя, но и видел ее когда-то. Неужели во сне?"
     - Кто ты такой? - вдруг резко спросила Брунхильд.
     Вольсунг смутился: Он не любил лгать.
     - Я король Гуннар, сын Гьюки, - проговорил он наконец.
     - А откуда у тебя этот конь и этот меч? - все так же резко продолжала
выпытывать девушка.
     - Коня и меч  мне  дал  мой  шурин  Сигурд,  -  нерешительно  отвечал
богатырь. - Но почему ты об этом спрашиваешь?
     - Твой шурин Сигурд? - внезапно побледнев,  повторила  Брунхильд,  не
отвечая на его вопрос. - Твой шурин Сигурд? Так, значит, Сигурд женат?
     - Да, женат на моей сестре Гудрун, и уже  больше  года,  -  промолвил
Вольсунг.
     "Как странно, она говорит так, как будто меня знает",  -  добавил  он
про себя.
     Бывшая валькирия опустила голову и, закрыв лицо руками, пошла обратно
к замку. На его пороге она повернулась и уже более спокойно сказала:
     - Прости меня, я забыла свое обещание. Ты прошел сквозь  пламя,  и  я
должна стать твоей женой. Добро пожаловать, супруг мой!
     Сигурд медленно слез с коня  и  неохотно  последовал  за  девушкой  в
замок. Так же неохотно принял он ее приглашения сесть за богато украшенный
стол и почти не притронулся к стоящим на нем кушаньям.
     Брунхильд пристально посмотрела на него.
     - Ты чем-то недоволен? Может быть, я тебе  не  нравлюсь?  -  спросила
она.
     - Кому не понравится такая красавица, как  ты!  -  искренне  произнес
Сигурд. - Но я проделал большой путь, устал и хочу лечь.
     Не говоря ни слова, Сигурд встал и, стараясь не смотреть на  девушку,
пошел в спальню.
     Тут он, как был, в броне и кольчуге,  бросился  на  кровать,  положив
рядом с собой вынутый из ножен меч.
     - Разбуди меня утром пораньше, - пробормотал он и  тут  же  притворно
захрапел.
     Ночная тьма еще не успела рассеяться и небо  на  востоке  еще  только
начинало светлеть, когда Сигурд поднялся на ноги.
     "Мне надо ехать, и как можно скорей, - решил он. - Лгать я  не  умею,
да и Гуннар, наверное, устал меня дожидаться".
     - Скажи Брунхильд, - обратился он к девушке, - когда и  как  я  смогу
взять тебя с собой?
     - Это не трудно сделать, Гуннар, - отвечала красавица. - Огонь вокруг
горы Гиндарфиаль вырывается из пещер гномов, которые разожгли его по  моей
просьбе. Они же и потушат его, лишь только ты вторично проедешь над  ними.
Тогда ты пришлешь за мной свою свиту и лошадей.
     - Хорошо, я сейчас же еду, - сказал Сигурд, радуясь, что  вскоре  уже
не надо будет притворяться.
     - Подожди, Гуннар,  -  вдруг  что-то  вспомнила  Брунхильд,  поспешно
снимая с пальца маленькое золотое кольцо и подавая  его  богатырю.  -  Вот
Андваранаут, кольцо гнома Андвари. Говорят, на нем лежит проклятье  и  оно
приносит гибель всем, кто его носит. Если ты  не  боишься,  прими  его  от
меня. Мне оно больше не нужно.
     - Андваранаут! - вскричал  Сигурд  вне  себя  от  удивления.  -  "Мое
кольцо", - хотел он добавить,  так  как  ясно  помнил,  что  нашел  его  в
сокровищах Фафнира, но вовремя удержался и уже спокойно сказал: - Спасибо,
Брунхильд, я беру его. Скажи только, как оно к тебе попало?
     - Не все ли тебе равно, Гуннар?  -  с  печальной  улыбкой  промолвила
Брунхильд. - Может быть, когда-нибудь ты и сам об этом узнаешь,  а  сейчас
поезжай. Я буду ждать твою свиту.
     Не сказав больше ни слова, Сигурд  со  вздохом  облегчения  вышел  из
замка и пустился в обратный путь. Он был так погружен в  свои  мысли,  что
даже не заметил, как снова проехал сквозь пламя, которое после  этого  тут
же, словно по волшебству, погасло.  Гуннар  нетерпеливо  поджидал  его  на
опушке леса. Рядом с ним стоял Гутторн. На его  лице  при  виде  Вольсунга
появилась кислая гримаса.
     - Посылай за Брунхильд лошадей  и  дружину,  Гуннар,  -  тихо  сказал
Вольсунг молодому королю, подъезжая к нему, - и через какой-нибудь час  ты
увидишь свою жену.
     И  он  рассказал  Гьюкингу  обо  всем,  что  произошло  между  ним  и
Брунхильд, умолчав, однако, об Андваранауте, который, сам не зная  почему,
спрятал на своей груди.



                              ССОРА КОРОЛЕВ

     В тот же день, около полудня, Брунхильд покинула свой замок  на  горе
Гиндарфиаль и в  сопровождении  Гуннара  и  его  спутников  отправилась  в
королевство Гьюкингов. Молодой король сиял от счастья.  Он  ехал  рядом  с
женой, любуясь ее необычайной красотой и не замечая, что ни она, ни Сигурд
Гутторном не разделяют его  веселья.  Едва  увидев  Вольсунга,  уже  снова
принявшего свой прежний облик, Брунхильд изменилась в  лице  и  потом  всю
дорогу была мрачной. Ее наморщенный лоб и сдвинутые брови выдавали  тайные
думы, а смех звучал  неискренне  и  печально.  Сигурд  молчал  и  старался
держаться поодаль от обоих супругов. Перед его глазами то и дело  вставала
высокая гора, блестящий, сложенный из щитов шатер на ее вершине, а рядом с
ним девушка с распущенными каштановыми волосами, напоминающая  ему,  чтобы
он не забыл о своей клятве.
     "Сон это или явь? - думал он. - Видел ли я ее прежде, а  если  видел,
то как мог забыть?"
     Гутторн исподтишка следил за Вольсунгом и, казалось, читал его мысли.
     - Видно, волшебный напиток моей матери постепенно теряет свою силу, -
шептал сводный брат короля, и на его сумрачном, некрасивом лице  появилась
едва заметная злая улыбка. - Посмотрим, что будет дальше.
     Веселость  Гуннара  росла  с  каждым  днем  по  мере  того,  как   их
путешествие подходило к концу, но его возвращение в замок было  далеко  не
таким радостным, как он того ожидал. Войдя в дом  своего  мужа,  Брунхильд
холодно поприветствовала  Хогни,  резким  движением,  почти  с  ненавистью
отстранилась от Гудрун, которая пыталась обнять невестку, и, не сказав  ей
ни слова, молча ушла в свои покои.
     - Странная у тебя жена, Гуннар, - удивленно заметил Хогни. -  Правда,
она очень красива, но мне кажется, что у нее злое сердце.
     - Ничего, - немного смутившись, отвечал король, стараясь не  смотреть
в полные слез глаза сестры. - Она еще к нам не привыкла.  Через  несколько
дней все будет иначе.
     Но проходили дни и недели, а ничего не менялось. Брунхильд  старалась
как можно реже встречаться  с  Гудрун,  а  если  та  с  ней  заговаривала,
отвечала холодно, даже  враждебно.  Не  понимая  причины  этой  ненависти,
молодая женщина часто плакала, и ее  горе  еще  усиливалось  от  перемены,
происшедшей в Сигурде. Он почти не разговаривал с женой и по целым дням не
бывал дома, то уходя на охоту, то навещая кого-нибудь из соседей.  Лежащий
у него за пазухой Андваранаут жег ему грудь. Теперь он уже не  сомневался,
что сам подарил его  бывшей  валькирии,  хотя  память  его  все  еще  была
затуманена и он не понимал, когда и как это случилось. Наконец,  чтобы  не
думать больше о роковом кольце, он отдал его  Гудрун,  рассказав  ей,  как
получил его под видом Гуннара, но скрыв, что оно раньше принадлежало ему.
     "Уж не подозревает ли Брунхильд, что ее обманули? - подумала  Гудрун,
выслушав рассказ Вольсунга. - Может быть, поэтому она меня и ненавидит? Но
ведь мой брат хорошего рода, молод, красив и  храбр,  и  она  должна  быть
счастлива, что стала его женой!"
     И она решила при  первом  же  случае  еще  раз  заговорить  со  своей
невесткой и попытался с ней подружиться.
     Через несколько дней после этого разговора из Дании прискакал  гонец,
привезший Вольсунгу печальную весть. Предчувствие Гьердис ее не  обмануло:
она умерла, так и не дождавшись возвращения сына. Тяжелое  горе  заставило
Сигурда забыть на время о прекрасной валькирии, и  он  поспешно  выехал  к
Хиальпреку, чтобы справить у него поминки по матери.
     Он отсутствовал уже более месяца, когда однажды, гуляя  около  речки,
Гудрун заметила сквозь кусты купающуюся Брунхильд.
     "Вот случай, которого я искала: теперь мне удастся с ней поговорить!"
- сказала она себе и, проворно раздевшись, бросилась в воду.
     Однако все произошло не так,  как  она  думала.  Заметив  ее,  бывшая
валькирия быстро отошла на несколько шагов в сторону и воскликнула, гневно
сверкнув глазами:
     - Не смей подплывать ко мне близко, я не хочу,  чтобы  вода,  которая
омывает твое тело, касалась и меня! Я королева, а ты жена бывшего пленника
датского короля, а ныне - слуги моего мужа!
     - Победитель дракона Фафнира  не  нуждается  в  короне,  -  возразила
Гудрун, гордо подымая свою белокурую голову. - Сигурд никогда не был и  не
будет ничьим слугой. Короли гордятся его дружбой, и среди них  нет  никого
кто бы был храбрее и богаче моего мужа.
     - Да, я уже слышала, что он убил какого-то  дракона  и  захватил  его
сокровища, - презрительно усмехнулась Брунхильд. - Но все-таки  не  он,  а
мой муж - король этой страны, не он, а мой муж  -  храбрейший  человек  на
свете, потому что не Сигурд, а Гуннар прошел сквозь пламя, чтобы  получить
меня в жены!
     - Не Сигурд, а Гуннар прошел сквозь пламя? - повторила Гудрун. -  Так
ты ничего не знаешь?
     - Да, да, не Сигурд, а Гуннар! - почти закричала  Брунхильд.  -  Твой
Сигурд жалкий трус по сравнению с моим мужем, и ты недостойна даже  стоять
рядом со мной, женой такого героя!
     Кровь бросилась в голову Гудрун. Уже не осознавая,  что  делает,  она
шагнула вперед и поднесла к лицу бывшей валькирии свою  руку,  на  которой
ярко сверкал Андваранаут.
     - А это кольцо ты тоже дала  Гуннару?  -  спросила  она  дрожащим  от
волнения голосом. - Так объясни же, как оно попало ко мне. Уж  не  думаешь
ли ты, что его подарил мне мой брат?
     Брунхильд пошатнулась и схватилась рукой за сердце.
     - Откуда оно у тебя? - еле слышно произнесла она.
     - Я получила его от того, кто прошел сквозь огненную стену, от  моего
мужа, Сигурда!  -  торжествующе  сказала  Гудрун,  успокаиваясь  при  виде
волнения невестки.
     - Ты лжешь! - снова закричала та. - Ты лжешь!
     - Я лгу? - рассмеялась Гудрун. И это говоришь ты,  мудрая  валькирия?
Да разве Грани пошел бы под кем-нибудь другим, кроме своего хозяина? Разве
ты сама не сумела отличить голубых глаз Сигурда от серых глаз моего брата?
     Но Брунхильд  ее  уже  не  слушала.  Разбрызгивая  кругом  воду,  она
стремительно выскочила на берег и,  подхватив  на  ходу  свое  платье,  не
оглядываясь, побежала к замку.
     "Уж не сказала ли я чего-нибудь лишнего? - подумала Гудрун, оставшись
одна. - Но ведь Брунхильд сама виновата: зачем она меня оскорбила?"
     Взволнованная и опечаленная своим разговором  с  невесткой,  она  еще
долго купалась, а потом гуляла по окрестностям  замка  и  вернулась  домой
только к ночи. Тут ее поджидал встревоженный Гуннар.
     - С Брунхильд что-то случилось, - сказал он.  -  Она  не  выходит  из
своей спальни, не ест, не пьет и все время молчит. Уж не околдовал  ли  ее
кто-нибудь?
     Гудрун опустила глаза: ей не хотелось рассказывать об их ссоре.
     - Я ничего не знаю, брат, - тихо отвечала  она  и  поспешила  уйти  к
себе.
     Все последующие дни Брунхильд не выходила ни к завтраку, ни к  обеду,
ни к ужину. Забившись в угол и уставившись глазами в  стену,  она,  словно
окаменев, не двигалась с места  и  не  отвечала,  когда  ее  о  чем-нибудь
спрашивали. Гуннар был в отчаянии.
     - Пойди к ней, Хогни, - умолял он  брата.  -  Может  быть,  тебе  она
объяснит, что с ней произошло.
     Хогни с недовольным видом отправился  к  бывшей  валькирии  и  вскоре
вернулся обратно.
     - Лучше оставь  ее  в  покое,  Гуннар,  -  сердито  проворчал  он.  -
По-моему,  она  просто  капризничает.  Еще  день,  два,   и   все   пойдет
по-прежнему.
     Король недоверчиво покачал головой, а стоявшая тут же Гудрун, которая
чувствовала свою вину  перед  невесткой,  хотя  и  не  понимала  ее  горя,
нерешительно предложила:
     - Давай я сама поговорю с  ней,  Гуннар.  Мне  кажется,  что  это  не
колдовство и не простой каприз.
     Робко войдя в спальню королевы и увидев ее воспаленные  от  бессонных
ночей красные веки и бледно-матовое, как у покойницы, лицо, Гудрун  не  на
шутку испугалась.
     - Брунхильд, Брунхильд, -  позвала  она.  -  Это  я,  Гудрун,  пришла
повидаться с тобой.
     Темно-синие глаза валькирии оставались неподвижными и  безжизненными.
Казалось, она ничего больше не видела и не слышала.
     - Брунхильд! - не выдержав, заплакала  Гудрун.  -  Успокойся,  Гуннар
любит тебя больше всего на свете и в своей храбрости не уступает  Сигурду.
Он не прошел сквозь огонь только потому, что Грани его не послушался.
     И, бросившись на колени перед невесткой,  она  обняла  ее  руками  за
талию.
     Брунхильд не шевельнулась, не  пыталась  вырваться,  и  на  мгновение
Гудрун почудилось, что она обнимает труп.
     - О, боги, что я наделала! - в отчаянии  вскричала  она,  выбегая  из
спальни.
     Часом позже, незадолго до заката солнца, в замок прискакал Сигурд. Он
вернулся еще более мрачным, чем поехал, и без обычной теплоты  ответил  на
объятия жены, но Гудрун приписала это его тоске по матери.
     - Ах, Сигурд, если бы ты только знал, что я наделала! - чистосердечно
призналась она. - Я показала Брунхильд Андваранаут, и теперь она  вот  уже
который день не ест, не пьет, не спит,  и  того  и  гляди,  расстанется  с
жизнью.
     Богатырь вздрогнул.
     - Как же ты могла раскрыть ей нашу тайну? - воскликнул он.  -  Знаешь
ли ты, что теперь она возненавидит меня, как самого злейшего врага,  и  мы
должны будем немедленно уехать из замка твоего брата!
     - Но почему же, Сигурд?  -  не  поняла  Гудрун.  -  За  что  ей  тебя
ненавидеть? Разве Гуннар так плох? Не лучше ли тебе поговорить с Брунхильд
и попросить у нее прощения?
     - Мне с Брунхильд? - медленно произнес Вольсунг. - Нет, она...
     Он не успел договорить, так как  в  это  время  в  дверях  показались
Гуннар и Гутторн, которого тоже вот уже целую неделю не было в замке.
     - Прости меня, Сигурд, - обратился к своему другу старший Гьюкинг,  -
но мой сводный брат уверяет, что Брунхильд заколдована  и  что  только  ты
один можешь избавить ее от этих чар.
     - Да, это так, - подтвердил Гутторн, с лукавой усмешкой поглядывая то
на короля, то на богатыря. - Поговори с ней,  сын  Сигмунда,  и  ей  сразу
станет лучше.
     - Помоги ей, Сигурд! - попросила его и Гудрун, ласкаясь к мужу.
     Вольсунг с минуту колебался, а потом выпрямился и решительно  тряхнул
головой.
     - Хорошо, если вы все этого хотите, я пойду к ней, - сказал он.
     Когда богатырь открыл дверь в королевскую спальню, Брунхильд  уже  не
сидела в своем углу, а стояла у окна, и ее глаза  снова  блестели,  как  и
прежде.
     - Я ждала тебя, Сигурд, - промолвила она спокойно. - Я слышала  топот
Грани, а потом в замке раздался твой голос, и он заставил меня очнуться от
моих мыслей, ток же как разбудил когда-то от сна. Хотя, пожалуй,  было  бы
лучше, если бы я совсем не просыпалась.
     - Скажи мне, о чем ты горюешь? - спросил ее Вольсунг.
     -  И  ты,  ты,  Сигурд,  об  этом  меня  спрашиваешь!  -  воскликнула
валькирия. - Скажи лучше, что сталось с моими клятвами!  Я  обещала  богам
выйти замуж за самого храброго человека в мире, а он  женился  на  другой.
Затем я поклялась стать женой того, кто проберется ко мне в  замок  сквозь
огненную стену. Тебе лучше знать, сдержала ли я свое слово!
     - Но ведь Гуннар тоже очень храбр и не менее знаменит, чем я  сам,  -
смущенно проговорил Сигурд. - Он...
     - Каким бы он ни был, в моем сердце ему нет места! -  резко  перебила
его Брунхильд. - Разве он убил дракона? Разве он меня разбудил?  Разве  он
дважды проехал сквозь пламя? Нет, это сделал другой, тот,  кто  так  легко
забыл свою клятву!
     - Да, я забыл ее, Брунхильд, - сказал  Вольсунг,  опуская  голову.  -
Забыл тебя, забыл нашу встречу, хотя и не понимаю, как  это  случилось.  Я
ясно вспомнил об этом только теперь, когда  возвращался  из  Дании.  Скажи
мне, чего ты хочешь?
     - Твоей смерти! - порывисто вскричала  королева.  -  И  только  твоей
смерти! Больше я ничего не хочу!
     - Ты скоро дождешься ее,  Брунхильд,  -  сурово  и  спокойно  ответил
Вольсунг. - Фафнир предсказал мне, что  я  скоро  погибну,  и  мое  сердце
говорит мне то же самое.
     Суровое лицо валькирии немного смягчилось.
     -  Я  догадываюсь,  что  тебя   дали   волшебный   напиток,   который
затуманивает память, - проговорила она наконец, опускаясь на скамью. - Это
могла сделать только Кримхильд. Я знаю, она была колдуньей. О горе мне!  -
опять воскликнула она, хватаясь за голову. - Мое сердце рвется к  тебе,  а
ты меня ненавидишь!
     - Я ненавижу тебя, Брунхильд? -  удивленно  повторил  Сигурд,  садясь
рядом с ней. Я ненавижу себя за  то,  что  смог  забыть  нашу  встречу!  Я
ненавижу себя за то, что женился на другой!  Я  снова  люблю  тебя,  люблю
больше, чем когда бы то ни было! Уедем  отсюда,  поедем  в  Данию,  или  к
франкам, или к твоему брату Атли и будем жить вместе.
     - Нет! - твердо сказала Брунхильд вставая. - Никогда! Никогда у  меня
не будет второго мужа, и недостойно тебя, Сигурд, предлагать мне это.
     - Я не понимаю тебя, Брунхильд, - покачал головой Вольсунг. -  То  ты
говоришь, что я тебе дорог, то желаешь  моей  смерти.  То  ты  не  желаешь
видеть Гуннара, то хочешь остаться ему верной. Я еще и еще  раз  спрашиваю
тебя: чего ты хочешь?
     - Разве я сама это знаю? - возразила  валькирия.  -  Я  хотела  твоей
любви,  но  она  принадлежит  не  мне,  а  этой  ненавистной  белокурой  и
голубоглазой Гудрун. Я хотела выйти замуж за Сигурда, а вышла за  Гуннара,
а теперь не хочу ни того, ни другого. Ах, если бы мы оба умерли!  Для  нас
это было бы лучше всего! Прощай!
     И она показала Сигурду на дверь.
     Повинуясь ее знаку, богатырь безмолвно вышел и, сказав  Гуннару,  что
Брунхильд лучше и что она теперь снова разговаривает, покинул замок.
     До  поздней  ночи  бродил  он  в  лесу,  а  в  ушах  его  по-прежнему
раздавалось одно и то же: "Ах, если б мы оба умерли! Для нас это  было  бы
лучше всего!"



                             СМЕРТЬ СИГУРДА

     Услышав от Сигурда, что его жене стало лучше, Гуннар сейчас же пришел
к ней.
     - Скажи мне, что с тобой было, Брунхильд? - спросил он заботливо. - И
правду ли говорит Гутторн, что тебя околдовали?
     - Лучше ты скажи мне, Гуннар, кто проехал ко мне через пламя: ты  или
Сигурд? - в свою очередь спросила  его  Брунхильд,  насмешливо  глядя  ему
прямо в глаза.
     Гьюкинг смутился и закусил губу.
     - Грани не пошел подо мной, - немного помолчав, ответил он. - Но  кто
открыл тебе эту тайну?
     - Это сделала  твоя  сестра  Гудрун,  -  с  горькой  улыбкой  сказала
валькирия, - и вот почему я в таком горе.
     - Разве ты недовольна тем, что вышла  за  меня  замуж?  -  нахмурился
Гуннар.
     - Я недовольна тем, что Сигурд обманул и тебя  и  меня,  -  возразила
Брунхильд. - Знай, что он изменил вашей дружбе.
     - Изменил? - недоверчиво воскликнул Гуннар.  -  Сигурд  мне  изменил?
Нет, этого не может быть!
     - Однако это так! - подтвердила королева. - Теперь ты знаешь  причину
моего горя, и, если Вольсунг останется в живых, я уеду от  тебя  к  своему
брату Атли. Мы расстанемся навсегда.
     - Ты не должна так говорить, Брунхильд, - произнес молодой король.  -
Как можешь ты нанести мне такую обиду?
     - Если ты не убьешь Сигурда, ты нанесешь мне этим еще большую  обиду!
- сурово ответила валькирия. - Я даю тебе три дня сроку. А сейчас  уйди  и
оставь меня одну!
     Не зная, что ему делать, Гуннар пошел разыскивать брата, а  Брунхильд
в отчаянии схватилась руками за голову.
     - Что я делаю? - простонала она. - Зачем я обрекаю  на  смерть  того,
кого люблю? Но ведь он не может быть моим мужем. Он принадлежит  ничтожной
Гудрун, и этого я не в силах вынести.
     Узнав от Гуннара все, что ему рассказала Брунхильд, Хогни рассмеялся.
     - Она тебя обманывает! - сказал он. - Сигурд не  мог  изменить  вашей
дружбе. Брунхильд просто ненавидит его за что-то. Его и Гудрун.
     - Но она грозит, что уедет к Атли, если Вольсунг останется в живых, -
промолвил король, и я верю, что она сдержит свое слово.
     -  Ну  пусть  и  уезжает!  -  воскликнул  Хогни,  с  первого  взгляда
невзлюбивший жену брата. - Без нее мы жили гораздо счастливее.
     - Нет, Хогни,  -  решительно  произнес  Гуннар.  -  Я  слишком  люблю
Брунхильд, чтобы с ней расстаться.
     - Но как же ты можешь убить Сигурда, когда вы с ним кровные братья? -
возразил младший Гьюкинг.
     - Гутторн не давал ему клятвы, а за золото он готов  сделать  все,  -
отвечал Гуннар.
     Хогни подошел к брату и положил ему руки на плечи.
     - Послушай, Гуннар, -  промолвил  он  тихо,  -  ты  хочешь  совершить
бесчестный поступок, который принесет нам много несчастий. Втроем мы  были
непобедимы, а без Сигурда враги вскоре снова вторгнутся в нашу  страну.  Я
знаю: ты любишь Брунхильд и боишься ее потерять, но еще страшнее  потерять
верного друга. Я повторяю, что не верю в бесчестность Вольсунга.  Хотя,  -
добавил он еще тихо, - может быть, тебя пленяет мысль о его сокровищах?
     Гуннар слегка покраснел.
     -  Да,  сокровища  Сигурда   велики   и   могут   сделать   нас   еще
могущественнее, - сказал он. - Но я бы не вспомнил про  них,  если  бы  не
узнал о его вероломстве. Теперь он должен умереть.
     - Договаривайся об этом с Гутторном, - сердито проворчал Хогни. -  Ты
мой старший брат и король, и я должен  тебе  повиноваться,  но  помни:  ты
навлечешь на нас беду.
     - Ступай и приведи ко мне Гутторна, - не  глядя  на  брата,  произнес
Гуннар.
     Хогни вздохнул, но пошел выполнять приказание и через несколько минут
вернулся назад вместе со своим сводным братом.
     - Сигурд изменил мне, - сказал Гутторну король. - Согласен ли ты  его
убить? В награду я дам тебе третью часть ело сокровищ.
     - Я давно знаю о его измене, - засмеялся тот, - и,  конечно,  исполню
твою просьбу. Мать перед смертью открыла мне, что Вольсунг еще до  встречи
с Гудрун знал Брунхильд и хотел на ней жениться, но я боялся тебе об  этом
сказать - ведь ты все равно бы мне не поверил.  Ты  слишком  любил  своего
коварного друга.
     - Ты слышишь, Хогни? - обратился Гуннар к младшему Гьюкингу.
     Хогни пожал плечами.
     - Даже если бы Брунхильд говорила правду, то и тогда убивать  Сигурда
было бы бесчестно, - отвечал он.
     "Да, - подумал Гутторн, глядя на них обоих, - хорошо еще,  что  я  не
сказал им о волшебном напитке моей матери, а  то  бы  они,  чего  доброго,
переменили свое решение. А так сокровища Фафнира попадут в мои руки".
     Сигурд не спал всю ночь, а с рассветом ушел в лес и бродил  там  один
до самого обеда.
     "Мне нельзя здесь оставаться, - думал он. - Это причинит горе и  мне,
и Гуннару, и нашим женам.
     Надо сегодня же вечером сказать Гьюкингам, что мы с Гудрун уезжаем  в
Данию. Сокровища Фафнира нетронуты, а с ними нам везде будет хорошо, да  и
старый Хиальпрек обрадуется, если мы будем жить при его дворе".
     Приняв такое решение, он вернулся домой уже более спокойным  и  после
обеда сразу же лег спать. Чтобы не мешать мужу, Гудрун ушла к себе,  слуги
Сигурда были во дворе, и никто не видел, как Гутторн с обнаженным мечем  в
руках осторожно крался к комнате богатыря.
     Дойдя до дверей спальни Вольсунга, сводный брат короля остановился  и
прислушался, но до него донеслось только ровное дыхание спящего. Тогда  он
отворил дверь и несколько минут  неподвижно  смотрел  на  прекрасное  лицо
Сигурда и его золотые локоны.
     - Прощайся с жизнью, победитель дракона, ты, которого  считают  самым
храбрым, самым могучим и самым богатым, - прошептал  он.  -  Рука  жалкого
нищего Гутторна уничтожит того, перед кем  бегут  целые  дружины,  и  твое
золото будет принадлежать мне.
     И, подойдя к постели, он не колеблясь вонзил меч в  грудь  последнего
из Вольсунгов.  Глаза  богатыря  открылись,  и  Гутторн,  не  выдержав  их
взгляда, в ужасе бросился бежать, но тут Сигурд,  собрав  последние  силы,
схватил Грам и бросил его вдогонку убийце. Меч богов  настиг  предателя  в
дверях и разрубил его пополам. Гутторн не успел даже вскрикнуть.
     Первой на шум прибежала Гудрун. При виде умирающего  мужа  она  упала
около него на колени и, почти теряя сознание от горя,  прижалась  лицом  к
его окровавленной груди.
     - Не  плачь,  Гудрун,  -  прошептал  Сигурд,  нежно  гладя  рукой  ее
белокурую голову. - Исполнилось предсказание  Фафнира,  и  Один  призывает
меня к себе. Пожалуй, даже лучше, что я умираю. Прощай!
     В это время в комнату вошли Гуннар и  Хогни.  Увидев  в  дверях  труп
сводного брата, король побледнел.
     - Я вижу, что Сигурд уже успел сам отомстить за себя, - сказал он.
     - Да, он успел отомстить, но только к одному. Нам отомстят другие,  -
вздохнул Хогни.
     - Ну, до этого еще далеко, - пожав плечами, ответил  Гуннар.  -  Зато
теперь его золото в наших руках, а Брунхильд останется со мной.
     - Нет, она с тобой не останется, -  послышался  чей-то  голос  позади
Гьюкинга. - Она не будет жить с презренным убийцей.
     Гуннар обернулся. В дверях  стояла  Брунхильд.  Бледная,  с  горящими
глазами, она  с  ненавистью  смотрела  на  мужа  и  его  брата,  а  потом,
презрительно отстранив их рукой, подошла к неподвижному  телу  богатыря  и
остановилась возле плачущей Гудрун.
     - Ты погиб, храбрейший из  храбрых,  погиб,  не  оставив  после  себя
наследников, - промолвила она.  -  Но  ты  не  бойся:  твоя  смерть  будет
отомщена, а я последую за тобой. Там, - и она показала рукой  на  небо,  -
там, в валгалле, мы опять будем вместе.
     - Что ты говоришь? - в ужасе воскликнул Гуннар, бросаясь к ней.
     - Не смей подходить ко мне! - вскричала Брунхильд, с силой отталкивая
его от себя. - Ты убил  того,  кому  клялся  в  вечной  верности,  и  убил
безвинно, потому что я солгала и Сигурд никогда не изменял вашей дружбе.
     - Так как же  ты  осмеливаешься  винить  нас  в  его  смерти,  подлая
женщина! - не выдержал Хогни. - Разве не из-за тебя он убит? Разве  не  ты
грозила моему брату бросить его и уехать к Атли?
     - Да, грозила, но если б он был верен своей дружбе и своей клятве, он
бы меня  не  послушался,  -  возразила  валькирия.  -  Но  его  прельстили
сокровища Фафнира, и он пролил кровь, которая намного чище и  благородней,
чем его. Это не пройдет вам даром. Я вижу нож, который  вонзается  тебе  в
грудь, Хогни, я вижу Гуннара, сидящего в змеиной яме, я вижу,  как  гибнет
род Гьюкингов. Мое проклятие и проклятие богов будет тяготеть над вами  до
вашего победного часа.
     - Вели ей замолчать, брат, - промолвил Хогни, трясясь от злобы, - или
я сам заткну ей рот!
     - Нет, нет, не надо! Она сейчас успокоится, - остановил его Гуннар.
     - Ну так и оставайся с ней вдвоем! - в сердцах сказал младший Гьюкинг
и вышел, небрежно оттолкнув ногой труп Гутторна.
     - Не сердись Брунхильд, -  примирительно  сказал  Гуннар,  подходя  к
жене, - подумай лучше о  том,  как  помочь  Гудрун.  Ты  видишь,  она  без
сознания.
     - Гудрун скоро успокоится, - презрительно усмехнулась валькирия, -  и
даже помирится с тобой, Гуннар. Такие, как  она,  не  умеют  любить.  А  я
проследую за тем, кто был мне дорог. Уходи отсюда, уходи прочь! Тебе здесь
больше нечего делать.
     Растерянный король побежал звать на помощь  брата,  а  Брунхильд  тем
временем созвала всех своих служанок и, обращаясь к ним, сказала:
     - Вы уже знаете, что Сигурд умер. Я хочу разделите его судьбу. Кто из
вас последует за нами?
     Но служанки, покачав головами, в страхе отступили.
     - Довольно уже крови, - промолвила одна.
     - Лучше жить на земле, чем в царстве Хель, - добавила другая.
     - Да, да, мы хотим еще жить! - хором закричали остальные.
     - Ну, так живите, - пренебрежительно  махнула  рукой  королева.  -  И
передайте Гуннару, чтобы он  сжег  мое  тело  на  одном  костре  вместе  с
Сигурдом, а между нами положил бы Грам, как  это  сделал  Вольсунг,  когда
ночевал в моем замке. Прощайте.
     И, прежде чем онемевшие от страха служанки смогли что-нибудь  сказать
или сделать, Брунхильд схватила меч Сигурда и твердой  рукой  вонзила  его
себе в сердце.
     Не смея отказать своей жене в  ее  последней  просьбе,  убитый  горем
Гуннар приказал воздвигнуть для нее и последнего из вольсунгов один  общий
костер. Труднее ему было исполнить ее второе желание и положить между ними
Грам. Он уже давно мечтал завладеть чудесным мечем Сигурда, но, решив, что
подаренный Одином клинок мало пострадает от пламени, согласился и на  это.
Следуя обычаю, в костер бросили и любимого охотничьего  сокола  Вольсунга,
его собаку и одного из коней под седлом и полной сбруей. Грани Гуннар тоже
хотел оставить себе,  но,  едва  пламя  костра  охватила  тело  Сигурда  и
Брунхильд и высоким столбом поднялось к небу, могучий жеребец вырвался  из
своей конюшни и, опрокинув  пытавшихся  его  задержать  конюхов,  бросился
прямо в огонь. Тщетно разыскивал потом  Гьюкинг  в  золе  Грам  и  остатки
конских костей. Замечательный меч и такой же замечательный конь  бесследно
исчезли.
     - Вот видишь, брат, - мрачно сказал Хогни,  глядя  на  разочарованное
лицо короля, - боги  отказывают  нам  в  своей  помощи.  Я  боюсь,  что  и
проклятию Брунхильд суждено исполниться и род Гьюкингов последует за родом
Вольсунгов.



                            ГИБЕЛЬ ГЬЮКИНГОВ

     Гудрун  не  последовала  на  костер  за  Сигурдом,  как  это  сделала
Брунхильд. Первые дни она горько  плакала  о  муже,  но  потом  постепенно
успокоилась и даже помирилась со своими братьями, простив им его смерть. А
спустя еще два месяца в замок Гьюкингов прибыли  послы  от  Атли:  грозный
повелитель гуннов сватал вдову победителя Фафнира.
     - Я удивляюсь тебе, брат! - сказала Гудрун, когда Гуннар  передал  ей
эту весть. - Достойно ли дочери Гьюки и вдовы потомка Одина выходить замуж
за гунна? Или ты желаешь избавиться от меня, как избавился от моего  мужа?
Почему ты сразу не отказал посланцам Атли?
     - Не сердись, Гудрун, - мягко ответил король. - Я не буду  принуждать
тебя и идти против твоей воли, но помни, что Атли зол и мстителен. Если ты
ему откажешь, нам придется встретиться в бою с его полчищами, и кто знает,
кому из нас боги даруют победу. Подумай об этом и  завтра  утром  дай  мне
ответ.
     - Мне больше не о чем думать, Гуннар, - тихо  и  печально  произнесла
молодая женщина. - Я поняла все, и сыновья моего отца никогда  не  скажут,
что я явилась причиной их смерти. Ступай и скажи гуннам, что я согласна  и
еду вместе с ними.
     Гуннар крепко обнял сестру.
     - Спасибо тебе, Гудрун! - радостно воскликнул он. - Ты приносишь  нам
счастье. Теперь, когда мы опять породнимся с Атли, нам  не  страшны  любые
враги.
     - Было время, когда ты не боялся и самого Атли, - с горькой  усмешкой
промолвила Гудрун, оставшись одна. - И тогда бы ты  не  стал  ради  своего
счастья жертвовать моим.
     Однако она не колебалась  и  через  несколько  дней  в  сопровождении
небольшой дружины гуннских воинов, присланной за ней Атли, уже отправилась
на восток, к своему новому супругу.
     Проводив сестру, Гуннар вскоре  в  свою  очередь  женился  на  дочери
одного из соседних готских королей, по имени Глаумвор, а  Хогни  -  на  ее
младшей сестре, Костберре. Жены обоих Гьюкингов  были  молоды,  красивы  и
веселы и принесли в замок столько радости, что братья больше не думали  ни
о проклятье Брунхильд, ни о ее мрачном пророчестве.
     Так незаметно прошло около  года,  и  вот  однажды  к  Гуннару  вновь
прискакал гонец от Атли. У Гудрун родился сын, и старый вождь звал к  себе
Гьюкингов на торжественный пир.
     Молча выслушал король гонца, и не радость, а  скорбь  и  предчувствие
беды наполнили его  сердце.  Сам  не  зная  почему,  он  вдруг  заподозрил
предательство.
     - Скажи, а моя сестра мне ничего не прислала? - спросил он у гунна.
     Винги - так звали гонца - замялся.
     - Наша  королева  просила  меня  передать  тебе  это  письмо  и  этот
перстень, - произнес он наконец и вынул и то и другое из-за пазухи.
     Хогни взял письмо и, быстро пробежав его глазами, улыбнулся.
     - Винги говорит правду, и нам ничто не угрожает, Гуннар, - сказал он.
- Гудрун пишет, чтобы мы приезжали.
     - А ты уверен, что письмо от  нее?  -  с  сомнением  покачал  головой
король.
     Хогни с удивлением посмотрел на него: еще никогда его брат не был так
недоверчив.
     - Ну  конечно,  Гуннар!  -  воскликнул  он.  -  А  вот  и  ее  кольцо
Андваранаут, последнее, что у нее осталось из сокровищ  Фафнира.  -  И  он
надел кольцо на палец.
     - Пусть так, но мне все же не хочется ехать,  -  возразил  Гуннар.  -
Лучше мы отпразднуем рождение племянника дома.
     - Мой господин просил сказать, что не пожалеет для вас богатых даров,
коней и оружия, - низко поклонившись, промолвил гонец. -  Если  же  вы  не
приедете, он сочтет ваш отказ за кровную обиду.
     - Коней  и  оружия  у  нас  и  так  достаточно,  -  возразил  Гуннар,
нахмурившись. - Но я не хочу ссориться  с  Атли.  Хорошо,  скачи  назад  к
своему вождю и передай ему и моей сестре, что мы приедем.
     - И ты сдержишь слово, о великий король? - спросил Винги, недоверчиво
взглянув ему прямо в глаза.
     - Мы, Гьюкинги, не бросаем слов на ветер! - гневно воскликнул  Гуннар
вставая. - И, не будь ты послом моего шурина, ты бы дорого заплатил мне за
такую дерзость.
     - Не гневайся, господин, - смиренно промолвил гунн, опуская голову. -
Атли и королева запретили мне возвращаться к ним без твоего  согласия,  но
теперь я уеду спокойно.
     - Постой, - произнес Гуннар, гнев которого уже прошел. - Не торопись!
Сначала поешь и отдохни, а завтра утром отправишься в путь.
     - Спасибо тебе, но мы, гунны, рождаемся в седле и не знаем, что такое
усталость, - отвечал Винги улыбаясь. - Прощай,  король  Гуннар.  Я  сообщу
Атли и твоей сестре радостную для  них  весть  и  получу  за  нее  большую
награду. Прощай!
     Предоставив Хогни проводить гунна, Гуннар позвал жену.
     - Атли и Гудрун приглашают нас к себе, Глаумвор, - сказал он, - и  мы
с Хогни решили ехать, но тебе и Костберре лучше остаться здесь, в замке.
     - Как, ты уезжаешь к гуннам? - испуганно промолвила Глаумвор. -  Нет,
нет, Гуннар, послушайся меня и перемени  свое  решение.  Сегодня  ночью  я
видела страшный сон: ты сидел связанный по рукам и ногам в яме,  а  вокруг
тебя копошились ядовитые змеи. Такие видения  не  сулят  ничего  хорошего,
поверь мне. Тебя ждет несчастье.
     Гуннар помрачнел: он вспомнил последние слова своей бывшей жены.
     - Поздно, Глаумвор, поздно, - прошептал он. - Я дал слово и уже не  в
силах вернуть его обратно, не опозорив  своего  имени.  Но  твои  опасения
напрасны. Если бы Атли замышлял против нас какое-либо  предательство,  моя
сестра не стала бы звать нас к себе... А вот и Хогни, спроси  у  него:  он
сам читал письмо Гудрун.
     - Плохо я читал его, Гуннар! - уставившись  глазами  в  земляной  пол
замка, возразил младший Гьюкинг. - Сейчас, когда я просмотрел его еще раз,
я заметил, что несколько слов в нем исправленно, и не рукой Гудрун. Сестра
пишет нам, чтобы мы не приезжали, а  на  Андваранауте  я  нашел  волос  из
волчьей шкуры, которым она его обвязала. Недаром тебе не хотелось ехать  к
гуннам, брат. Там нас ждет смерть.
     Глаумвор задрожала и тяжело опустилась на скамью.
     - Но почему же Атли так разгневался на нас? - недоверчиво  проговорил
король. - Что плохого мы ему сделали?
     - А что плохого сделал нам Сигурд?  -  язвительно  ответил  Хогни.  -
Почему мы его убили? Золото Фафнира толкнуло нас  на  это,  а  теперь  его
хочет захватить Атли.
     - Но он его не получит, - проскрипел зубами Гуннар.  -  Золото,  ради
которого я погубил своего лучшего друга и  кровного  брата,  золото,  ради
которого я нарушил клятву, я не отдам, хотя бы мне пришлось погибнуть!
     - Но ведь ты не поедешь  к  Атли,  супруг  мой?  -  вдруг  вскрикнула
Глаумвор, бросаясь к нему.
     - Нет, я поеду! - упрямо сдвинул брови  король.  -  А  ты,  Глаумвор,
лучше иди к себе; мне нужно поговорить с огни.
     Королева, тяжело вздыхая, покорно вышла, а Гуннар продолжал:
     - Мне незачем говорить тебе, что мы должны сдержать слово, Хогни,  но
то, что я сказал, останется нерушимым. Пусть Атли захватит нас,  пусть  он
захватит нашу страну - золото он не получит. Мы должны спрятать сокровища,
и так, чтобы их никто не смог найти. Помоги мне в этом. Я верю только тебе
одному.
     - Лучше всего просто бросить их в Рейн, - предложил младший Гьюкинг.
     Гуннар наклонил голову в знак согласия.
     - Ты прав, брат, - сказал он, - так мы и сделаем.
     В  ту  же  ночь,  когда  все  в  замке  уснули,  братья  достали   из
сокровищницы мешки с золотом Фафнира и с  трудом  перетащили  их  один  за
другим на берег Рейна. Там они выбрали место поглубже и,  развязав  мешки,
высыпали все драгоценности в воду.
     - Ты хорошо придумал, Хогни,  -  промолвил  король,  после  того  как
последний слиток золота исчез в быстрых волнах могучей реки. -  Теперь  не
только Атли, но и мы сами вряд ли достанем  его  обратно.  Сигурд  говорил
мне, а ему рассказал это какой-то карлик, по  имени  Регин,  что  в  былые
времена золото Фафнира тоже хранилось в реке,  у  гнома  Андвари,  который
проклял каждого, кто будет им владеть. Может быть, теперь оно  возвратится
к своему бывшему хозяину.
     - Тогда пускай к нему  возвратится  и  кольцо!  -  воскликнул  Хогни,
снимая с пальца Андваранаут, и, размахнувшись изо всех сил, бросил его  на
середину Рейна.
     Маленькое колечко бесшумно погрузилось  в  воду,  и  Гуннару  на  миг
показалось, что в том месте, где оно  упало,  река  окрасилась  в  красный
цвет.
     - Скройся навсегда, злосчастное золото! - произнес  он  торжественно,
поднимая руки. - Храни его, великий Рейн.  Пройдет  немало  времени,  пока
твои волны смоют с него всю кровь, которая из-за него пролилась...
     - ...и которая еще прольется, - добавил Хогни. - Пройдут века, многие
славные роды исчезнут, а проклятие Андвари будет по-прежнему тяготеть  над
людьми, и раньше других оно поразит нас с тобой, Гуннар.


     Много слез пролили Глаумвор  и  Костберре,  провожая  своих  мужей  в
страну гуннов, невеселы были и сами братья в суровом молчании следовала за
ними их конная дружина. Никто из  воинов  Гуннара  не  надеялся  вернуться
домой, но не было  среди  них  и  такого,  который  пожелал  бы  остаться.
Бородатые, загорелые, в тяжелых рогатых шлемах и блестящих  панцирях,  они
ехали гуськом, друг за другом,  не  глядя  по  сторонам  и,  казалось,  не
замечая  ни  освещенных  ярким  апрельским  солнцем  полей  и  лесов,   ни
встречавшихся им по дороге небольших  крестьянских  селений.  Все  так  же
молча  и  спокойно  миновали   они   раскинувшиеся   вокруг   замка   Атли
многочисленные шатры его воинов, откуда на них с  враждебным  любопытством
смотрели гунны.
     Пока Гуннар и Хогни слезали с коней,  а  королевские  слуги  побежали
сообщать Атли об их приезде, в дверях замка появилась Гудрун.
     - Как, вы здесь? - воскликнула она в ужасе. - Ведь я же написала вам,
чтобы вы не приезжали!
     - Винги по дороге переправил слова твоего письма, Гудрун,  -  ответил
Гуннар, подходя к сестре. - А когда мы заметили это, было  уже  поздно:  я
дал слово, что мы приедем.
     - О Брунхильд,  Брунхильд!  -  заплакала  Гудрун.  -  Твое  проклятие
исполняется, и даже мой брак с Атли не смог предотвратить того, что должно
было случиться.
     - Разве твой муж хочет нас убить? - спросил Хогни.
     - Он не говорил мне об этом, -  отвечала  королева  гуннов,  -  но  я
чувствую, что у него на  душе  что-то  недоброе.  Он  часто  вспоминает  о
сокровищах Сигурда и, наверное, хочет их захватить.
     - Их уже нет... - засмеялся Хогни.
     Но он не успел договорить до конца: вернувшиеся слуги  объявили,  что
Атли ждет их в пиршественном зале.
     - Я рад снова видеть тебя, Гуннар, рад встретиться и с тобой,  Хогни,
- с  деланным  радушием  приветствовал  Гьюкингов  старый  вождь,  идя  им
навстречу. - Я слышал от Винги, что ему стоило  немалых  трудов  уговорить
нас приехать. Чем  заслужил  я  такую  немилость  своих  старых  друзей  и
соседей?
     - Ты ошибаешься, Атли, или смеешься над нами, - возразил Гуннар. -  О
какой неприязни ты говоришь, когда мы  с  тобой  дважды  родственники?  Ты
забыл, что я муж твоей покойной сестры, а ты женат на Гудрун.
     - Да, да, ты прав, мы с тобой родственники, - согласился гунн все так
же добродушно и ласково. - И я повторяю,  что  рад  приветствовать  вас  у
себя, хотя за тобой небольшой долг, Гуннар, за тобой и за Хогни.
     - Что это за  долг,  Атли?  -  спросил  Гуннар,  делая  вид,  что  не
понимает, о чем идет речь.
     Атли быстро оглядел зал, который тем временем  наполнили  вооруженные
до зубов гуннские воины.
     - Вот уже больше года прошло, как Брунхильд умерла, Гуннар, -  сказал
он, садясь на свой трон и движением руки приглашая Гьюкингов приблизиться,
- умерла по твоей вине, а ты до сих пор не прислал мне выкуп за ее смерть.
     - Брунхильд сама пронзила себе грудь мечем Сигурда, - отвечал молодой
король. - Я виноват лишь в том, что не успел удержать ее руку. Если же  ты
думаешь иначе, то разве моя сестра, которую я отдал тебе в жены, не  стоит
твоей?
     - Как я могу порочить ту, которая родила мне сына? - опять  улыбнулся
Атли. - Я благодарю тебя за жену, шурин, но  ты  и  тут  обманул  меня,  и
обманул жестоко. У Сигурда было много золота, почему же Гудрун привезла  с
собой только одно кольцо?
     - Золото Сигурда досталось мне и моему брату,  -  спокойно  промолвил
Гуннар. - Сестра отдала его нам.
     - Она сама отдала его вам? - насмешливо переспросил его гунн.
     - Сама, или не сама, но это золото останется у нас, -  резко  ответил
старший Гьюкинг, упрямо сдвигая брови.
     Полуприкрытые глаза Атли вдруг раскрылись и  с  нескрываемой  угрозой
уставились на братьев.
     - Ты ошибаешься, Гуннар, - медленно проговорил он. -  Это  золото  не
останется у вас, или вы сами навсегда останетесь у меня.
     - Не пугай нас, Атли, - смело вмешался в разговор Хогни, опуская руку
на меч, - и не забывай, что мы твои гости.
     Вождь гуннов резким движением головы откинул  со  лба  длинную  прядь
своих жестких, как грива, волос и приподнялся, словно готовясь  к  прыжку.
Увидев это, Гудрун оттолкнула в сторону Гуннара и Хогни и бросилась  перед
ним на колени.
     - Прости их, супруг мой, - умоляющим голосом промолвила она. - Прости
ради сына, что я тебе родила. Не нарушай законов гостеприимства и  позволь
им уехать.
     - Я не должен забывать законов гостеприимства? Я должен позволить  им
уехать? - прошипел Атли, задыхаясь от злобы.  -  Нет,  Гудрун,  нет!  ради
золота они сделали тебя нищей, ради золота они убили Сигурда,  величайшего
и благороднейшего из  всех  богатырей,  которые  когда-либо  рождались  на
земле, ради золота они забыли клятву, которую  ему  дали,  ну,  а  я  ради
золота забуду о том, что они мои гости. Взять их! Заточить их в темницу! -
обратился он к своим воинам. - Может быть, тогда они станут сговорчивее.
     Хогни в ответ только рассмеялся  и  выхватил  из  ножен  меч.  Гуннар
последовал его примеру, и двое гуннов сейчас же пали  мертвыми.  Остальные
со всех сторон окружили обоих Гьюкингов.
     Прижавшись спиной друг к другу, Гуннар и Хогни рубились так  яростно,
что гуннские воины не могли  к  ним  приблизиться.  На  шум  боя  в  замок
ворвались дружинники Гьюкингов; за ними по пятам устремились новые  отряды
гуннов, и через несколько минут весь зал был залит кровью и завален телами
убитых.
     Надев на голову первый  попавшийся  шлем,  Гудрун  тоже  кинулась  на
помощь братьям. Ей удалось убить трех гуннов, и среди них - младшего брата
Атли, но вскоре она была обезоружена и по приказу  мужа  отведена  в  свою
спальню, где, уткнув голову в подушку, с  судорожно  стиснутыми  зубами  и
тяжело бьющимся сердцем долго молча прислушивалась к доносившемуся до  нее
звону оружия и стонам умирающих.
     Весь день и всю ночь до самого утра сражались  Гьюкинги,  подтверждая
свою боевую славу, однако их удары становились  все  слабее  и  слабее,  а
число их защитников все меньше и меньше, и когда взошло  солнце,  они  оба
уже лежали связанными в одной из комнат замка.
     - Ты знаешь, что я не боюсь смерти, Гуннар, - сказал Хогни, с  трудом
поворачивая к брату свою покрытую запекшейся кровью голову. - Но не  глупо
ли умирать ради каких-то сокровищ, которыми все  равно  не  достанутся  ни
нам, ни нашим женам? Открой гунну, где их найти, и  я  верю,  что  он  нас
отпустит. Подумай о Глаумвор и Костберре и о том, что их ждет, когда  Атли
захватит нашу страну.
     - Молчи. Хогни! - сердито ответил молодой король. - Мне легче  тысячу
раз умереть и пережить гибель всех родных, чем отдать это золото  в  чужие
руки. Я уже жалею о том, что и ты знаешь, где оно находится.
     Хогни вздохнул  и  отвернулся,  не  замечая,  что  на  лице  старшего
Гьюкинга вдруг появилась мрачная улыбка.
     К вечеру Гуннара вновь привели к вождю гуннов.
     - Ну как, сам ли ты отдашь золото Сигурда, или мне придется  разорить
из-за него всю твою страну? - спросил его Атли.
     - Золото спрятана, шурин, и спрятано так, что его тебе  не  найти,  -
отвечал Гуннар, - но я готов сказать,  где  оно,  если  ты  исполнишь  мою
просьбу.
     - Я обещаю тебе это, - наклонил голову Атли.
     - Пусть принесут мне сюда сердце Хогни, -  опустив  глаза,  промолвил
Гуннар. - Я не хочу, чтобы мой брат остался в живых и потом обвинял меня в
трусости.
     Атли почти с испугом посмотрел на него.
     - Как, ты желаешь смерти Хогни? - произнес он недоверчиво.
     - Да! - твердо сказал Гуннар.
     - Хорошо, пусть будет по-твоему, - согласился гунн и, подозвав к себе
одного из слуг, шепнул что-то ему на ухо.
     Слуга, поклонившись, вышел и через полчаса вернулся  назад,  неся  на
золотом подносе еще теплое и не утратившее жизни сердце.
     - Вот сердце твоего брата, Гуннар, - сказал Атли.  -  Теперь  говори,
где ты спрятал золото.
     Гуннар громко рассмеялся.
     - Ты считаешь меня ребенком, шурин, - произнес он. - Посмотри  -  это
сердце все еще дрожит от страха. Значит, оно принадлежит  трусу,  а  Хогни
храбрее любого из твоих воинов.
     Старый вождь, подумав немного, опять подозвал к себе слугу, и  вскоре
перед Гуннаром на том же золотом подносе уже лежало второе сердце.
     - Да, это сердце Хогни, - вздрогнув, прошептал старший Гьюкинг. - Оно
так же спокойно и тихо, как спокойно и тихо принял он свою смерть.
     - Так где же сокровища, Гуннар? - помолчав, снова заговорил  Атли.  -
Ты видишь - твое желание исполнено.
     - Ах, шурин, как же  ты  глуп!  -  с  презрением  воскликнул  молодой
король. - Ведь я заставил тебя убить Хогни  потому,  что  боялся,  что  он
выдаст тебе мою тайну. Никогда, Атли, золото Фафнира  не  будет  лежать  в
твоей сокровищнице. Открою ли я тебе, где оно хранится,  если  за  него  я
отдал жизнь двух братьев и счастье сестры, обрек на позор жену  и  разорил
страну моих предков? Ты смешон мне, Атли!
     Гьюкинг думал, что от его  слов  гунн  придет  в  бешенство,  но  тот
внезапно улыбнулся.
     - Я ждал этого, - сказал он. - Я слышал еще от Брунхильд о  проклятии
Андвари, и, хотя мне хотелось увидеть своими глазами его сокровища, я рад,
что судьба Сигурда и вас, Гьюкингов, минует мой род. Но ты, Гуннар, ты  не
уйдешь от наказания! Оно будет таким же страшным, как и твои преступления.
Тебя бросят в змеиную яму. Я знаю, что  это  было  тебе  предсказано,  так
пусть же предсказание исполнится!
     Не смотря на всю свою храбрость, Гуннар стал белее снега  и  невольно
прошептал про себя имя Брунхильд.
     Повинуясь приказу Атли, королевские слуги  связали  его  по  рукам  и
ногам и потащили прочь из  замка.  На  дворе  он  увидел  поджидавшую  его
Гудрун.
     - Не бойся, я постараюсь тебе помочь, брат, - быстро шепнула она ему.
     Но Гуннар в ответ только покачал головой: он  уже  не  верил  в  свое
спасение.
     Шагах в двухстах от замка, в поле, была глубокая заболоченная яма, на
дне которой копошились несколько  десятков  гадюк.  Слуги  бросили  в  нее
Гьюкинга и, дрожа от ужаса, поспешили уйти прочь. Шум от  падения  Гуннара
напугал змей, и они попрятались в свои норы.
     "Скорей, Гудрун, приходи скорей! Может быть, тебе все же удастся  мне
помочь!" - думал молодой король, с тоской глядя вверх на  клочок  голубого
весеннего неба.
     Неожиданно вверху, над краем ямы, показалась белокурая головка.
     - Сестра! - с надеждой прошептал Гуннар. - Ты уже пришла? Торопись и,
пока змеи не выползли, вытащи меня отсюда!
     - Сейчас нельзя, брат, нас увидят, - отвечала Гудрун.  -  Подожди  до
ночи, а чтобы змеи не тронули тебя до моего прихода, возьми вот это.
     И она бросила ему вниз лютню.
     - Спасибо, сестра! - воскликнул Гуннар.
     Но Гудрун уже исчезла.
     Немного погодя молодой  король  услышал  какой-то  шорох  и  шипение:
вытянув свои плоские головы, прямо на него ползли змеи.  Тогда,  с  трудом
дотянувшись до брошенной Гудрун лютни, он стал зубами дергать  ее  струны.
Их резкие, похожие на стон звуки успокоили змей, и  они  одна  за  другой,
словно засыпая, опустили свои головы. Все громче и громче  звенела  лютня,
все светлее и радостнее становилось на сердце  у  Гуннара,  как  вдруг  он
увидел одну исполинскую старую гадюку, которая неумолимо ползла  прямо  на
него. Он еще несколько раз изо всех сил рванул  струны  зубами  -  это  не
помогло; он закричал - змея не испугалась.  Поняв,  что  все  кончено,  он
закрыл глаза. В тот же миг короткий, но мучительный укол в живот  заставил
Гуннара вскрикнуть от боли; яд гадюки разливался по его телу, причиняя ему
невыносимые страдания, и наконец достиг сердца.


     Так умер последний  из  Гьюкингов,  и  так  прекратился  их  род,  но
сказание о вольсунгах на этом не кончается.
     Далее в нем говорится, как  Гудрун,  мстя  Атли,  убила  собственного
сына, а потом и самого Атли, как она в третий раз вышла замуж  и  как  она
снова потеряла и мужа и детей, но рассказывать об этом слишком долго, а не
всякая длинная история самая хорошая.



PHP 7
About the Tutorial
PHP 7 is the most awaited and is a major feature release of PHP programming language.
PHP 7 was released on 3rd Dec 2015.
This tutorial will teach you the new features of PHP 7 and their usage in a simple and
intuitive way.
Audience
This tutorial has been prepared for PHP developers from a beginner’s point of view. After
completing this tutorial, you will find yourself at a moderate level of expertise in the
knowledge of PHP from where you can take yourself to next levels.
Prerequisites
We assume that you already know about the older versions of PHP and now you can start
learning the new features of PHP 7.
Execute PHP-7 Online
For most of the examples given in this tutorial, you will find an option Try it. Just use this
option to execute your PHP-7 programs at the spot and enjoy your learning.
Try the following example using Try it option available at the top right corner of the below
sample code box −
<html>
<head>
<title>Online PHP-7 Script Execution</title>
</head>
<body>
<?php
echo "<h1>Hello, PHP-7!</h1>";
?>
</body>
</html>
iPHP 7
Copyright & Disclaimer
 Copyright 2016 by Tutorials Point (I) Pvt. Ltd.
All the content and graphics published in this e-book are the property of Tutorials Point (I)
Pvt. Ltd. The user of this e-book is prohibited to reuse, retain, copy, distribute or republish
any contents or a part of contents of this e-book in any manner without written consent
of the publisher.
We strive to update the contents of our website and tutorials as timely and as precisely as
possible, however, the contents may contain inaccuracies or errors. Tutorials Point (I) Pvt.
Ltd. provides no guarantee regarding the accuracy, timeliness or completeness of our
website or its contents including this tutorial. If you discover any errors on our website or
in this tutorial, please notify us at contact@tutorialspoint.com
iiPHP 7
Table of Contents
About the Tutorial ............................................................................................................................................ i
Audience ........................................................................................................................................................... i
Prerequisites ..................................................................................................................................................... i
Execute PHP-7 Online ....................................................................................................................................... i
Copyright & Disclaimer .................................................................................................................................... ii
Table of Contents ........................................................................................................................................... iii
1.PHP 7 – Introduction ................................................................................................................................. 1
What is PHP 7? ................................................................................................................................................ 1
New Features................................................................................................................................................... 1
2.PHP 7 – Performance ................................................................................................................................ 2
Magento 1.9 .................................................................................................................................................... 2
Drupal 7 ........................................................................................................................................................... 3
Wordpress 3.6 ................................................................................................................................................. 3
Comparison of Dynamic Languages................................................................................................................. 4
3.PHP 7 – Environment Setup ...................................................................................................................... 5
Try it Option Online ......................................................................................................................................... 5
PHP Parser Installation .................................................................................................................................... 6
Installation on Linux/Unix................................................................................................................................ 6
Installation on Mac OS X.................................................................................................................................. 9
Installation on Windows with IIS ................................................................................................................... 10
Installation on Windows with Apache ........................................................................................................... 11
Apache Configuration .................................................................................................................................... 12
PHP Configuration in Apache ........................................................................................................................ 12
PHP.INI File Configuration ............................................................................................................................. 13
PHP.INI Configuration .................................................................................................................................... 13
Windows IIS Configuration ............................................................................................................................ 16
4.PHP 7 – Scalar Type Declarations ............................................................................................................ 17
Example – Coercive Mode ............................................................................................................................. 17
5.PHP 7 – Return Type Declarations ........................................................................................................... 19
Example - Valid Return Type ......................................................................................................................... 19
Example - Invalid Return Type ....................................................................................................................... 19
6.PHP 7 – Null Coalescing Operator............................................................................................................ 21
7.PHP 7 – Spaceship Operator .................................................................................................................... 22
8.PHP 7 – Constant Arrays ......................................................................................................................... 24
9.PHP 7 – Anonymous Classes .................................................................................................................... 25
10. PHP 7 – Closure::call() ............................................................................................................................. 26
Example – Pre PHP 7...................................................................................................................................... 26
Example – PHP 7+ .......................................................................................................................................... 26
iiiPHP 7
11. PHP 7 – Filtered unserialize() .................................................................................................................. 28
12. PHP 7 – IntlChar ...................................................................................................................................... 30
13. PHP 7 – CSPRNG ...................................................................................................................................... 31
random_bytes() ............................................................................................................................................. 31
random_int() ................................................................................................................................................. 32
14. PHP 7 – Expectations............................................................................................................................... 33
Configuration directives for assert() .............................................................................................................. 33
15. PHP 7 – use Statement ............................................................................................................................ 35
16. PHP 7 – Error Handling ............................................................................................................................ 36
17. PHP 7 – Integer Division .......................................................................................................................... 38
18. PHP 7 – Session Options .......................................................................................................................... 39
19. PHP 7 – Deprecated Features .................................................................................................................. 40
PHP 4 Style Constructors ............................................................................................................................... 40
Static Calls to Non-Static Methods ................................................................................................................ 40
password_hash() salt option ......................................................................................................................... 41
capture_session_meta SSL context option ................................................................................................... 41
20. PHP 7 – Removed Extensions & SAPIs ..................................................................................................... 42
iv1. PHP 7 – Introduction
PHP 7
What is PHP 7?
PHP 7 is a major release of PHP programming language and is touted to be a revolution in
the way web applications can be developed and delivered for mobile to enterprises and
the cloud. This release is considered to be the most important change for PHP after the
release of PHP 5 in 2004.
New Features
There are dozens of features added to PHP 7, the most significant ones are mentioned
below -
Improved performance - Having PHPNG code merged in PHP7, it is twice as fast
as PHP 5.
Lower Memory Consumption - Optimized PHP 7 utilizes lesser resource.
Scalar type declarations - Now parameter and return types can be enforced.
Consistent 64-bit support - Consistent support for 64-bit architecture machines.
Improved Exception hierarchy - Exception hierarchy is improved.
Many fatal errors converted to Exceptions - Range of exceptions is increased
covering many fatal error converted as exceptions.
Secure random number generator - Addition of new secure random number
generator API.
Deprecated SAPIs and extensions removed - Various old and unsupported
SAPIs and extensions are removed from the latest version.
The null coalescing operator (??) - New null coalescing operator added.
Return and Scalar Type Declarations - Support for return type and parameter
type added.
Anonymous Classes - Support for anonymous added.
Zero cost asserts - Support for zero cost assert added.
PHP 7 uses new Zend Engine 3.0 to improve application performance almost twice and
50% better memory consumption than PHP 5.6. It allows to serve more concurrent users
without requiring any additional hardware. PHP 7 is designed and refactored considering
today's workloads.
12. PHP 7 – Performance
PHP 7
As per the Zend team, following illustrations show the performance comparison of PHP 7
vs PHP 5.6 and HHVM 3.7 on popular PHP based applications.
Magento 1.9
PHP 7 proves itself more than twice as faster, as compared to PHP 5.6 while executing
Magento transactions.
2PHP 7
Drupal 7
PHP 7 proves itself more than twice as faster, as compared to PHP 5.6 while executing
Drupal transactions.
Wordpress 3.6
PHP 7 proves itself more than twice as faster as compared to PHP 5.6 while executing
Wordpress transactions.
3PHP 7
Comparison of Dynamic Languages
43. PHP 7 – Environment Setup
PHP 7
Try it Option Online
We have set up the PHP Programming environment on-line, so that you can compile and
execute all the available examples online. It gives you confidence in what you are reading
and enables you to verify the programs with different options. Feel free to modify any
example and execute it online.
Try the following example using our online compiler available at CodingGround.
<html>
<head>
<title>Online PHP Script Execution</title>
</head>
<body>
<?php
echo "<h1>Hello, PHP!</h1>";
?>
</body>
</html>
For most of the examples given in this tutorial, you will find a Try it option in our website
code sections at the top right corner that will take you to the online compiler. So just use
of and enjoy your learning.
In order to develop and run PHP Web pages, three vital components need to be installed
on your computer system.
Web Server − PHP works with virtually all Web Server software, including
Microsoft's Internet Information Server (IIS) but most often used is Apache Server.
Download Apache for free here − http://httpd.apache.org/download.cgi
Database − PHP works with virtually all database software, including Oracle and
Sybase but most commonly used is MySQL database. Download MySQL for free
here −http://www.mysql.com/downloads/
PHP Parser − In order to process PHP script instructions, a parser must be
installed to generate HTML output that can be sent to the Web Browser. This tutorial
will guide you how to install PHP parser on your computer.
5PHP 7
PHP Parser Installation
Before you proceed, it is important to make sure that you have proper environment setup
on your machine to develop your web programs using PHP. Store the following php file in
Apache's htdocs folder.
phpinfo.php
<?php
phpinfo();
?>
Type the following address into your browser's address box.
http://127.0.0.1/phpinfo.php
If this displays a page showing your PHP installation related information, then it means
you have PHP and Webserver installed properly. Otherwise, you have to follow the given
procedure to install PHP on your computer.
This section will guide you to install and configure PHP over the following four platforms −




PHP Installation on Linux or Unix with Apache
PHP Installation on Mac OS X with Apache
PHP Installation on Windows NT/2000/XP with IIS
PHP Installation on Windows NT/2000/XP with Apache
Installation on Linux / Unix
If you plan to install PHP on Linux or any other variant of Unix, then here is the list of
prerequisites −
The PHP source distribution http://www.php.net/downloads.php
The latest Apache source distribution http://httpd.apache.org/download.cgi
A working PHP-supported database, if you plan to use one (For example MySQL,
Oracle etc.)
Any other supported software, to which PHP must connect (mail server, BCMath
package, JDK, and so forth)
An ANSI C compiler.
Gnu make utility − you can freely download it at
http://www.gnu.org/software/make
6PHP 7
Now, here are the steps to install Apache and PHP5 on your Linux or Unix machine. If your
PHP or Apache versions are different then please take care accordingly.
Step 1
If you have not already done so, unzip and untar your Apache source distribution. Unless
you have a reason to do otherwise, /usr/local is the standard place.
gunzip -c apache_2.4.x.tar.gz
tar -xvf apache_2.4.x.tar
Step 2
Build the apache Server as follows -
cd apache_2.4.x
./configure --prefix=/usr/local/apache --enable-so
make
make install
Step 3
Unzip and untar your PHP source distribution. Unless you have a reason to do otherwise,
/usr/local is the standard place.
gunzip -c php-7.x.tar.gz
tar -xvf php-7.x.tar
cd php-7.x
Step 4
Configure and Build your PHP, assuming you are using MySQL database.
./configure --with-apxs=/usr/sbin/apxs \
--with-mysql=/usr/bin/mysql
make
make install
Step 5
Install the php.ini file. Edit this file to get configuration directives −
cd ../../php-7.x
cp php.ini-development /usr/local/lib/php.ini
7PHP 7
Step 6


Tell your Apache server where you want to serve files from, and what extension(s)
you want to identify PHP files. A .php extension is standard, but you can use .html,
.phtml, or whatever you want.
oGo to your HTTP configuration files (/usr/local/apache/conf or whatever
your path is).
oOpen httpd.conf with a text editor.
oSearch for the word DocumentRoot (which should appear twice), and
change both the paths to the directory you want to serve files out of (in our
case, /home/httpd). We recommend a home directory rather than the
default /usr/local/apache/htdocs because it is more secure, but it does
not have to be in a home directory. You will keep all your PHP files in this
directory.
Add at least one PHP extension directive, as shown in the first line of the code that
follows. In the second line, we have also added a second handler to have all HTML
files parsed as PHP.
AddType application/x-httpd-php .php
AddType application/x-httpd-php .html
Step 7
Restart your server. Every time you change your HTTP configuration or php.ini files, you
must stop and start your server again.
cd ../bin
./apachectl start
Step 8
Set the documentroot-directory permissions to world-executable. The actual PHP files in
the directory need only be world-readable (644). If necessary, replace /home/httpd with
your document root below −
chmod 755 /home/httpd/html/php
Step 9
Open a text editor. Type: <?php phpinfo(); ?>. Save this file in your Web server's
document root as info.php. Start any Web browser and browse the file. You must always
use an HTTP request (http://www.testdomain.com/info.php or http://localhost/info.php or
http://127.0.0.1/info.php) rather than a filename (/home/httpd/info.php) for the file to be
parsed correctly.
8PHP 7
You will see a long table of information about your new PHP installation message
Congratulations!
Installation on Mac OS X
Mac users have a choice of either a binary or a source installation. In fact, your OS X
probably came with Apache and PHP preinstalled. This is likely to be quite an old build,
and it probably lacks many of the less common extensions.
However, if all you want is a quick Apache + PHP + MySQL/PostgreSQL setup on your
laptop, this is certainly the easiest way to fly. All you need to do is edit your Apache
configuration file and turn on the Web server.
Just follow the steps given below−
Step 1
Open the Apache config file in a text editor as root.
sudo open -a TextEdit /etc/httpd/httpd.conf
Step 2
Edit the file. Uncomment the following lines −
Load Module php7_module
AddModule mod_php7.c
AddType application/x-httpd-php .php
Step 3
You may also want to uncomment the <Directory /home/*/Sites> block or otherwise
tell Apache which directory to serve. Restart the Web server.
sudo apachectl graceful
Step 4
Open a text editor. Type: <?php phpinfo(); ?>. Save this file in your Web server's
document root as info.php. Start any Web browser and browse the file. You must always
use an HTTP request (http://www.testdomain.com/info.php or http://localhost/info.php or
http://127.0.0.1/info.php) rather than a filename (/home/httpd/info.php) for the file to be
parsed correctly.
You will see a long table of information about your new PHP installation message
Congratulations!
9PHP 7
Installation on Windows with IIS
The Windows server installation of PHP running IIS is much simpler than on Unix, since it
involves a precompiled binary rather than a source build.
If you plan to install PHP over Windows, then here is the list of prerequisites −
A working PHP-supported Web server. Under previous versions of PHP, IIS/PWS
was the easiest choice because a module version of PHP was available for it; but
PHP now has added a much wider selection of modules for Windows.
A correctly installed PHP-supported database like MySQL or Oracle etc. (if you plan
to use one).
The PHP Windows binary distribution (download it at www.php.net/downloads.php)
A utility to unzip files (search http://download.cnet.com for PC file compression
utilities)
Now here are the steps to install Apache and PHP5 on your Windows machine. If your PHP
version is different, then please take care accordingly.
1. Extract the binary archive using your unzip utility; C:\PHP is a common location.
2. Copy some .dll files from your PHP directory to your systems directory (usually
C:\Winnt\System32). You need php5ts.dll for every case. You will also probably
need to copy the file corresponding to your Web server module -
C:\PHP\Sapi\php7isapi.dll. It is possible you will also need other files from the dlls
subfolder, but start with the two files mentioned above and add more if you need
them.
3. Copy either the php.ini-development or php.ini-recommended (preferably the
latter) to your Windows directory (C:\Winnt or C:\Winnt40), and rename it php.ini.
Open this file in a text editor (for example, Notepad). Edit this file to get the
configuration directives. We highly recommend the new users to set error-reporting
to E_ALL on their development machines at this point. For now, the most important
thing is the doc_root directive under the Paths and Directories section. Make sure
this matches the IIS Inetpub folder (or wherever you plan to serve out of).
4. Stop and restart the WWW service. Go to the Start menu → Settings → Control
Panel → Services. Scroll down the list to IIS Admin Service. Select it and click
Stop. After it stops, select the World Wide Web Publishing Service and click Start.
Stopping and restarting the service from within the Internet Service Manager will
not suffice. Since this is Windows, you may also wish to reboot.
5. Open a text editor. Type: <?php phpinfo(); ?>. Save this file in your Web server's
document root as info.php.
6. Start any Web browser and browse the file. You must always use an HTTP request
(http://www.testdomain.com/info.php
or
http://localhost/info.php
or
http://127.0.0.1/info.php) rather than a filename (/home/httpd/info.php) for the
file to be parsed correctly.
10PHP 7
You will see a long table of information about your new PHP installation message
Congratulations!
Installation on Windows with Apache
To install Apache with PHP 5 on Windows, follow the given steps. If your PHP and Apache
versions are different then please take care accordingly.
Step 1
Download Apache server from www.apache.org/dist/httpd/binaries/win32. You
want the current stable release version with the no_src.msi extension. Double-click
the installer file to install; C:\Program Files is a common location. The installer will
also ask you whether you want to run Apache as a service or from the command
line or DOS prompt. We recommend you do not install as a service, as this may
cause problems with startup.
Extract the PHP binary archive using your unzip utility; C:\php7 is a common
location.
Rename php.ini-development to php.ini. Open this file in a text editor (for example,
Notepad). Edit this file to get the configuration directives. At this point, we highly
recommend that the new users set error reporting to E_ALL on their development
machines.
Tell your Apache server where you want to serve files from and what extension(s)
you want to identify the PHP files (.php is the standard, but you can use .html,
.phtml, or whatever you want). Go to your HTTP configuration files (C:\Program
Files\Apache Group\Apache\conf or whatever your path is), and open httpd.conf
with a text editor. Search for the word DocumentRoot (which should appear twice)
and change both the paths to the directory you want to serve files out of. (The
default is C:\Program Files\Apache Group\Apache\htdocs.). Add at least one PHP
extension directive as shown in the first line of the following code −
AddHandler application/x-httpd-php .php
AddType application/x-httpd-php .php .html
LoadModule php7_module "C:/php7/php7apache2_4.dll"
PHPiniDir "c:/php7"
Step 2
Open a text editor. Type: <?php phpinfo(); ?>. Save this file in your Web server's
document root as info.php. Start any Web browser and browse the file. You must always
use an HTTP request (http://www.testdomain.com/info.php or http://localhost/info.php or
http://127.0.0.1/info.php) rather than a filename (/home/httpd/info.php) for the file to be
parsed correctly.
You will see a long table of information about your new PHP installation message
Congratulations!
11PHP 7
Apache Configuration
If you are using Apache as a Web Server, then this section will guide you to edit Apache
Configuration Files.
Check here − PHP Configuration in Apache Server
PHP Configuration in Apache
Apache uses httpd.conf file for global settings, and the .htaccess file for per-directory
access settings. Older versions of Apache split up httpd.conf into three files (access.conf,
httpd.conf, and srm.conf), and some users still prefer this arrangement.
Apache server has a very powerful, but slightly complex, configuration system of its own.
Learn more about it at the Apache Web site − www.apache.org
The following section describes the settings in httpd.conf that affect PHP directly and
cannot be set elsewhere. If you have standard installation then httpd.conf will be found at
/etc/httpd/conf:
Timeout
This value sets the default number of seconds before any HTTP request will time out. If
you set PHP's max_execution_time to longer than this value, PHP will keep grinding away
but the user may see a 404 error. In safe mode, this value will be ignored; instead, you
must use the timeout value in php.ini.
DocumentRoot
DocumentRoot designates the root directory for all HTTP processes on that server. It looks
something like this on Unix −
DocumentRoot ./usr/local/apache_2.4.0/htdocs.
You can choose any directory as the document root.
AddType
The PHP MIME type needs to be set here for PHP files to be parsed. Remember that you
can associate any file extension with PHP like .php3, .php5 or .htm.
AddType application/x-httpd-php .php
AddType application/x-httpd-phps .phps
AddType application/x-httpd-php3 .php3 .phtml
AddType application/x-httpd-php .html
Action
You must uncomment this line for the Windows apxs module version of Apache with shared
object support −
12PHP 7
LoadModule php7_module modules/php7apache2_4.dll
on Unix flavors −
LoadModule php7_module modules/mod_php.so
AddModule
You must uncomment this line for the static module version of Apache.
AddModule mod_php7.c
PHP.INI File Configuration
The PHP configuration file, php.ini, is the final and immediate way to affect PHP's
functionality.
Check here − PHP.INI File Configuration
PHP.INI Configuration
The PHP configuration file, php.ini, is the final and immediate way to affect PHP's
functionality. The php.ini file is read each time PHP is initialized. In other words, httpd is
restarted for the module version or with each script execution for the CGI version. If your
change is not showing up, remember to stop and restart httpd. If it is still not showing up,
use phpinfo() to check the path to php.ini.
The configuration file is well commented and thorough. Keys are case sensitive, keyword
values are not; whitespace, and lines beginning with semicolons are ignored. Booleans can
be represented by 1/0, Yes/No, On/Off, or True/False. The default values in php.ini-dist
will result in a reasonable PHP installation that can be tweaked later.
Here we are explaining the important settings in php.ini, which you may need for your PHP
Parser.
short_open_tag = Off
Short open tags look like this: <? ?>. This option must be set to Off, if you want to use
the XML functions.
safe_mode = Off
If this is set to ON, you probably compiled PHP with the --enable-safe-mode flag. The Safe
mode is most relevant to CGI use. See the explanation in the section "CGI compile-time
options" given earlier in this chapter.
safe_mode_exec_dir = [DIR]
This option is relevant only if the safe mode is ON; it can also be set with the --with-exec-
dir flag during the Unix build process. PHP in safe mode only executes external binaries
13PHP 7
out of this directory. The default is /usr/local/bin. This has nothing to do with serving up
a normal PHP/HTML Web page.
safe_mode_allowed_env_vars = [PHP_]
This option sets which environment variables the users can change in safe mode. The
default is only those variables prepended with "PHP_". If this directive is empty, most
variables are alterable.
safe_mode_protected_env_vars = [LD_LIBRARY_PATH]
This option sets which environment variables the users cannot change in safe mode, even
if safe_mode_allowed_env_vars is set permissively.
disable_functions = [function1, function2...]
A welcome addition to the PHP4 configuration and one perpetuated in PHP5 is the ability
to disable the selected functions for security reasons. Previously, this necessitated hand-
editing the C code from which PHP was made. Filesystem, system, and network functions
should probably be the first to go because allowing the capability to write files and alter
the system over HTTP is never such a safe idea.
max_execution_time = 30
The function set_time_limit() will not work in safe mode. Therefore, this is the main way
to make a script time-out in safe mode. In Windows, you have to abort based on maximum
memory consumed rather than the time. You can also use the Apache timeout setting to
timeout but that will apply to non-PHP files on the site too.
error_reporting = E_ALL & ~E_NOTICE
The default value is E_ALL & ~E_NOTICE, all errors except notices. The development
servers should be set to at least the default; only the production servers should consider
a lesser value.
error_prepend_string = [""]
With its bookend, error_append_string, this setting allows you to make error messages a
different color than the other text.
warn_plus_overloading = Off
This setting issues a warning if the + operator is used with strings, as in a form value.
variables_order = EGPCS
This configuration setting supersedes gpc_order. Both are now deprecated along with
register_globals. It sets the order of the different variables: Environment, GET, POST,
COOKIE, and SERVER (aka Built-in). You can change this order around. The variables will
be overwritten successively in the left-to-right order, with the rightmost one winning the
hand every time. This means, if you left the default setting and happened to use the same
name for an environment variable, a POST variable, and a COOKIE variable, the COOKIE
14PHP 7
variable would own that name at the end of the process. In real life, this does not happen
much.
register_globals = Off
This setting allows you to decide whether you wish to register the EGPCS variables as
global. This is now deprecated, and as of PHP4.2, this flag is set to Off, by default. Use
the superglobal arrays instead. All the major code listings in this book use superglobal
arrays.
gpc_order = GPC
This setting has been Deprecated.
magic_quotes_gpc = On
This setting escapes the quotes in incoming GET/POST/COOKIE data. If you use a lot of
forms which possibly submit to themselves or other forms and display form values, you
may need to set this directive to On or prepare to use addslashes() on string-type data.
magic_quotes_runtime = Off
This setting escapes the quotes in incoming database and text strings. Remember that
SQL adds slashes to single quotes and apostrophes when storing the strings and does not
strip them off when returning them. If this setting is Off, you will need to use stripslashes()
when outputting any type of string data from an SQL database. If magic_quotes_sybase
is set to On, this must be Off.
magic_quotes_sybase = Off
This setting escapes single quotes in incoming database and text strings with Sybase-style
single quotes rather than backslashes. If magic_quotes_runtime is set to On, this must be
Off.
auto-prepend-file = [path/to/file]
If a path is specified here, PHP must automatically include() it at the beginning of every
PHP file. Include path-restrictions do apply.
auto-append-file = [path/to/file]
If a path is specified here, PHP must automatically include() at the end of every PHP file,
unless you escape by using the exit() function. Include path-restrictions do apply.
include_path = [DIR]
If you set this value, you will only be allowed to include or require files from these
directories. The include directory is generally under your document root. This is mandatory
if you are running in safe mode. Set this to .in, in order to include the files from the same
directory your script is in. Multiple directories are separated by colons:
.:/usr/local/apache/htdocs:/usr/local/lib.
15PHP 7
doc_root = [DIR]
If you are using Apache, you have already set a document root for this server or virtual
host in httpd.conf. Set this value here if you are using safe mode or if you want to enable
PHP only on a portion of your site (for example, only in one subdirectory of your Web
root).
file_uploads = [on/off]
Turn on this flag if you will upload files using PHP script.
upload_tmp_dir = [DIR]
Do not uncomment this line unless you understand the implications of HTTP uploads!
session.save-handler = files
Except in rare circumstances, you will not want to change this setting. So do not touch it.
ignore_user_abort = [On/Off]
This setting controls what happens if a site visitor clicks the browser’s Stop button. The
default is On, which means that the script continues to run till completion or timeout. If
the setting is changed to Off, the script will abort. This setting only works in module mode,
not CGI.
mysql.default_host = hostname
The default server host to use when connecting to the database server if no other host is
specified.
mysql.default_user = username
The default user name to use when connecting to the database server if no other name is
specified.
mysql.default_password = password
The default password to use when connecting to the database server if no other password
is specified.
Windows IIS Configuration
To configure IIS on your Windows machine, you can refer your IIS Reference Manual
shipped along with IIS.
164. PHP 7 – Scalar Type Declarations
PHP 7
In PHP 7, a new feature, Scalar type declarations, has been introduced. Scalar type
declaration has two options:
coercive - coercive is default mode and need not to be specified.
strict - strict mode has to explicitly hinted.
Following types for function parameters can be enforced using the above modes:
int
float
bool
string
interfaces
array
callable
Example – Coercive Mode
<?php
// Coercive mode
function sum(int ...$ints)
{
return array_sum($ints);
}
print(sum(2, '3', 4.1));
?>
It produces the following browser output −
9
Example - Strict Mode
<?php
// Strict mode
declare(strict_types=1);
function sum(int ...$ints)
{
17PHP 7
return array_sum($ints);
}
print(sum(2, '3', 4.1));
?>
It produces the following browser output −
Fatal error: Uncaught TypeError: Argument 2 passed to sum() must be of the type
integer, string given, ...
185. PHP 7 – Return Type Declarations
PHP 7
In PHP 7, a new feature, Return type declarations has been introduced. Return type
declaration specifies the type of value that a function should return. Following types for
return types can be declared.







int
float
bool
string
interfaces
array
callable
Example - Valid Return Type
<?php
declare(strict_types=1);
function returnIntValue(int $value): int
{
return $value;
}
print(returnIntValue(5));
?>
It produces the following browser output −
5
Example - Invalid Return Type
<?php
declare(strict_types=1);
function returnIntValue(int $value): int
{
return $value + 1.0;
}
print(returnIntValue(5));
?>
19PHP 7
It produces the following browser output −
Fatal error: Uncaught TypeError: Return value of returnIntValue() must be of the
type integer, float returned...
206. PHP 7 – Null Coalescing Operator
PHP 7
In PHP 7, a new feature, null coalescing operator (??) has been introduced. It is used
to replace the ternary operation in conjunction with isset() function. The Null coalescing
operator returns its first operand if it exists and is not NULL; otherwise it returns its second
operand.
Example
<?php
// fetch the value of $_GET['user'] and returns 'not passed'
// if username is not passed
$username = $_GET['username'] ?? 'not passed';
print($username);
print("<br/>");
// Equivalent code using ternary operator
$username = isset($_GET['username']) ? $_GET['username'] : 'not passed';
print($username);
print("<br/>");
// Chaining ?? operation
$username = $_GET['username'] ?? $_POST['username'] ?? 'not passed';
print($username);
?>
It produces the following browser output −
not passed
not passed
not passed
217. PHP 7 – Spaceship Operator
PHP 7
In PHP 7, a new feature, spaceship operator has been introduced. It is used to compare
two expressions. It returns -1, 0 or 1 when first expression is respectively less than, equal
to, or greater than second expression.
Example
<?php
//integer comparison
print( 1 <=> 1);print("<br/>");
print( 1 <=> 2);print("<br/>");
print( 2 <=> 1);print("<br/>");
print("<br/>");
//float comparison
print( 1.5 <=> 1.5);print("<br/>");
print( 1.5 <=> 2.5);print("<br/>");
print( 2.5 <=> 1.5);print("<br/>");
print("<br/>");
//string comparison
print( "a" <=> "a");print("<br/>");
print( "a" <=> "b");print("<br/>");
print( "b" <=> "a");print("<br/>");
?>
It produces the following browser output −
0
-1
1
0
-1
1
22PHP 7
0
-1
1
238. PHP 7 – Constant Arrays
PHP 7
Array constants can now be defined using the define() function. In PHP 5.6, they could
only be defined using const keyword.
Example
<?php
//define a array using define function
define('animals', [
'dog',
'cat',
'bird'
]);
print(animals[1]);
?>
It produces the following browser output −
cat
249. PHP 7 – Anonymous Classes
PHP 7
Anonymous classes can now be defined using new class. Anonymous class can be used in
place of a full class definition.
Example
<?php
interface Logger {
public function log(string $msg);
}
class Application {
private $logger;
public function getLogger(): Logger {
return $this->logger;
}
public function setLogger(Logger $logger) {
$this->logger = $logger;
}
}
$app = new Application;
$app->setLogger(new class implements Logger {
public function log(string $msg) {
print($msg);
}
});
$app->getLogger()->log("My first Log Message");
?>
It produces the following browser output −
My first Log Message
2510. PHP 7 – Closure::call()
PHP 7
Closure::call() method is added as a shorthand way to temporarily bind an object scope
to a closure and invoke it. It is much faster in performance as compared to bindTo of PHP
5.6.
Example – Pre PHP 7
<?php
class A {
private $x = 1;
}
// Define a closure Pre PHP 7 code
$getValue = function() {
return $this->x;
};
// Bind a clousure
$value = $getValue->bindTo(new A, 'A');
print($value());
?>
It produces the following browser output −
1
Example – PHP 7+
<?php
class A {
private $x = 1;
}
// PHP 7+ code, Define
$value = function() {
return $this->x;
26PHP 7
};
print($value->call(new A));
?>
It produces the following browser output −
1
2711. PHP 7 – Filtered unserialize()
PHP 7
PHP 7 introduces Filtered unserialize() function to provide better security when
unserializing objects on untrusted data. It prevents possible code injections and enables
the developer to whitelist classes that can be unserialized.
Example
<?php
class MyClass1 {
public $obj1prop;
}
class MyClass2 {
public $obj2prop;
}
$obj1 = new MyClass1();
$obj1->obj1prop = 1;
$obj2 = new MyClass2();
$obj2->obj2prop = 2;
$serializedObj1 = serialize($obj1);
$serializedObj2 = serialize($obj2);
// default behaviour that accepts all classes
// second argument can be ommited.
// if allowed_classes is passed
__PHP_Incomplete_Class object
as
false,
unserialize
converts
all
objects
into
$data = unserialize($serializedObj1 , ["allowed_classes" => true]);
// converts all objects into __PHP_Incomplete_Class object except those of MyClass1 and
MyClass2
$data2 = unserialize($serializedObj2 , ["allowed_classes" => ["MyClass1", "MyClass2"]]);
print($data->obj1prop);
print("<br/>");
print($data2->obj2prop);
?>
28PHP 7
It produces the following browser output −
1
2
2912. PHP 7 – IntlChar
PHP 7
In PHP7, a new IntlChar class is added, which seeks to expose additional ICU
functionality. This class defines a number of static methods and constants, which can be
used to manipulate unicode characters. You need to have Intl extension installed prior to
using this class.
Example
<?php
printf('%x', IntlChar::CODEPOINT_MAX);
print (IntlChar::charName('@'));
print(IntlChar::ispunct('!'));
?>
It produces the following browser output −
10ffff
COMMERCIAL AT
true
3013. PHP 7 – CSPRNG
PHP 7
In PHP 7, following two new functions are introduced to generate cryptographically secure
integers and strings in a cross platform way.
random_bytes() - Generates cryptographically secure pseudo-random bytes.
random_int() - Generates cryptographically secure pseudo-random integers.
random_bytes()
random_bytes() generates an arbitrary-length string of cryptographic random bytes that
are suitable for cryptographic use, such as when generating salts, keys or initialization
vectors.
Syntax
string random_bytes ( int $length )
Parameters

length - The length of the random string that should be returned in bytes.
Return Values

Returns a string containing the requested number of cryptographically secure
random bytes.
Errors/Exceptions
If an appropriate source of randomness cannot be found, an Exception will be
thrown.
If invalid parameters are given, a TypeError will be thrown.
If an invalid length of bytes is given, an Error will be thrown.
Example
<?php
$bytes = random_bytes(5);
print(bin2hex($bytes));
?>
31PHP 7
It produces the following browser output −
54cc305593
random_int()
random_int() generates cryptographic random integers that are suitable for use where
unbiased results are critical.
Syntax
int random_int ( int $min , int $max )
Parameters
min - The lowest value to be returned, which must be PHP_INT_MIN or higher.
max - The highest value to be returned, which must be less than or equal to
PHP_INT_MAX.
Return Values

Returns a cryptographically secure random integer in the range min to max,
inclusive.
Errors/Exceptions
If an appropriate source of randomness cannot be found, an Exception will be
thrown.
If invalid parameters are given, a TypeError will be thrown.
If max is less than min, an Error will be thrown.
Example
<?php
print(random_int(100, 999));
print("
");
print(random_int(-1000, 0));
?>
It produces the following browser output −
614
-882
3214. PHP 7 – Expectations
PHP 7
Expectations are a backwards compatible enhancement to the older assert() function.
Expectation allows for zero-cost assertions in production code, and provides the ability to
throw custom exceptions when the assertion fails. assert() is now a language construct,
where the first parameter is an expression as compared to being a string or Boolean to be
tested.
Configuration directives for assert()
Directive
Default
value
Possible values
1 - generate and execute code (development mode)
zend.assertions
1
0 - generate code but jump around it at runtime
-1 - do not generate code (production mode)
assert.exception
0
1 – throw, when the assertion fails, either by throwing
the object provided as the exception or by throwing a
new AssertionError object if exception was not
provided.
0 - use or generate a Throwable as described above, but
only generates a warning based on that object rather
than throwing it (compatible with PHP 5 behaviour)
Parameters
assertion - The assertion. In PHP 5, this must be either a string to be evaluated
or a Boolean to be tested. In PHP 7, this may also be any expression that returns
a value, which will be executed and the result is used to indicate whether the
assertion succeeded or failed.
description - An optional description that will be included in the failure message,
if the assertion fails.
exception - In PHP 7, the second parameter can be a Throwable object instead
of a descriptive string, in which case this is the object that will be thrown, if the
assertion fails and the assert.exception configuration directive is enabled.
33PHP 7
Return Values
FALSE if the assertion is false, TRUE otherwise.
Example
<?php
ini_set('assert.exception', 1);
class CustomError extends AssertionError {}
assert(false, new CustomError('Custom Error Message!'));
?>
It produces the following browser output −
Fatal error: Uncaught CustomError: Custom Error Message! in...
3415. PHP 7 – use Statement
PHP 7
From PHP7 onwards, a single use statement can be used to import Classes, functions and
constants from same namespace instead of multiple use statements.
Example
<?php
// Before PHP 7
use com\tutorialspoint\ClassA;
use com\tutorialspoint\ClassB;
use com\tutorialspoint\ClassC as C;
use function com\tutorialspoint\fn_a;
use function com\tutorialspoint\fn_b;
use function com\tutorialspoint\fn_c;
use const com\tutorialspoint\ConstA;
use const com\tutorialspoint\ConstB;
use const com\tutorialspoint\ConstC;
// PHP 7+ code
use com\tutorialspoint\{ClassA, ClassB, ClassC as C};
use function com\tutorialspoint\{fn_a, fn_b, fn_c};
use const com\tutorialspoint\{ConstA, ConstB, ConstC};
?>
3516. PHP 7 – Error Handling
PHP 7
From PHP 7, error handling and reporting has been changed. Instead of reporting errors
through the traditional error reporting mechanism used by PHP 5, now most errors are
handled by throwing Error exceptions. Similar to exceptions, these Error exceptions bubble
up until they reach the first matching catch block. If there are no matching blocks, then a
default exception handler installed with set_exception_handler() will be called. In case
there is no default exception handler, then the exception will be converted to a fatal error
and will be handled like a traditional error.
As the Error hierarchy is not extended from Exception, code that uses catch (Exception
$e) { ... } blocks to handle uncaught exceptions in PHP 5 will not handle such errors. A
catch (Error $e) { ... } block or a set_exception_handler() handler is required to handle
fatal errors.
Example
<?php
class MathOperations
{
protected $n = 10;
// Try to get the Division by Zero error object and display as Exception
public function doOperation(): string
{
try {
$value = $this->n % 0;
return $value;
} catch (DivisionByZeroError $e) {
return $e->getMessage();
}
}
}
$mathOperationsbj = new MathOperations();
print($mathOperationsObj->doOperation());
?>
36PHP 7
It produces the following browser output −
Modulo by zero
3717. PHP 7 – Integer Division
PHP 7
PHP 7 introduces a new function intdiv(), which performs integer division of its operands
and return the division as int.
Example
<?php
$value = intdiv(10,3);
var_dump($value);
print("
");
print($value);
?>
It produces the following browser output −
int(3)
3
3818. PHP 7 – Session Options
PHP 7
From PHP7+, session_start() function accepts an array of options to override the session
configuration directives set in php.ini. These options supports session.lazy_write, which
is by default on and causes PHP to overwrite any session file if the session data has
changed.
Another option added is read_and_close, which indicates that the session data should
be read and then the session should immediately be closed unchanged. For example, Set
session.cache_limiter to private and set the flag to close the session immediately after
reading it, using the following code snippet.
<?php
session_start([
'cache_limiter' => 'private',
'read_and_close' => true,
]);
?>
3919. PHP 7 – Deprecated Features
PHP 7
Following features are deprecated and may be removed from future releases of PHP.
PHP 4 Style Constructors
PHP 4 style Constructors are methods having same name as the class they are defined in,
are now deprecated, and will be removed in the future. PHP 7 will emit E_DEPRECATED if
a PHP 4 constructor is the only constructor defined within a class. Classes implementing a
__construct() method are unaffected.
Example
<?php
class A {
function A() {
print('Style Constructor');
}
}
?>
It produces the following browser output −
Deprecated: Methods with the same name as their class will not be constructors
in a future version of PHP; A has a deprecated constructor in...
Static Calls to Non-Static Methods
Static calls to non-static methods are deprecated, and may be removed in the future.
Example
<?php
class A {
function b() {
print('Non-static call');
}
}
A::b();
?>
40PHP 7
It produces the following browser output −
Deprecated: Non-static method A::b() should not be called statically in...
Non-static call
password_hash() salt option
The salt option for the password_hash() function has been deprecated so that the
developers do not generate their own (usually insecure) salts. The function itself generates
a cryptographically secure salt, when no salt is provided by the developer - thus custom
salt generation is not required any more.
capture_session_meta SSL context option
The capture_session_meta SSL context option has been deprecated. SSL metadata is
now used through the stream_get_meta_data() function.
4120. PHP 7 – Removed Extensions & SAPIs
PHP 7
Following Extensions have been removed from PHP 7 onwards-
ereg
mssql
mysql
sybase_ct
Following SAPIs have been removed from PHP 7 onwards-
aolserver
apache
apache_hooks
apache2filter
caudium
continuity
isapi
milter
nsapi
phttpd
pi3web
roxen
thttpd
tux
webjames
42
GNU/Linux Command−Line Tools Summary
Gareth Anderson
<somecsstudent(at)gmail.com>
Chris Karakas − Conversion from LyX to DocBook SGML, Index generation
Revision History
Revision 1.2
15th April 2006
Revised by: GA
Corrected typing errors, generated new, much smaller index (more accurate in my opinion). Updated errors in
document for TLDP.
Revision 1.1
28th February 2006
Revised by: CK
Corrected typos, generated new index (9000 index entries!).
Revision 1.0
6th February 2006
Revised by: GA
Major restructuring, now in a docbook book format. Removed large chunks of content and revised other parts
(removed chapters and sectioned some areas more). This is likely the final release by the author, I hope that
someone finds this guide useful as I do not intend to continue work on this guide.
Revision 0.7.1
25th February 2005
Revised by: CK
Set special characters in math mode, produced PDF and PS with Computer Modern fonts in OT1 encoding
and created correct SGML for key combinations.
Revision 0.7
5th December 2004
Revised by: GA
Updated document with new grammatical review. Re−ordered the entire Text section. Removed a fair
amount of content.
Revision v0.6
20th April 2004
Revised by: GA
Attempted to fix document according to TLDP criticisms. Added notes and tips more sectioning. Now
complying to the open group standards for the UNIX
system trademark. Document should be ready for TLDP site.
Revision v0.5
6th October 2003
Revised by: GA
Fixed a variety of errors as according to the review and made some consistency improvements to the
document.
Revision v0.4
15th July 2003
Revised by: GA
Made small improvements to the document as suggested (so far) by the thorough TLDP review, improved
consistency of document and made small content additions.
Revision v0.3
26th June 2003
Revised by: GA
Minor errors fixed, updated the appendix with information for finding where a tool is from. Fixed
referencing/citation problems and improved further reading and intro sections, added an audio section.
Revision v0.2
20th April 2003
Revised by: GAThis is the initial public release. Added more code−style then before, broke text−section into more
subsections. Improved consistency of document and fixed various index entries.
Revision v0.1
27th March 2003
Revised by: GA
This is the initial draft release (the first release to be converted from LyX to DocBook SGML).
This document is an attempt to provide a summary of useful command−line tools available to a GNU/Linux
based operating system, the tools listed are designed to benefit the majority of users and have being chosen at
the authors discretion. This document is not a comprehensive list of every existent tool available to a
GNU/Linux based system, nor does it have in−depth explanations of how things work. It is a summary which
can be used to learn about and how to use many of the tools available to a GNU/Linux based operating
system.GNU/Linux Command−Line Tools Summary
Table of Contents
Chapter 1. Introduction......................................................................................................................................1
1.1. Who would want to read this guide?.................................................................................................1
1.2. Who would not want to read this guide?..........................................................................................2
1.3. Availability of sources......................................................................................................................2
1.4. Conventions used in this guide.........................................................................................................2
1.5. Resources used to create this document............................................................................................4
1.6. Feedback...........................................................................................................................................4
1.7. Contributors......................................................................................................................................5
Chapter 2. Legal..................................................................................................................................................7
2.1. Disclaimer.........................................................................................................................................7
2.2. License..............................................................................................................................................7
Chapter 3. The Unix Tools Philosophy.............................................................................................................8
Chapter 4. Shell Tips..........................................................................................................................................9
4.1. General Shell Tips.............................................................................................................................9
4.2. The command−line history.............................................................................................................12
4.3. Other Key combinations.................................................................................................................13
4.4. Virtual Terminals and screen..........................................................................................................13
Chapter 5. Help.................................................................................................................................................15
Chapter 6. Directing Input/Output.................................................................................................................17
6.1. Concept Definitions........................................................................................................................17
6.2. Usage...............................................................................................................................................17
6.3. Command Substitution...................................................................................................................19
6.4. Performing more than one command..............................................................................................19
Chapter 7. Working with the file−system.......................................................................................................21
7.1. Moving around the filesystem........................................................................................................21
7.1.1. Finding files...........................................................................................................................23
7.2. Working with files and folders.......................................................................................................24
7.3. Mass Rename/copy/link Tools........................................................................................................29
Chapter 8. Finding information about the system.........................................................................................32
8.1. Date/Time/Calendars......................................................................................................................35
8.2. Finding information about partitions..............................................................................................36
Chapter 9. Controlling the system...................................................................................................................37
9.1. Mounting and Unmounting (Floppy/CDROM/Hard−drive Partitions)..........................................37
9.2. Shutting Down/Rebooting the System............................................................................................38
9.3. Controlling Processes.....................................................................................................................40
9.4. Controlling services........................................................................................................................44
Chapter 10. Managing users............................................................................................................................45
10.1. Users/Groups.................................................................................................................................45
iGNU/Linux Command−Line Tools Summary
Table of Contents
Chapter 11. Text Related Tools.......................................................................................................................47
11.1. Text Editors...................................................................................................................................47
11.2. Text Viewing Tools......................................................................................................................47
11.3. Text Information Tools.................................................................................................................49
11.4. Text manipulation tools................................................................................................................50
11.5. Text Conversion/Filter Tools........................................................................................................54
11.5.1. Conversion tools..................................................................................................................56
11.6. Finding Text Within Files.............................................................................................................57
Chapter 12. Mathematical tools.......................................................................................................................58
Chapter 13. Network Commands....................................................................................................................60
13.1. Network Configuration.................................................................................................................61
13.2. Internet Specific Commands.........................................................................................................62
13.3. Remote Administration Related....................................................................................................64
Chapter 14. Security.........................................................................................................................................66
14.1. Some basic Security Tools............................................................................................................67
14.2. File Permissions............................................................................................................................67
Chapter 15. Archiving Files.............................................................................................................................71
15.1. tar (tape archiver)..........................................................................................................................71
15.2. rsync..............................................................................................................................................71
15.3. Compression.................................................................................................................................72
Chapter 16. Graphics tools (command line based)........................................................................................74
Chapter 17. Working with MS−DOS files......................................................................................................76
Chapter 18. Scheduling Commands to run in the background....................................................................77
Chapter 19. Miscellaneous...............................................................................................................................80
Chapter 20. Mini−Guides.................................................................................................................................81
20.1. RPM: Redhat Package Management System................................................................................81
20.2. Checking the Hard Disk for errors................................................................................................81
20.3. Duplicating disks..........................................................................................................................82
20.4. Wildcards......................................................................................................................................82
20.4.1. Standard Wildcards (globbing patterns)..............................................................................83
20.4.2. Regular Expressions............................................................................................................83
20.4.3. Useful categories of characters (as defined by the POSIX standard)..................................85
Appendix A. Appendix.....................................................................................................................................86
A.1. Finding Packages/Tools.................................................................................................................86
A.1.1. Finding more useful tools.....................................................................................................86
A.1.2. Finding a particular tool(s)...................................................................................................86
A.1.3. Finding package(s)...............................................................................................................87
A.2. Further Reading..............................................................................................................................87
iiGNU/Linux Command−Line Tools Summary
Table of Contents
Appendix A. Appendix
A.2.1. General Further Reading......................................................................................................87
A.2.2. Specific Further reading.......................................................................................................88
A.2.3. Online Manual And Info Pages............................................................................................89
A.3. GNU Free Documentation License................................................................................................89
A.3.1. PREAMBLE.........................................................................................................................90
A.3.2. APPLICABILITY AND DEFINITIONS.............................................................................90
A.3.3. VERBATIM COPYING......................................................................................................91
A.3.4. COPYING IN QUANTITY.................................................................................................91
A.3.5. MODIFICATIONS...............................................................................................................91
A.3.6. COMBINING DOCUMENTS.............................................................................................93
A.3.7. COLLECTIONS OF DOCUMENTS...................................................................................93
A.3.8. AGGREGATION WITH INDEPENDENT WORKS.........................................................93
A.3.9. TRANSLATION..................................................................................................................94
A.3.10. TERMINATION................................................................................................................94
A.3.11. FUTURE REVISIONS OF THIS LICENSE.....................................................................94
Bibliography..........................................................................................................................................94
.........................................................................................................................................................94
iiiChapter 1. Introduction
This document is an attempt to summarise the many command−line based tools available to a GNU/Linux
based operating system. This guide is not a complete listing (I doubt it's possible to document all available
programs), this document lists many tools which are available to GNU/Linux systems and which are, or can
be useful to the majority of users.
Each tool description provides a quick overview of it's function and some useful options for that individual
tool.
The tools listed that require a GUI, usually the X windowing system, are those listed in the Graphics Tools
section. All other tools are completely command−line−based and do not require a GUI to run.
If you are looking for information on GUI based tools you will need to look elsewhere.
Also note that a few of the tools in this guide are bash (the Bourne−Again−SHell) specific, tools specific to
other shells are not listed in this document.
For some of the tools that are harder to use, or perform a more complex task, there are several mini−tutorials
(or mini−guides; Chapter 20) within this document.
Where a mini−guide was considered unncessary, detailed descriptions that explain in detail how a particular
tool works, and some examples of how to use it are provided.
Please note that the word "tool" is used interchangeably with the word "command", both have the same
meaning (at least in this guide). For a more detailed explanation, read about the UNIX Tools Philosophy here:
Chapter 3 or visit the links in the appendix, Section A.2.2.1.
To find out which tools are bash specific
To find out which tools are bash specific you can type:
enable −a
1.1. Who would want to read this guide?
Anyone who is interested in learning about the tools (also known as commands) available to them when using
their GNU/Linux based operating system.
Why would you want to learn how to use the command−line (and available tools)? The Command
Line−Interface (CLI), while difficult to learn, is the quickest and most efficient way to use a computer for
many different tasks. The CLI is the normal method of use for most UNIX system administrators,
programmers and some power users. While a GUI is better suited to some tasks, many operations are best
suited to the CLI.
The major motivation behind learning the GNU/Linux CLI is the authors idea that, with software in general,
the more time spent learning something equals less time spent performing that particular task (authors opinion
only).
Chapter 1. Introduction
1GNU/Linux Command−Line Tools Summary
This guide is aimed at beginners to intermediate users who want to learn about the command−line tools
available to them. Advanced users may wish to use it as a command reference, however this document aims to
list commands of interest, as judged by the authors opinion, it is not designed to be completely
comprehensive, see the appendix, Section A.2.1 for further information. Or if you are not looking for a
command reference guide, but a more gentle introduction to GNU/Linux you may be interested in the
Introduction to Linux guide authored by Machtelt Garrels.
This guide could also be considered a summarised version of the Linux Cookbook. If you are looking for a
book with more detailed descriptions of each tool have a look at the Linux Cookbook Homepage, also check
out the command list from "Linux in a Nutshell 3rd Edition" for an index of 300+ commands and their
explanations.
1.2. Who would not want to read this guide?
Anyone who is not interested in the command−line, or anyone looking for a detailed reference to all available
GNU/Linux tools should look elsewhere. This is only a summary, while it does list many commands, it's not a
complete listing (I don't think it's possible to make a complete listing anyway).
This document would not be of interest to those who already have an expert knowledge of the command−line
interface and do require any reference information. Or those readers who require detailed lists of options for
each command, the man pages are better suited to this purpose.
1.3. Availability of sources
The modifiable sources of the original book (in english), are available in LyX format (LyX Document
Processor) or Machine−translated SGML (SGML markup language).
LyX is a completely free document processor based on LaTeX, downloadable from the LyX homepage..
See for the modifiable sources of this document. These are the official versions. We (the translators and
current maintainers) plan to continue work on this document and add new chapters and enhancements. If you
want to see the version we are currently working on (the "bleeding edge" version), check the GNU/Linux
Command−Line Tools Summary Homepage from time to time (kindly hosted by Chris Karakas).
1.4. Conventions used in this guide
The following conventions are used within this guide:
italic
Anything appearing in italic, like this is either an executable command or emphasized text. Tools
(executable commands) are in italics to prevent confusion. Some tools have names which are real
english words, such as the "locate" tool.
key combinations
Are represented by using a '−' (dash sign) in−between the key(s), which must be used in combination.
All combinations are also printed in italics to improve clarity. For example CTRL−Z means hold
down the Control key and press the z key.
admonitions
Admonitions are little pictures used to emphasize something of importance to the reader.
Chapter 1. Introduction
2GNU/Linux Command−Line Tools Summary
The five types used are:
This is a note
Notes often give important information about a tool.
This is a tip
This will offer a useful switch or useful way to use a tool.
This is something important
This is something that is considered very important. Consider it like a note with extra
importance, they are usually there to save the reader time.
This is a caution
This will inform you of something that you be careful about (because it could be
harmful to your system).
This is a warning
This will inform you of something that you shouldn't do (because it probably will
break something within your system).
code examples
Code examples are shown for most commands.
Below is an example of what code looks like:
Hello World, I'm a code example. :)
command syntax
(or a similar phrase) simply shows how you would normally use the command. Often real examples
are used instead of explaining the command syntax.
The phrase " Command syntax" is always followed by the way you would type a command in a shell.
The standard syntax for any tool is usually:
command −options file
Note
Note that some tools do not accept options.
wildcards
Also note that most commands, even when not explicitly stated, will work with standard wildcards (or
globbing patterns) such as *, [A−Z] and various other standard wildcards. Refer to Section 20.4.1 for
further information.
access keys
Access keys enable navigation through the document, without relying on a mouse. The following keys
have been given special meaning in this document:
P
Chapter 1. Introduction
3GNU/Linux Command−Line Tools Summary
Previous page.
N
Next page.
H
Home of the document (Table of Contents).
U
Up (takes you one level up the section hierarchy).
If you also happen to be reading the document from its original location, then the following access
keys can also be used:
S
Start (takes you to the author's start page).
T
The current ("This") page, without the Sitemenu on the left.
M
The current page in a frameset, where the left frame contains a Menu.
To use the access keys, you have to simultaneously press a modifier key, which may vary from browser to
browser. For example in NN6+/Mozilla, the modifier key is ALT, so you have to use ALT−N to go to the
next page, and ALT−P to come back. In other browsers such as IE6, the access keys just give focus to the
associated link, so the sequence becomes ALT−N Enter . Try it, you'll like it! Inline graphic
1.5. Resources used to create this document
To create the GNU/Linux Command−Line Tools Summary, I used LyX, the document processor. To convert
the LyX files to DocBook SGML I used the lyxtox Scripts created by Chris Karakas.
You may also want to check out the db2lyx package, created by Dr. B Guillion, which can be used to convert
LyX files to XML DocBook and XML DocBook back to LyX.
I also had assistance from various The Linux Documentation Project volunteers (see the contributors section
Section 1.7 for specific details).
1.6. Feedback
Feedback is necessary for the advancement of this guide. Positive, constructive criticism is encouraged. If you
have ideas, suggestions, advice, or problems with this guide, please send an email to the author Gareth
Anderson.
Contributions
If you wish to make contributions it is recommended (if possible) to read the LyX file(s) for this
document. They contain various notes which you can't see in the other versions.
These notes highlight the areas that need contributions, certain tools which I cannot understand, tools
which have not been added, or tools which were removed. These notes also explain some of the structure
of this document.
Chapter 1. Introduction
4GNU/Linux Command−Line Tools Summary
1.7. Contributors
As you may be able to see, parts of this guide are based off various advice columns on GNU/Linux, anything
that has being directly quoted from an article can be found in the references, Bibliography, section of this
document.
The following is a list of people who have made a significant contribution to this document, in a rough
chronological order.
Chris Karakas:
Chris allowed the use of his lyxtox scripts to convert the LyX file of the document to working
DocBook SGML output (to learn how to use the lyxtox scripts yourself, see Document processing
with LyX and SGML).
◊ Chris provided useful suggestions and advice, and added an index listing for many of the
commands.
◊ Chris is also responsible for the great looking HTML file for this document (the CSS file and
HTML customisations are completely his work).
◊ Chris has also helped fix up problems in the document (many times), especially with
docbook/sgml, and LyX related issues.
◊ Chris has also improved the structure of the document by adding labels and fixing minor
errors.
William West:
William provided a thorough review of the document as required by the Linux Documentation
Project. He is responsible for a variety of improvements to the quality of this document.
His contributions include:
◊ Improvements to the readability of this document.
◊ Improvements to the structure and consistency of this document.
◊ Various grammar improvements throughout the document.
◊ Repair of some minor technical errors.
Tabatha Persad/Marshall:
Tabatha, as the Linux Documentation Project Review Coordinator (at the time) also gave a brief
review of this document. Her general advice was used to improve the structure, language and
grammar of the document.
Rahul Sundaram:
Rahul provided a brief review of this document for the Linux Documentation Project. Advice from his
brief review was integrated into this document to improve readability and structure, several references
were added as recommended by Rahul.
David Lawyer:
David's criticism of the document (via the TLDP discuss list) were listened to, and attempts to
improve the document were made. A number of his criticisms were addressed and improved.
George Harmon:
George provided a second language review. His detailed review of the material allowed me to
improve the general grammar of the document and some minor errors.
Machtelt Garrels (tille):
Machtelt provided tips in regard to referencing the correct LDP documents from this guide. As well as
general advice on improvements to the guide.
Michael Kerrisk:
Chapter 1. Introduction
5GNU/Linux Command−Line Tools Summary
Michael pointed out a number of technical errors in the document after his brief review on behalf of
the TLDP during posts to the discussion list.
Chapter 1. Introduction
6Chapter 2. Legal
The legal chapter provides information about the disclaimer that applies to the entire document and the
licensing information.
2.1. Disclaimer
No liability for the contents of this document can be accepted. Use the concepts, examples and other content
at your own risk. There may be errors and inaccuracies, that may of course be damaging to your system.
Although this is highly unlikely, you should proceed with caution. The author does not accept any
responsibility for any damage incurred.
All copyrights are held by their respective owners, unless specifically noted otherwise. Use of a term in this
document should not be regarded as affecting the validity of any trademark or service mark.
Naming of particular products or brands should not be seen as endorsements.
UNIX is a registered trademark of The Open Group.
2.2. License
Copyright © 2003 − 2006 Gareth Anderson. Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License, Version 1.1 or any later version
published by the Free Software Foundation; with no Invariant Sections, with no Front−Cover Texts, and with
no Back−Cover Texts. A copy of the license can be found in the section called the GNU Free Documentation
License or at the GNU Documentation License Site.
Chapter 2. Legal
7Chapter 3. The Unix Tools Philosophy
A tool is a simple program, usually designed for a specific purpose, it is sometimes referred to (at least
throughout this document) as a command.
The " Unix tools philosophy" emerged during the creation of the UNIX operating system, after the
breakthrough invention of the pipe '|' (refer to Chapter 6 for information on using the pipe).
The pipe allowed the output of one program to be sent to the input of another. The tools philosophy was to
have small programs to accomplish a particular task instead of trying to develop large monolithic programs to
do a large number of tasks. To accomplish more complex tasks, tools would simply be connected together,
using pipes.
All the core UNIX system tools were designed so that they could operate together. The original text−based
editors (and even TeX and LaTeX) use ASCII (the American text encoding standard; an open standard) and
you can use tools such as; sed, awk, vi, grep, cat, more, tr and various other text−based tools in conjunction
with these editors.
Using this philosophy programmers avoided writing a program (within their larger program) that had already
been written by someone else (this could be considered a form of code recycling). For example,
command−line spell checkers are used by a number of different applications instead of having each
application create its own own spell checker.
This philosophy lives on today in GNU/Linux and various other UNIX system−based operating systems
(FreeBSD, NetBSD, OpenBSD, etc.).
For further information (articles) on the UNIX tools philosophy please see the further reading section, here:
Section A.2.2.1
Chapter 3. The Unix Tools Philosophy
8Chapter 4. Shell Tips
The shell tips chapter provides handy tricks that you may wish to use when you are using a GNU/Linux shell
(the command−line interface). This information includes handy shortcut key combinations, the shell's
command history and information on virtual terminals.
If you can't boot into your system
If your having problems booting into your system you may like to use a shell so you can boot into your
system and attempt to fix things up again.
To do this you need to pass the "init=/bin/sh" to your system before you boot up.
If you don't know how to do this please see Chapter 14, the technique is the same except this time you
pass "init=bin/sh" rather than "single".
4.1. General Shell Tips
Automatic Command Completion
Use the TAB key and bash will attempt to complete the command for you automatically. You can use
it to complete command (tool) names. You can also use it when working with the file−system, when
changing directories, copying files et cetera.
There are also other lesser known ways to use automatic command completion (for example
completing user names):[1]
ESC−Y (Y: special character)
testing autoindexing Will attempt to complete the command name for you. If it fails it will
either list the possible completions (if they exist). If there are none it will simply beep
(and/or) flash the screen.
CTRL−X−Y (Y: special character)
Lists the possible completions (it won't attempt to complete it for you) or beep if there are no
possible completions.
Special−characters:
Use the following special characters combined with either ESC−Y or CTRL−X−Y , where Y is some
special characters. For example ESC−$ or CTRL−X−$ to complete an environment variable name.
◊ ~ (tilde) complete a user name
◊ @ (at sign) complete a machine name
◊ $ (dollars sign) complete an environment variable name
◊ ! (exclamation mark) a magic character for completing a command name or a file name. The !
special character has the same function as the TAB key. It works in some other situations; for
example when completing man page names.
alias
The alias command will list your current aliases. You can use unalias to remove the alias (to disable
it just for one command add a "\" (back−slash) before the command)...
An alias allows one command to be substituted for another. This is used to make a command do
Chapter 4. Shell Tips
9GNU/Linux Command−Line Tools Summary
something else or to automatically add certain options. This can be either be done during one session
using the alias command (see below) or the information can be added to the .bashrc file (found in the
users home directory).
Below is an example of what an alias section (within your .bashrc file) might look like:
# my personal aliases
alias cp='cp −vi' #to prompt when copying if you want to overwrite and will tell you where
alias rm='rm −i' #Prompts you if you really want to remove it.
alias mv='mv −i' #Prompts you if you are going to overwrite something
On any Mandriva GNU/Linux system the global aliases (for all users) are all in /etc/profile.d/alias.sh.
The above listed commands already have aliases, as well as several other commonly used commands.
set −x
set is one of bash's inbuilt commands, try looking in the bash manual for its many usage options.
Using set with the −x option will make bash print out each command it is going to run before it runs
it.
This can be useful to find out what is happening with certain commands such as things being quoted
that contain wildcards or special symbols that could cause problems, or complex aliases. Use set +x to
turn this back off.
Examples
After using set −x you can run the command:
ls
The output printed before the command runs (for example):
+ ls −F −−color=auto
Which means that the command is really an alias to run ls with the −F and −−color=auto options.
Use a "\" (backslash) before the command to run it without the alias.
\ (backslash)
The backslash escape character can be used before a shell command to override any aliases.
For example if rm was made into an alias for rm −i then typing "rm" would actually run rm −i.
However, typing \rm lets the shell ignore the alias and just run rm (its runs exactly what you type),
this way it won't confirm if you want to delete things.
Using rm
Please note that the alias for the remove command is there for a reason. Using it
incorrectly could remove files which you don't want removed.
Only use \rm if you know exactly what you are doing (recovering files is not easy, rm
does not send things to a recycle bin).
The "\" character can be used before special characters (such as a space or a wildcard), to stop bash
from trying to expand them. You can make a directory name with a space in it using a backslash
before the space. For example you could type cd My\ Directory\ With\ Spaces which normally
wouldn't work.
Chapter 4. Shell Tips
10GNU/Linux Command−Line Tools Summary
The "\" character can also be used to stop bash from expanding certain symbols (as an alternative you
could use single quotation marks, although you may need to use both).
The TAB Key
Please note that using the TAB key (automatic−command−completion) will
automatically use escapes for spaces (so you don't have to type them manually).
script
The "script" command creates a typescript, or "capture log" of a shell session − it writes a copy of
your session to a file, including commands you type and their output.
~ (tilde character)
The tilde character is used as an alias to a users home directory.
For example, if your user−name was "fred", instead of typing cd /home/fred you could simply type cd
~. Or to get to fred's tmp directory (under his home directory) you could type cd ~/tmp.
Home directory shortcut
~ (tilde) can also be used as a shortcut to other users home directories, simply type:
~user_name and it will take you to the users home directory. Note that you need to
spell the username exactly correct, no wildcards.
set bell−style none
This particular set command will turn off the system bell from the command−line (use xset −b for X
windows). If you want the bell to stay off pernamently (no audible bell) then you can add this
command to your ".bashrc" or ".bash_profile" (just add it to the same one you have your alises in...).
reset
The reset command re−initializes your current terminal. This can be useful when the text from your
terminal becomes garbled, simply type "reset" and this will fix your terminal.
exit
Closes your current terminal (with x−terminals) or logs−out. Also try CTRL−D .
logout
Logs out of a terminal, also try CTRL−D .
echo
A little command that repeats anything you type.
Example:
echo "hello world"
Simply displays " hello world".
Example:
echo rm −R *
This will output what will be passed to the rm command (and therefore what would be deleted),
putting echo before a command renders it harmless (it just expands wildcards so you know what it
will do).
Also try using the −e option with echo. This will allow you to use the escape character sequences to
format the output of a line. Such as '\t' for tab, '\n' for newline etc.
Chapter 4. Shell Tips
11GNU/Linux Command−Line Tools Summary
Using echo to prevent accidents
Typing: echo command(s) could save you the trouble of accidentally doing something
you didn't expect.
Using echo allows you to expand the wildcards to understand what will happen before
you actually run the command.
4.2. The command−line history
Using the command history
Use the up and down key's to scroll through previously typed commands. Press [Enter] to execute
them or use the left and right arrow keys to edit the command first. Also see history (below).
The history command
The history command can be used to list Bash's log of the commands you have typed:
This log is called the "history". To access it type:
history n
This will only list the last n commands. Type "history" (without options) to see the the entire history
list.
You can also type !n to execute command number n. Use !! to execute the last command you typed.
!−n will execute the command n times before (in other words !−1 is equivalent to !!).
!string will execute the last command starting with that "string" and !?string? will execute the last
command containing the word "string". For example:
!cd
Will re−run the command that you last typed starting with "cd".
" commandName !*" will execute the "commandName" with any arguments you used on your last
command. This maybe useful if you make a spelling mistake, for example. If you typed:
emasc /home/fred/mywork.java /tmp/testme.java
In an attempt to execute emacs on the above two files this will obviously fail. So what you can do is
type:
emacs !*
This will execute emacs with the arguments that you last typed on the command−line. In other words
this is equivalent to typing:
emacs /home/fred/mywork.java /tmp/testme.java
Searching through the Command History ( CTRL−R )
Use the CTRL−R key to perform a "reverse−i−search". For example, if you wanted to use the
command you used the last time you used snort, you would type:
CTRL−R then type "snort".
Chapter 4. Shell Tips
12GNU/Linux Command−Line Tools Summary
What you will see in the console window is:
(reverse−i−search)`':
After you have typed what you are looking for, use the CTRL−R key combination to scroll backward
through the history.
Use CTRL−R repeatedly to find every reference to the string you've entered. Once you've found the
command you're looking for, use [Enter] to execute it.
Alternatively, using the right or left arrow keys will place the command on an actual command−line
so you can edit it.
4.3. Other Key combinations
GNU/Linux shells have many shortcut keys which you can use to speed up your work, below is a rough list of
some (also see CTRL−R in the history section of the commands, over here, Section 4.2).
CTRL−D
the "end−of−file" (EOF) key combination can be used to quickly log out of any terminal. CTRL−D is
also used in programs such as "at" to signal that you have finished typing your commands (the EOF
command).
CTRL−Z
key combination is used to stop a process. It can be used to put something in the background
temporarily.
For example, if you were editing a file with vim or emacs just press CTRL−Z to regain control of the
terminal do what you want and then type fg to bring it back.
For further information please see Section 9.3.
If fg doesn't work
If fg doesn't work you may need to type jobs and then fg job_name or fg job_number
CTRL−A and CTRL−E
These key combinations are used for going to the start and end of the line on the command line. Use
CTRL−A to jump to the start of the line, and CTRL−E to jump to the end of the line.
CTRL−K
This key combination can be used to cut or delete what is currently in front of the cursor.
CTRL−Y
This key combination can be used to paste the last thing you deleted (using CTRL−K or CTRL−W ).
CTRL−W
This key combination can be used to cut or delete the entire line that has being typed.
4.4. Virtual Terminals and screen
Using the key combination ALT−F* keys you may change to different virtual terminals. You will have
several (usually 6) virtual terminals setup with shells. Number 7 is usually setup with X you need to use
CTRL−ALT−F* to change to a terminal from within X (X as in the X windowing system).
screen
Chapter 4. Shell Tips
13GNU/Linux Command−Line Tools Summary
is a great program that allows you to switch between multiple virtual terminals on the one physical
terminal that you are using. Its a command−line based window manager, clearly this isn't that useful if
you do have virtual terminals, but its amazingly useful when you log into machines remotely, using
ssh and similar, see Section 13.3. It works on key−combinations, you type
screen
On the command−line to begin. Now you start with one virtual terminal by default, but using the key
combination CTRL−A and then hitting "C" you can create another virtual terminal to use.
Use CTRL−N to go to the next virtual terminal and CTRL−P to go to the previous virtual terminal.
Also try hitting CTRL−A to go backwards and forwards between two particular terminals.
screen also has various other abilities that you can test out. The documentation and guides are well
written so please feel free to read the manual page or try searching the internet.
Chapter 4. Shell Tips
14Chapter 5. Help
The help chapter provides information on how you may access the documentation of the GNU/Linux system.
There is normally a document describing every single tool you have installed, even if its only brief...
man
This command displays summary information on a program from an online manual. For example
typing man man will bring up the manual page for man (the manual page viewer). Note: q is the quit
key.
Command syntax:
man program_name
Also try
Specifying the section of the manual page, sometimes the man page is different for the
same tool in different sections, note sections are numbered 1 to 9. Use apropos to find
which section number to look in.
The syntax to look at a different section is:
man section_number tool_name
For example:
man 2 time
This will show you the man page called time in section 2, the equivalent page in
section 1 is completely different
man −K keyword
Search the manual pages for a string, as in it will search all manual pages for a particular string within
each individual man page, it will then prompt whether you would like to view each page it will find.
Use double quotes " and " if there are spaces in the string you are typing.
Speed issue
Please be warned that this method is going to be really, really slow. You are searching
*all* man pages for a string
man −f command
This will list details associated with the command. The root user must run makewhatis (see below)
before this command will work.
Equivalent to whatis
This command is the same as running whatis
info
Provides a more detailed hyper−text manual on a particular command, this only works for some
commands.
Command syntax:
info program_name
whatis
Chapter 5. Help
15GNU/Linux Command−Line Tools Summary
Displays a one−line description of what a program does. The string needs to be an exact match,
otherwise whatis won't output anything. Relies on the whatis database (see below).
Command syntax:
whatis program_name
makewhatis
Make the whatis database for apropos, whatis and man −f.
Root Privileges
This takes some time and you require root privileges to do this.
apropos
Searches the whatis database for strings, similar to whatis except it finds and prints anything matching
the string (or any part of the string). Also relies on the whatis database (see above).
Command syntax:
apropos string
Equivalent to...
apropos is the same as doing man −k (lowercase k).
Please note
You need to run makewhatis (as root) so whatis, man −f and apropos will work.
Also try
Using a program with the −?, −−h, −−help, and the −h options, they will display very short summary
information on the command usage options.
Chapter 5. Help
16Chapter 6. Directing Input/Output
The directing input/output chapter explains how you can use a program and send its output to a file or to
another command that you wish to use. This technique is very powerful and there are a number of ways of
doing this.
6.1. Concept Definitions
All three of the following definitions are called " File Streams." They hold information that is either received
from somewhere or sent to somewhere. In a UNIX system, the keyboard input (standard input), information
printed to the screen (standard output) and error output (also printed to the screen) are treated as separate File
Streams.
Standard output
Standard output is the output from the program printed to the screen, not including error output (see
below).
Standard input
Standard input is the input from the user. Normally the keyboard is used as the standard input device
in a UNIX system.
Standard error
Standard error is error output from programs. This output is also sent to the screen and will normally
be seen mixed in with standard output. The difference between standard output and standard error is
that standard error is unbuffered (it appears immediately on the screen) and standard error is only
printed when something goes wrong (it will give you details of what went wrong).
6.2. Usage
>
The greater than symbol is used to send information somewhere (for example a text file)
Example:
cat file1 file2 > file1_and_2.txt
This will concatenate the files together into one big file named "file1_and_2.txt". Note that this will
overwrite any existing file.
<
The less than symbol will insert information from somewhere (a text file) as if you typed it yourself.
Often used with commands that are designed to get information from standard input only.
For example (using tr):
tr '[A−Z]' '[a−z]' < fileName.txt > fileNameNew.txt
The example above would insert the contents of "fileName.txt" into the input of tr and output the
results to "fileNameNew.txt".
>>
The >> symbol appends (adds) information to the end of a file or creates one if the file doesn't exist.
<<
The << symbol is sometimes used with commands that use standard input to take information. You
Chapter 6. Directing Input/Output
17GNU/Linux Command−Line Tools Summary
simply type << word (where word can be any string) at the end of the command. However its main
use is in shell scripting.
The command takes your input until you type "word", which causes the command to terminate and
process the input.
Using << is similar to using CTRL−D (EOF key), except it uses a string to perform the end−of−file
function. This design allows it to be used in shell scripts.
For example type "cat" (with no options...) and it will work on standard input.
To stop entering standard input you would normally hit CTRL−D .
As an alternative you can type "cat << FINISHED", then type what you want.
When you are finished, instead of hitting CTRL−D you could type "FINISHED" and it will end (the
word FINISHED will not be recorded).
2>
Redirects error output. For example, to redirect the error output to /dev/null, so you do not see it,
simply append this to the end of another command...
For example:
make some_file 2> /dev/null
This will run make on a file and send all error output to /dev/null
|
The "pipe" command allows the output of one command to be sent to the input of another.
For example:
cat file1.txt file2.txt | less
Concatenates the files together, then runs less on them. If you are only going to look at a single file,
you would simply use less on the file...
tee
Sends output of a program to a file and to standard output. Think of it as a T intersection...it goes two
ways.
For example:
ls /home/user | tee my_directories.txt
Lists the files (displays the output on the screen) and sends the output to a file: "my_directories.txt".
&>
Redirects standard output and error output to a specific location.
For example:
make &> /dev/null
Sends both error output and standard output to /dev/null so you won't see anything...
Chapter 6. Directing Input/Output
18GNU/Linux Command−Line Tools Summary
6.3. Command Substitution
Command substitution is basically another way to do a pipe, you can use pipes and command substitution
interchangeably, it's up to you which one you find easier...
Command substitution can be done in two distinct ways.
Method One (back−quotes)
Simply type:
command_1 `command_2 −options`
This will execute "command_2" and it's output will become the input to "command_1".
Backquote key
The back−quote key is usually located at the same place as the tilde, above the [Tab]
key.
Method Two (dollars sign)
Simply type:
command_1 $(command_2)
This will execute "command_2" and it's output will become the input to "command_1".
Using the pipe instead
You can of course use pipes to do the same thing, if you don't know what a pipe is, please see Section
6.2. For example instead of doing:
less $cat file1.txt file2.txt
You could do:
cat file1.txt file2.txt | less
And end up with exactly the same result, it's up to you which way you find easier.
6.4. Performing more than one command
Executing the second command only if the first is successful
To do this you would type:
command1 && command2
command2 will be executed if command1 successfully completes (if command1 fails command2
won't be run). This is called a logical AND.
Executing the second command only if the first fails
Chapter 6. Directing Input/Output
19GNU/Linux Command−Line Tools Summary
To do this you would type:
command1 || command2
command2 will be executed if command1 does not successfully complete (if command1 is successful
command2 won't be run). This is called a logical OR.
Executing commands sequentially
To execute commands sequentially regardless of the success/failure of the previous you simply type:
command1; command2
command2 will execute once command1 has completed.
More than two commands
You can continue to use ';' (semicolon) characters to do more and more commands on
the one line.
Chapter 6. Directing Input/Output
20Chapter 7. Working with the file−system
The working with the file−system chapter explains a number of commands that you use to move around the
file system hierarchy and manipulate the files. Also explained are finding files and how to mass−rename files.
7.1. Moving around the filesystem
cd
Change directory. Use " cd .." to go up one directory.
One dot '.' represents the current directory while two dots '..' represent the parent directory.
" cd −" will return you to the previous directory (a bit like an "undo").
You can also use cd absolute path or cd relative path (see below):
Absolute paths
An " absolute path" is easily recognised from the leading forward slash, /. The / means that
you start at the top level directory and continue down.
For example to get to /boot/grub you would type:
cd /boot/grub
This is an absolute path because you start at the top of the hierarchy and go downwards from there (it
doesn't matter where in the filesystem you were when you typed the command).
Relative paths
A " relative path" doesn't have a preceding slash. Use a relative path when you start from a
directory below the top level directory structure. This is dependent on where you are in the
filesystem.
For example if you are in root's home directory and want to get to /root/music, you type:
cd music
Please note that there is no / using the above cd command. Using a / would cause this to be an
absolute path, working from the top of the hierarchy downward.
ls
List files and directories. Typing "ls" will list files and directories, but will not list hidden files or
directories that start with a leading full stop ".".
Example options:
◊ ls −l −−− long style, this lists permissions, file size, modification date, ownership.
◊ ls −a −−− this means "show all", this shows hidden files, by default any file or directory
starting with a '.' will not be shown.
◊ ls −d −−− list directory entires rather than contents (see example below)
◊ ls −F −−− append symbols to particular files, such as * (asterisk) for executable files.
◊ ls −S −−− sort the output of the command in decending order sorted by size.
◊ ls −R −−− (recursive) to list everything in the directories below as well as the current
directory.
Chapter 7. Working with the file−system
21GNU/Linux Command−Line Tools Summary
Command syntax, either:
ls −options
This simply lists everything in the current directory, the options are not required (options such as −l,
−a et cetera).
ls −options string
This lists files using a certain string. The string can contain standard wildcards to list multiple files, to
learn more about standard wildcards please read Section 20.4.1
You can use ls −d to show directories that match an exact string, or use standard wildcards. Type " ls
−d */" to list all subdirectories of the current directory. Depending on the setup of your aliases (see
Chapter 4) you may simply be able to type lsd as the equivalent to ls −d */.
Examples for ls −d:
ls −d */
Lists all subdirectories of current directory.
ls −d string*
Lists directories that start with "string".
ls −d /usr/*/*/doc
Lists all directories that are two levels below the /usr/ directory and have a directory called "doc", this
trick can come in quite handy sometimes.
You can also use
Depending on how your aliases (see Chapter 4) are setup you can also use l, la (list
all) and ll (list long) to perform the above commands
pwd
Print working directory. Print the absolute (complete) path to the directory the user is currently in.
Command syntax:
pwd
This will tell you the full path to the directory you are in, for example it may output "/usr/local/bin" if
you are currently in that directory.
tree
Outputs an ASCII text tree/graph starting at a given directory (by default the current directory). This
command recursively lists all files and all directories.
In other words, it will list files within the directories below the current one, as well as all files in the
current directory.
tree has a large number of options, refer to the manual page for details.
Command syntax:
tree
or
Chapter 7. Working with the file−system
22GNU/Linux Command−Line Tools Summary
tree −option(s) /optional/directory/to/list
7.1.1. Finding files
find
find is a tool which looks for files on a filesystem. find has a large number of options which can be
used to customise the search (refer to the manual/info pages).
Note that find works with standard wildcards,Section 20.4.1, and can work with regular expressions,
Section 20.4.2.
Basic example:
find / −name file
This would look for a file named "file" and start at the root directory (it will search all directories
including those that are mounted filesystems).
The `−name' option is case sensitive you can use the `−iname' option to find something regardless of
case.
Use the '−regex' and '−iregex' to find something according to a regular expression (either case
sensitive or case insensitive respectively).
The '−exec' option is one of the more advanced find operations. It executes a command on the files it
finds (such as moving or removing it or anything else...).
To use the −exec option: use find to find something, then add the −exec option to the end, then:
command_to_be_executed
then '{}' (curly brackets)
then the arguments (for example a
See below for an example of use this command.
This is the tool you want to execute on the files find locates. For example if you wanted to
remove everything it finds then you would use −exec rm −f
The curly brackets are used in find to represent the current file which has been found. ie. If it
found the file shopping.doc then {} would be substituted with shopping.doc. It would then
continue to substitute {} for each file it finds. The brackets are normally protected by
backslashes (\) or single−quotation marks ('), to stop bash expanding them (trying to interpret
them as a special command eg. a wildcard).
This is the symbol used by find to signal the end of the commands. It's usually protected by a
backslash (\) or quotes to stop bash from trying to expand it.
find / −name '*.doc' −exec cp '{}' /tmp/ ';'
The above command would find any files with the extension '.doc' and copy them to your /tmp
directory, obviously this command is quite useless, it's just an example of what find can do. Note that
the quotation marks are there to stop bash from trying to interpret the other characters as something.
Excluding particular folders with find can be quite confusing, but it may be necessary if you want to
search your main disk (without searching every mounted filesystem). Use the −path option to exclude
the particular folder (note, you cannot have a '/' (forward slash) on the end) and the −prune option to
Chapter 7. Working with the file−system
23GNU/Linux Command−Line Tools Summary
exclude the subdirectories. An example is below:
find / −path '/mnt/win_c' −prune −o −name "string" −print
This example will search your entire directory tree (everything that is mounted under it) excluding
/mnt/win_c and all of the subdirectories under /mnt/win_c. When using the −path option you can use
wildcards.
Note that you could add more −path '/directory' statements on if you wanted.
find has many, many different options, refer to the manual (and info) page for more details.
slocate
slocate outputs a list of all files on the system that match the pattern, giving their full path name (it
doesn't have to be an exact match, anything which contains the word is shown).
Replaces locate
Secure locate is a replacement for locate, both have identical syntax. On most
distributions locate is an alias to slocate.
Commmand syntax:
slocate string
This won't work unless
You need to run either updatedb (as root) or slocate −u (as root) for slocate to work.
whereis
whereis locates the binary, source, and manual page for a particular program, it uses exact matches
only, if you only know part of the name use slocate.
Command syntax:
whereis program_name
which
Virtually the same as whereis, except it only finds the executable (the physical program). It only looks
in the PATH (environment variable) of a users shell.
Use the −a option to list all occurances of the particular program_name in your path (so if theres
more than one you can see it).
Command syntax:
which program_name
7.2. Working with files and folders
mkdir
Make a directory. Use mkdir −p to create subdirectories automatically.
Directories are Folders
Chapter 7. Working with the file−system
24GNU/Linux Command−Line Tools Summary
Directories are sometimes called folders in other operating systems (such as Microsoft
Windows)
Examples:
mkdir −p /home/matt/work/maths
This would create the directories "work" and "maths" under matt's home directory (if matt's home
directory didn't exist it would create that too).
mkdir foo
This would create a directory in the current path named "foo".
rm
Remove/delete a file(s) or directories(s). You can use standard wildcards with this command Section
20.4.1.
Command syntax:
rm −options file_or_folder
You can of course use standard wildcards to delete multiple files or multiple directories and files.
Use the −R or −r option to remove recursively, this removes everything within subdirectories. Also
try the −f option to force removal (useful when you don't want to be prompted).
Disabling Aliases (per execution)
On some systems such as Mandrake an alias will send rm to rm −i (prompting you for
every file you wish to delete). To override this use: \rm −R directory (using the \
disables the alias for this run only)
rmdir
Remove an empty directory. If you want to remove a directory with files in it type " rm −R directory",
read above for information on rm −R
Command syntax:
rmdir directory
This will only remove directory if it's empty otherwise it will exit with an error message.
mv
Move a file or a directory to a new location or rename a file/directory.
Rename example:
mv filename1 filename2
Renames filename1 to filename2.
To move a file or directory, simply type:
mv original_file_or_folder new_location
Note that this command can use standard wildcards Section 20.4.1 to move files (not for renaming).
Move and rename
Chapter 7. Working with the file−system
25GNU/Linux Command−Line Tools Summary
Note that you can also move and rename a file in a single command. The difference is
with the destination (right hand side) you change the filename to the new name of the
file.
For example typing:
mv /etc/configuration.txt /home/joe/backupconfig
This would move the file "configuration.txt" to /home/joe/ and rename it
"backupconfig"
cp
Copy a file. Has a number of useful options, such as −R (or −r) which recursively copies directories
and subdirectories.
Command syntax:
cp −options file_or_files new_location
Examples:
cp file1 file2
Simply copy file1 to file2 (in the same directory).
cp /tmp/file1 ~/file2 /mnt/win_c
Where the last option is the directory to be copied to. The above example copies two files from
different areas of the file system to /mnt/win_c
cp −R directory_and_or_files new_location
This command will copy directories (and all subdirectories) and/or files to new_location
Note that this command can use standard wildcards Section 20.4.1 to copy multiple files.
You may also like to try the "−u" when moving large directories around, this copies only if the source
file is newer than the destination to where you are copying to, or if the destination file does not exist
at all.
ln
Create a link to a file. There are two types of links:
Hard links
Hard links are considered pointers to a file (the number is listed by typing ls −l). Each
hard−link is a reference to a file.
The file itself only goes away when all hard−links are deleted. If you delete the original file
and there are hard links to it the original file will remain.
Example:
ln target_name link_name
Will create a "hard link" to target_name called link_name, you need to delete both of these to
remove the file.
Symbolic links
Chapter 7. Working with the file−system
26GNU/Linux Command−Line Tools Summary
Symbolic links are created by typing "ln −s". When you remove the original file the symbolic
link becomes broken, a symbolic link is similar to a windows "short−cut".
The advantage of symbolic links is that the target can be to something on another file−system,
while hard−links can only exist on the same file−system.
For example:
ln −s target_name link_name
This creates a symbolic link to "target_name" called "link_name", if you delete the original
file the symbolic link won't work (it becomes a broken link).
shred
Securely remove a file by overwriting it first. Prevents the data from being recovered by software
(and even by most hardware), please be very careful when using shred as you may never be able to
retrieve the data you have run the application on.
For example:
shred −n 2 −z −v /dev/hda1
"What this tells shred, is to overwrite the partition 2 times with random data (− n 2)
then finish it up by writing over it with zeroes (−z) and show you its progress (−v).
Of course, change /dev/hda1 to the correct partition . Each pass can take some time,
which is why I set it to only do 2 random passes instead of the default 25. You can
adjust this number, of course, to your particular level of paranoia and the amount of
time you have.
Since shred writes on such a low−level, it doesn't actually matter what kind of
filesystem is on the partition−−everything will be unrecoverable. Once shred is
finished, you can shutdown the machine and sell or throw away the drive with peace
of mind.
...However, even shre dding devices is not always completely reliable. For example,
most disks map out bad sectors invisibly to the application; if the bad sectors contain
sensitive data, `shred' won't be able to destroy it. [ shred info page ]."[2]
Shredding files doesn't work with all filesystems
Please note that as mentioned in the shred manual page (please see the manual and
preferably info pages for more information). shred does not work correctly on
log−structured or journaled filesystems, such as JFS, ReiserFS, XFS, Ext3 and many
other modern filesystems
Alternatives to using shred
shred has its disadvantages when run on a filesystem. First of all since it has to be
installed you cannot run shred on your operating systems filesystem, you also cannot
use shred on a windows machine easily since you cannot install shred on this machine.
You may like to try alternatives such as the DBAN project that create self−booting
floppy disks that can completely erase a machines hard disk.
Chapter 7. Working with the file−system
27GNU/Linux Command−Line Tools Summary
You may also like to see how chattr can assist you in shredding files once they are removed (it has
similar problems to shred, only ext2 and ext3 style filesystems...), please see Section 14.2.
du
Displays information about file size. Use du filename to display the size of a particular file. If you use
it on directories it will display the information on the size of the files in the directory and each
subdirectory.
Options for du (use du −option(s)):
◊ −c −− this will make du print a grand total after all arguments have being processed.
◊ −s −− summarises for each argument (prints the total).
◊ −h −− prints things in " human readable" mode; for example printing 1M (megabyte) rather
than 1,024,000 (bytes).
Using the −hs options on a directory will display the total size of the directory and all subdirectories.
Command syntax:
du −options file_directory_or_files
Example:
du −hs *
This command will list the size of all files in the current directory and it will list the size of
subdirectories, it will list things in human−readable sizes using 1024 Kb is a Megabyte, M for
megabyte, K for kilobyte etc.
file
Attempts to find out what type of file it is, for example it may say it's: binary, an image file (well it
will say jpeg, bmp et cetera), ASCII text, C header file and many other kinds of files, it's a very useful
utility.
Command syntax:
file file_name
stat
Tells you detailed information about a file, including inode number creation/access date. Also has
many advanced options and uses.
For simple use type:
stat file
dd
Copies data on a very low level and can be used to create copies of disks Section 20.3 and many other
things (for example CD image files).
dd can also perform conversions on files and vary the block size used when writing the file.
Command syntax, note the block size and count are optional and you can use files instead of devices...
Please note
dd is an advanced and difficult to use command. Its also very powerful, so be careful
what you do with it
Chapter 7. Working with the file−system
28GNU/Linux Command−Line Tools Summary
Command syntax:
dd if=/dev/xxx of=/dev/xxx bs=xxxx count=x
Warning
The command dd is used to work on a very low level. It can be used to overwrite
important information such as your master−boot record or various important sections
of your hard−disk. Please be careful when using it (especially when working with
devices instead of files).
touch
This command is used to create empty files, simply do touch file_name. It is also used to update the
timestamps on files.
touch can be used to change the time and/or date of a file:
touch −t 05070915 my_report.txt[3]
This command would change the timestamp on my_report.txt so that it would look like you created it
at 9:15. The first four digits stand for May 7th (0507), in MM−DD (American style), and the last four
(0915) the time, 9:15 in the morning.
Instead of using plain numbers to change the time, you can use options similar to that of the date tool.
For example:
touch −d '5 May 2000' some_file.txt
You can also use −−date= instead of −d. Also have a look at the date command under Section 8.1 for
examples on using −d and −−date= (the syntax for the date part is exactly the same when using −d
or −−date).
split
Splits files into several smaller files.
Use the −b xx option to split into xx bytes, also try −k for kilobytes, and −m for megabytes. You can
use it to split text files and any other files... you can use cat to re−combine the files.
This may be useful if you have to transfer something to floppy disks or you wish to divide text files
into certain sizes.
Command syntax:
split −options file
This will split the input file into 1000 lines of input each (thats the default...), and output (using the
above example), with the input name file, "fileaa" (1st part of file), "fileab" (2nd part of file), "fileac"
(3rd part of file) etc. until the there is no more of the file left to split.
7.3. Mass Rename/copy/link Tools
There are a few different ways to perform mass renaming of files in GNU/Linux (yes, mass renaming is
possible!). There is also a perl script that renames the extentions on files, see Chapter 19.
Chapter 7. Working with the file−system
29GNU/Linux Command−Line Tools Summary
Below are three ways to perform mass renaming of files, using the commands mmv, rename (a perl script) or
some bash shell scripting.
mmv
mmv is a mass move/copy/renaming tool that uses standard wildcards to perform its functions.
mmv's manual page is quite difficult to understand, I have only a limited understanding of this tool.
However mmv supports some standard wildcards.
According to the manual the ";" wildcard is useful for matching files at any depth in the directory tree
(ie it will go below the current directory, recursively).
An example of how to use mmv is shown below:
mmv \*.JPG \#1.jpg
The first pattern matches anything with a ".JPG" and renames each file (the "#1" matches the first
wildcard) to ".jpg".
Each time you use a \(wildcard) you can use a #x to get that wildcard. Where x is a positive number
starting at 1.
mmv Homepage
You can find mmv on the web here.
Also be aware that certain options used with mmv are also applicable to other tools in
the suite, these include mcp (mass copy), mad (mass append contents of source file to
target name), mln (mass link to a source file).
Tip:
A Java alternative to mmv which runs on both GNU/Linux and Windows is available,
Esomaniac
rename
rename is a perl script which can be used to mass rename files according to a regular expression.
An example for renaming all ".JPG" files to ".jpg" is:
rename 's/\.JPG$/.jpg/' *.JPG
Finding rename
You can get rename from various places. I would recommend trying CPAN Search
Site, I found the script here Rename Script Version 1.4
Bash scripting
Bash scripting is one way to rename files. You can develop a set of instructions (a script) to rename
files. Scripts are useful if you don't have mmv or rename...
One way to this is shown below:
for i in *.JPG;
do mv $i `basename $i JPG`jpg;
Chapter 7. Working with the file−system
30GNU/Linux Command−Line Tools Summary
done
Note that the above script came from a usenet post. Unfortunately I do not know the author's name.
The first line says find everything with the ".JPG" extension (capitals only, because the UNIX system
is case sensitive).
The second line uses basename (type man basename for more details) with the '$i' argument. The '$i'
is a string containing the name of the file that matches. The next portion of the line removes the JPG
extension from the end and adds the jpg extention to each file. The command mv is run on the output.
An alternative is:
for i in *.JPG;
do mv $i ${i%%.JPG}.jpg;
done
The above script renames files using a built−in bash function. For more information on bash scripting
you may like to see the advanced bash scripting guide, authored by Mendel Cooper.
Chapter 7. Working with the file−system
31Chapter 8. Finding information about the system
time
If you are looking for how to change the time please refer to date here: Section 8.1.
time is a utility to measure the amount of time it takes a program to execute. It also measures CPU
usage and displays statistics.
Use time −v (verbose mode) to display even more detailed statistics about the particular program.
Example usage:
time program_name options
/proc
The files under the /proc (process information pseudo file−system) show various information about
the system. Consider it a window to the information that the kernel uses.
For example:
cat /proc/cpuinfo
Displays information about the CPU.
less /proc/modules
Use the above command to view information about what kernel−modules are loaded on your system.
dmesg
dmesg can be used to print (or control) the " kernel ring buffer". dmesg is generally used to print the
contents of your bootup messages displayed by the kernel. This is often useful when debugging
problems.
Simply type:
dmesg
df
Displays information about the space on mounted file−systems. Use the −h option to have df list the
space in a 'human readable' format. ie. if there are 1024 kilobytes left (approximately) then df will say
there is 1MB left.
Command syntax:
df −options /dev/hdx
The latter part is optional, you can simply use df with or without options to list space on all
file−systems.
who
Displays information on which users are logged into the system including the time they logged in.
Command syntax:
who
w
Chapter 8. Finding information about the system
32GNU/Linux Command−Line Tools Summary
Displays information on who is logged into the system and what they are doing (ie. the processes they
are running). It's similar to who but displays slightly different information.
Command syntax:
w
users
Very similar to who except it only prints out the user names who are currently logged in. (Doesn't
need or take any options).
Command syntax:
users
last
Displays records of when various users have logged in or out. This includes information on when the
computer was rebooted.
To execute this simply type:
last
lastlog
Displays a list of users and what day/time they logged into the system.
Simply type:
lastlog
whoami
Tells the user who they are currently logged in as, this is normally the usename they logged in with
but can be changed with commands like su). whoami does not need or take any options.
Simply type:
whoami
free
Displays memory statistics (total, free, used, cached, swap). Use the −t option to display totals of
everything and use the −m to display memory in megabytes.
Example:
free −tm
This will display the memory usage including totals in megabytes.
uptime
Print how long the computer has been "up", how long the computer has been running. It also displays
the number of users and the processor load (how hard the CPU has been working...).
The w command
The w command displays the output of the uptime command when you run this
command. You could use the w command instead of uptime.
uname
uname is used to print information on the system such as OS type, kernel version et cetera.
Chapter 8. Finding information about the system
33GNU/Linux Command−Line Tools Summary
Some uname options:
◊ −a −−− print all the available information.
◊ −m −−− print only information related to the machine itself.
◊ −n −−− print only the machine hostname.
◊ −r −−− print the release number of the current kernel.
◊ −s −−− print the operating system name
◊ −p −−− print the processor type.
Command syntax:
uname −options
xargs
Note that xargs is an advanced, confusing, yet powerful command. xargs is a command used to run
other commands as many times as necessary, this way it prevents any kind of overload... When you
run a command then add a "| xargs command2". The results of command1 will be passed to
command2, possibly on a line−by−line basis or something similar.
Understanding xargs tends to be very difficult and my explanation is not the best. Refer to the
examples below or try [6] of the Bibliography for another xargs tutorial.
Alternatives to using xargs
Please note that the below explanation of xargs is not the strongest (at the time of
writing I could not find anything better :()).
Alternatives may include writing a simple bash script to do the job which is not the
most difficult task in the world.
Examples:
ls | xargs grep work
The first command is obvious, it will list the files in the current directory. For each line of output of
ls, xargs will run grep on that particular line and look for the string "work". The output have the each
time grep is executed on a new line, the output would look like:
file_name: results_of_grep
If grep didn't find the word then there would be no output if it had an error then it will output the
error. Obviously this isn't very useful (you could just do:
grep 'word' *
This is just a simple example...
xargs also takes various options:
◊ −nx −−− will group the first x commands together
◊ −lx −−− xargs will execute the command for every x number of lines of input
◊ −p −−− prompt whether or not to execute this particular string
◊ −t −−− (tell) be verbose, echo each command before performing it
◊ −i −−− will use substitution similar to find's −exec option, it will execute certain commands
on something.
Example:
Chapter 8. Finding information about the system
34GNU/Linux Command−Line Tools Summary
ls dir1 | xargs −i mv dir1/'{}' dir2/'{}'
The {} would be substituted for the current input (in this example the current file/directory) listed
within the directory. The above command would move every file listed in dir1 to dir2. Obviously this
command won't be too useful, it would be easier to go to dir1 and type mv * ../dir2
Here is a more useful example:
\ls *.wav | xargs −i lame −h '{}' '{}'.mp3
This would find all wave files within the current directory and convert them to mp3 files (encoded
with lame) and append a ".mp3" to the end of the filename, unfortunately it doesn't remove the .wav
and so its not too useful...but it works.
8.1. Date/Time/Calendars
There is one command to change both the date and time on a UNIX like system, date, there is also a simple
calendar utility, cal. If you are looking to change the timestamps on files please see Chapter 8
date
Tells you the date (and the time) and is also used to set the date/time.
To set the date, type date MM:DD:YYYY (American style date) where MM is month, DD is the
number of days within the month and YYYY is the year.
For example to set the date to the 1st January 2000 you would type:
date 01:01:2000
To set the time (where the −s option is to set a new time), type:
date −s hh:mm:ss
Another useful option you can use is −−date="string" (or −d "string") option to display a date from x
days ago or in x days (or x weeks, months, years et cetera). See the examples below.
Examples:
date −−date="3 months 1 day ago"
Will print the date 3 months and 1 day ago from the current date. Note that −−date="x month x day
ago" and −d "x month x day ago" are equivalent.
date −d "3 days"
The above command will print the date 3 days in the future from now.
cal
Typing cal will give you the calendar of the present month on your screen, in the nice standard
calendar format. There are various options to customise the calendar, refer to the info/man page.
Example:
cal −y year
Will display a calendar for a specific year, simply use cal −y to print the calendar for the current year.
cal 2 2004
Chapter 8. Finding information about the system
35GNU/Linux Command−Line Tools Summary
This will display the calendar for February 2004
8.2. Finding information about partitions
There are a number of ways to find out information on your hard disk drives, for information on mounted
partitions also try df in Chapter 8
Using the proc filesystem
You can look through the information in the relevant area of the proc filesystem, under the directory
of either /proc/ide/ or /proc/ide?/hd? where the first question mark is a number and the second is a
letter (starting with 'a').
For example:
cd /proc/ide0/hda
Under this directory there will be various information on the hard drive or cdrom connected.
Using fdisk
Using fdisk with the −l option will output information on any hard drives connected to the system and
information on their partitions (for example, the type of partition).
Information relating to using fdisk to partition hard disks can be found in your distributions
documentation, the fdisk manual page or online.
Root Access Required
This command needs root access to work
Chapter 8. Finding information about the system
36Chapter 9. Controlling the system
The controlling the system chapter details commands that you may wish to use to interact with devices on
your system and then details how to control processes and services/daemons.
eject
eject simply tells a device to open (eject) the drive. Useful for cdrom/DVD drives.
For example the command below would eject the cdrom−drive (if your cdrom is linked to
/dev/cdrom):
eject /dev/cdrom
This won't work unless
This will only work if the user has permission to mount the partition. Please see the tip
in Section 9.1 for more information.
9.1. Mounting and Unmounting (Floppy/CDROM/Hard−drive
Partitions)
Allowing Users to mount partitions
By default a UNIX system will allow normal users to unmount partitions. However unless given
permission by the superuser, users will not be allowed to mount partitions.
The commands listed below will not work for normal users unless users have permission to mount that
device.
If your particular distribution is setup not to allow users to mount partitions its not very hard to change
this, simply edit the /etc/fstab file (as root) and:
Replace the word "defaults" with "user" or
Add "user" to the end of the options list for the particular partition(s).
mount
Mount a device. Attach the device to the file−system hierarchy (the tree ( / )). This needs to be done
so you can access the drive (see below, Section 9.1 for an example).
umount
'Unmount' a device. The command umount (no 'n') unmount's a device. It removes it from the
file−system hierarchy (the tree ( / )). This needs to be done before you remove a floppy/CDROM or
any other removable device (see below, Section 9.1 for an example).
smbmount //wincomp/c /mnt/win
Where "win" would be the place you want it mounted and "wincomp" is the IP address or name of
your windows computer.
Please note
Using ping/smbmount/ssh or other UNIX system programs with a computer name
Chapter 9. Controlling the system
37GNU/Linux Command−Line Tools Summary
rather than IP address will only work if you have the computer listed in your /etc/hosts
file. Here is an example:
192.168.1.100 new
This line says that their is a computer called "new" with IP address 192.168.1.100.
Now that it exists in the /etc/hosts file I don't have to type the IP address anymore, just
the name "new".
smbmount is a tool from the samba package, it can mount a remote windows file−system onto your
current computer.
Un−mounting uses the same syntax as 'umount', as listed above, or you may like to use:
smbumount /mountpoint
Here are some more examples of how to mount a file−system:
mount −t ext2 /dev/fd0 /mnt/floppy
mount −t iso9660 /dev/hdb /mnt/cdrom
mount −t iso /tmp/image_file /mnt/iso_file/ −o loop
The windows filesystem is known as vfat (standard on Windows 9x) or NFTS (standard on
Windows 2000 and XP).
for CDROM's
This will mount an image file (usually a CD image file) so you can view/change the files (it
will appear to be like any other device).
The −t option
On any system running a newer version of the Linux kernel the −t option is not always
necessary and can be left out.
Examples of how to unmount a file−system (necessary before you eject/remove disk):
umount /mount_point
An example unmount point could be "/mnt/floppy" or "/mnt/cdrom"
9.2. Shutting Down/Rebooting the System
shutdown now
Shutdown the computer immediately (don't power down). Note that in UNIX systems this kind of
shutdown means to go to " single−user mode". Single−user mode is a mode where only the
administrator (root) has access to the computer, this mode is designed for maintenance and is often
used for repairs.
For example this would take you to single user mode
shutdown now
shutdown −h now
Shutdown (−h = halt) the computer immediately. It begins the shutdown procedure, press CTRL−C
(break−key) to stop it. After the end of the command you can also leave a message in quotation marks
Chapter 9. Controlling the system
38GNU/Linux Command−Line Tools Summary
which will be broad−casted to all users, for example:
shutdown −h now "Warning system malfunction, self−destruct imminent"
This would halt the system and send the message to anyone who is currently logged in.
Shutting down at a particular time
You can also put a time that the system should shutdown
instead of "now". Typing "+x minutes" (any number of
minutes is appropriate) or you can even set an exact time. For
example to shutdown at 11:50 type:
shutdown −h 11:50
Shutdown −h vs poweroff
On some systems, shutdown −h and halt do not actually turn the system's power off.
On systems that do not power off with these commands use the poweroff command
halt
The same as shutdown −h now doesn't take any options, this command simply shuts down
immediately.
shutdown −r now
Shutdown ( −r = reboot) the computer immediately. It begins the reboot procedure, press CTRL−C
(break−key) to stop it. After the end of the command you can also leave a message in quotation marks
which will be broad−casted to all users, for example:
shutdown −r now "Warning system rebooting, all files will be destroyed"
This would reboot the system and send the message to anyone who was logged in.
Rebooting at a particular time
You can also put a time that the system should reboot
instead of "now". Typing "+x minutes" (any number of
minutes is appropriate) or you can even set an exact time.
For example to reboot at 11:50 type:
shutdown −r 11:50
reboot
The same as shutdown −r now, doesn't take any options, simply reboots the computer immediately.
CTRL−ALT−DEL
(key−combination) May be used from a terminal to reboot or shutdown, it depends on your system
configuration. Note that this doesn't work from an xterminal. CTRL−ALT−DEL begins the
reboot/shutdown immediately, the user does not have to be logged in.
You can change the behaviour of CTRL−ALT−DEL from rebooting
To disable CTRL−ALT−DEL from rebooting your computer (or to have it do
something different), you can edit the /etc/inittab file (as root).
Here is how it looks on a Mandrake/Mandriva Linux system:
Chapter 9. Controlling the system
39GNU/Linux Command−Line Tools Summary
# Trap
CTRL−ALT−DEL
ca::ctrlaltdel:/sbin/shutdown −t3 −r now
Note that the # means a comment (and is not used). If you simply put a # (hash) before
the command it would disable it (it would become a comment).
You could also change the command it runs for example if you changed the −r to a
−h the computer would turn off instead of rebooting, or you could have it do anything
you want. It's up to your creativity to make it do something interesting.
9.3. Controlling Processes
ps
Will give you a list of the processes running on your system. With no options, ps will list processes
that belong to the current user and have a controlling terminal.
Example options include:
◊ −aux −−− list all running processes (by all users with some information).
◊ −a −−− list all processes from all users.
◊ −u −−− list more information including user names, %cpu usage, and %mem usage et cetera.
◊ −x −−− list processes without controlling terminals.
◊ −l −−− display different information including UID and nice value.
◊ −−forest −−− this makes it easier to see the process hierarchy, which will give you an
indication of how the various processes on your system interrelate (although you should also
try pstree).
For example to list all running processes with additional information, simply type:
ps −aux
pstree
Displays the processes in the form of a tree structure (similar to how tree does it for directories).
Use the −p option to show process id's.
Example:
pstree −p
This would list all processes and their id's.
pgrep
This command is useful for finding the process id of a particular process when you know part of its
name.
Use the −l option to list the name of the process as well and the −u option to search via a particular
user(s).
Normally pgrep will only return the pid number; this way you can use it with other commands.
Examples:
Chapter 9. Controlling the system
40GNU/Linux Command−Line Tools Summary
kill $(pgrep mozilla)
This would kill any process name that starts with mozilla. Note that this is the same as using pkill (see
below).
If you are unfamiliar with the $( ) part of this command, please refer to Section 6.4.
To list processes id's and names type:
pgrep −l process_name
top
Displays the 'top' (as in CPU usage) processes, provides more detail than ps.
top also provides an updated display, it has many options that make it fully customisable, refer to the
manual or info page for details.
kill
To kill processes on your system, you will need their pid's or id's . Use ps or pstree to find out the
process id's (pid's), or use jobs to find out id's.
killall and pkill − kill a process by name
pkill and killall can be a lot easier to use than kill. pkill allows you to type part of the
name of a process to kill it, while killall requires the full process name. See below for
more information.
Examples:
kill pid
Simply kill a process (allow it time to save it's files and exit)
kill %id
Same as above, except it uses an id instead of a pid, you need to use a % (percent) when using an id to
kill.
kill −kill pid
Force a process to be killed (won't allow files to be saved or updated); only use when necessary
because all data that the program had will be lost.
There are also many other kill options such as kill −HUP (hangup)... refer to the manual/info pages
for more information.
killall
Kill a process by it's name, uses names instead of process id's (pid's). Use −v to have killall report
whether the kill was successful or not and −i for interactive mode (will prompt you before attempting
to kill).
pkill − a little like a killall with regular expressions
pkill is another command that allows processes to be killed but does so using regular
expressions. See below for more information.
For example:
killall −iv mozilla
Chapter 9. Controlling the system
41GNU/Linux Command−Line Tools Summary
Would kill anything named "mozilla" and prompt you before each kill and report whether the kill was
successful or not. Unfortunately you need to get the name exactly right for killall to work, you would
need to use "mozilla−bin" to kill the mozilla browser. If you want something where you don't need to
know the exact name try pkill (below).
pkill
pkill is used to kill processes according to an extended regular expression. Use the −u option to kill
using a user name(s) and process name (for example to only kill a process of a certain user). pkill can
also send specific signals to processes.
For normal usage simply type:
pkill process_name
Note that the "process_name" doesn't have to be an exact match...
Or to kill the "process_name" of only the users "fred" and "anon" type:
pkill −u fred anon process_name
skill
skill is used to send a command/username/tty a particular signal.
skill has a number of options available to ensure correct interpretation (otherwise it just guesses what
it is), simply type skill −option(s)
◊ −L −−− list the various signals that can be sent
◊ −u −−− specify a username; this is obviously followed by the user name or a space−seperated
list of usernames.
◊ −p −−− process id (followed by the process id)
◊ −c −−− command name (this is the same as killall)
◊ −t −−− (tty number)
◊ −v −−− verbose mode
◊ −i −−− interactive mode.
skill can be used to stop, continue, or kill processes using the username, command name or process id
(or send them any variety of signals you like).
Useful example:
skill −STOP abusive_user_name
The above command will stop all of that users processes, this will cause his screen to freeze until you
type:
skill −CONT abusive_user_name
This would tell that all processes may continue as before. Note that this would only work if you are
root. Also note you can list more than one user name with the command so it will apply to multiple
users.
CTRL−C
The break key, will kill (break, stop) something that's running on your terminal.
jobs
Prints currently running jobs, as in processes you have executed within the shell.
bg
Backgrounds a process. To start a program in the background (so it doesn't take over the terminal) use
an "&" (ampersand) sign at the end of the command. You usually use CTRL−Z to suspend something
Chapter 9. Controlling the system
42GNU/Linux Command−Line Tools Summary
you are currently using. You can simply use bg to resume in the background the last job suspended...
Command syntax:
bg job_number
or
bg job_name
fg
Bring a process to the foreground, so you can interact with it. The process will use your current
terminal. Note simply use fg to foreground the last job number suspended...
You can bring jobs to the foreground by name or by number (use jobs to find the number).
Command syntax:
fg job_number
or
fg job_name
nice
Sets the priority for a process. nice −20 is the maximum priority (only administrative users can assign
negative priorities), nice 20 is the minimum priority. You must be root to give a process a higher
priority, but you can always lower the priority of your own processes...
Example:
nice −20 make
Would execute make and it would run at maximum priority.
renice
Changes the priority of an existing command. You may use the options −u to change the priorities of
all processes for a particular user name and −g to change priorities for all processes of a particular
group. The default is to change via the process id number.
Example:
renice +20 2222
This would change the priority of process 2222 to +20 (minimum priority).
snice
snice works very similarly to skill, only it changes the priority of the process(es). Its function is
similar to that of renice.
To use options (to ensure correct interpretation) you simply type snice −option(s):
◊ −u −−− specify a username; this is obviously followed by the user name or a space−seperated
list of usernames.
◊ −p −−− process id (followed by the process id)
◊ −c −−− command name (this is the same as killall)
◊ −t −−− tty number
◊ −v −−− verbose mode
◊ −i −−− interactive mode.
Chapter 9. Controlling the system
43GNU/Linux Command−Line Tools Summary
Example:
snice −10 −u root
This would increase the priority of all root's processes.
9.4. Controlling services
Concept Definitions
UNIX systems use scripts to control "daemons" which provide "services" (for example your sound
output) to run a UNIX system. UNIX systems consist of a variety of services (daemons).
A "daemon" is a system process which runs in the background (zero interaction) performing a
particular task.
Daemons normally have a "d" on the end of their name and either listen for certain events or perform
a system task, for example sshd listens for secure shell requests to the particular machine and handles
them when they occur.
Daemons usually perform critical system tasks such as control swap−space, memory management and
various other tasks.
service
service is a shell script available on Mandrake/Mandriva and Redhat systems which allows you to
perform various tasks on services.
◊ Use the −s option to print the status of all services available
◊ Use the −f option followed by a service name to restart that particular service.
◊ Use the −R option to restart all services (note that this will kill any current services running,
including the X windows system).
For example to restart the daemon sshd you would type:
service −f sshd
Using the script directly
You may also execute the shell script directly from /etc/init.d. Simply go to that directory then type
./script_name.
Executing the script should return the options it can take, by default they will be:
◊ restart −−− this will make the service stop and then start again.
◊ start −−− this option will start a service (assuming its not running).
◊ stop −−− this option will stop a service (assuming its running).
◊ status −−− this option will tell you about the service
Chapter 9. Controlling the system
44Chapter 10. Managing users
su username
(Switch User), change to a different user.
Use su − to switch to root or su username, to switch to a different username.
Using sudo
Its often considered better practice to use the sudo command rather than switch to the
root user
The sudo command allows you to perform actions as root but logs the actions you take
(so you can trace anything that was done to the system by yourself or others). sudo has
a very good manual page which provides plenty of information about it.
You use sudo similar to how you execute a normal command with sudo prepended to
it, for example:
sudo rpm −U myrpm.i386.rpm
This would allow you to install a rpm even if you have the correct sudo access
Note that if you want to return to your original user you don't use su again, type exit or press
CTRL−D .
Simply typing su will give you some root privileges, but there are minor complications relating to
environment variables. It's generally considered better practice to use su − because it has no
restrictions.
root
The superuser. This user has power over everything and all, and can do anything with the system
(including destroy it, and of course fix it :)). This user is used to perform most administration
functions on the system.
10.1. Users/Groups
All user information is normally listed in the "/etc/passwd" file and the group information in the "/etc/groups"
file.
If you need to edit either file it is recommended that you use vipw to edit the password file and vigr to edit the
group file. These particular commands take care of any processing and locking of the files before and after
editing them.
There is a lot of information about adding/removing/controlling users and groups, this information is only the
minimal information required.
chsh
Used to change your login shell.
To list the shells available type:
Chapter 10. Managing users
45GNU/Linux Command−Line Tools Summary
chsh −−list−shells
Simply type chsh then [Enter], then type the name of the shell you would like to use every time you
login.
chfn
Change finger information.
The information this command changes is reflected in the /etc/passwd file, use this utility to update
your real name, office and home phone numbers (if they exist).
Use the −f option to change a users full name. Use this tool as either chfn or chfn user_name (usable
by root only).
Command syntax:
chfn user_name
passwd
Changes the password of a user. You will need to be root if you want to change other users
passwords.
Simply type passwd to change your own password or to change another users password type:
passwd username
Chapter 10. Managing users
46Chapter 11. Text Related Tools
The text related tools chapter is the largest in this guide, most of the time on a GNU/Linux machine you will
spend time interacting with text. This chapter briefly covers text editors and goes into more depth on viewing
text, using tools to manipulate text, finding text within files and changing text formats between windows
based systems and GNU/Linux based systems.
11.1. Text Editors
vi
A traditional UNIX system text editor, should be on any UNIX system. It requires learning a few key
combinations, but is very powerful, and it is also quite small. vi is well known for its minimal use of
resources.
vim
vim − vi improved. A newer version of the vulnerable vi editor. Many systems use vim
rather than vi.
emacs
More than just a text editor. This text editor has a steep learning curve but is also very powerful, it is
both advanced and quite large. emacs can do anything, surf the internet, chat, play games and many
other tasks.
Others
There are too many different text editors to list here. Have a look on the internet, either search for
them using any search engine or you will find many of them at Sourceforge or Freshmeat.
11.2. Text Viewing Tools
head
With no options it shows the first ten lines of a text file.
Use head −n x (where "x" is a number) to display the first x lines.
Try head −F to use a continually updated version of head (if the file changes it will be reloaded and
displayed), please note that using this option will run head is a continuous loop so you'll need to use
CTRL−C to exit.
For example:
head −n 20 somelog.txt
Will display the top 20 entries of the file "somelog.txt".
tail
With no options it shows the last ten lines of a file.
Use tail −n x (where "x" is a number) to display the last x lines.
Try tail −F to use a continually updated version of tail (if the file changes it will be reloaded and
displayed), please note that using this option will run tail is a continuous loop so you'll need to use
CTRL−C to exit.
Chapter 11. Text Related Tools
47GNU/Linux Command−Line Tools Summary
For example:
tail −n 20 somelog.txt
Will display the last 20 entries of the file "somelog.txt".
less
Views text, can scroll backwards and forwards. Has many different options which are all described in
the manual page.
When less is already running, use :n and :p (type a colon then the character) to move to the next and
previous files (when there are multiple open files).
Command syntax:
less filename.txt
Or using a tool (in this example cat):
cat file.txt | less
more
Displays text, one page full at a time, more limited than less. In this case less is better than more.
more filename.txt
Or using a tool (is this example cat):
cat file.txt | more
cat
Combines (concatenates) multiple documents into one document. Can be used on individual files as
well.
Some useful options:
◊ −b −−− number all non−blank lines
◊ −n −−− number all lines.
Also try using nl to number lines (it can do more complex numbering), you will find it under under
this section, Section 11.4
Example:
cat filepart1 filepart2 filepart3 > wholefile.txt
This will combine (concatenate) filepart1, filepart2 and filepart3 into the single file "wholefile.txt".
tac
Combines (concatenates) multiple documents into one document and outputs them in reverse order.
Can also be used on individual files. Notice that tac is cat written backwards.
Example:
tac filepart1 filepart2 filepart3 > wholefile.txt
This will combine (concatenate) filepart1, filepart2 and filepart3 into the single file but have each of
the files written in reverse.
z* commands
Many commands can be prefixed with a "z" to read/work within a gzip compressed file.
Chapter 11. Text Related Tools
48GNU/Linux Command−Line Tools Summary
Some examples are zcat, zless, zmore, zgrep, zcmp, zdiff.
There are many utilities for working with text within compressed files without trying to manually
de−compress them somewhere first...most begin with a "z". You will find some of them mentioned
over here, Section 15.3.
bz* commands
There are also a few commands that prefixed with a "bz" to read/work within a file compressed with
bzip2.
The tools are bzcat, bzless, bzgrep. You will find some of them mentioned over here, Section 15.3.
11.3. Text Information Tools
wc
Word count, count how many words you have in a text document. Can also be used to count the lines
or bytes within the file.
Use the options −w for words, −l for lines and −c for bytes. Or simply run wc with no options to get
all three.
Command syntax:
wc −option file.txt
style
To run various readability tests on a particular text file. Will output scores on a number of different
readability tests (with no options).
Command syntax:
style −options text_file
Find style in the diction package
This command is part of the diction package and does not appear to be used too often
these days
cmp
Determines whether or not two files differ, works on any type of file. Very similar to diff only it
compares on the binary level instead of just the text.
diff
Compares two text files and output a difference report (sometimes called a "diff") containing the text
that differs between two files.
Can be used to create a 'patch' file (which can be used by patch).
Example:
diff file1.txt file2.txt
diff will output a '>' (followed by the line) for each line that isn't in the first file but is in the second
file, and it will output a '<' (followed by the line) for each line that is in the first file but not in the
second file.
Chapter 11. Text Related Tools
49GNU/Linux Command−Line Tools Summary
sdiff
Instead of giving a difference report, it outputs the files in two columns, side by side, separated by
spaces.
diff3
Same as diff except for three files.
comm
Compares two files, line−by−line and prints lines that are unique to file1 (1st column), unique to file2
(2nd column) and common to both files (3rd column).
Use comm with the −1, −2, or −3 to suppress the printing of those particular lines. Simply run comm
to have all three listed (ie. unique to files 1 and 2 and common to both).
Command syntax:
comm file1 file2
look
To output a list of words in the system dictionary that begin with a given string −− this is useful for
finding words that begin with a particular phrase or prefix.
Give the string as an argument; it is not case sensitive.
Command syntax:
look string
11.4. Text manipulation tools
Also see
Also see tac, and cat over in this section, Section 11.2, as they can perform text manipulation too
sort
Sorting text with no options the sort is alphabetical. Can be run on text files to sort them
alphabetically (note it also concatenates files), can also be used with a pipe '|' to sort the output of a
command.
Use sort −r to reverse the sort output, use the −g option to sort 'numerically' (ie read the entire
number, not just the first digit).
Examples:
cat shoppinglist.txt | sort
The above command would run cat on the shopping list then sort the results and display them in
alphabetical order.
sort −r shoppinglist.txt
The above command would run sort on a file and sort the file in reverse alphabetical order.
Advanced sort commands:
Chapter 11. Text Related Tools
50GNU/Linux Command−Line Tools Summary
sort is a powerful utility, here are some of the more hard to learn (and lesser used) commands. Use the
−t option to use a particular symbol as the separator then use the −k option to specify which column
you would like to sort by, where column 1 is the first column before the separator. Also use the −g
option if numeric sorting is not working correctly (without the −g option sort just looks at the first
digit of the number). Here is a complex example:
sort −t : −k 4 −k 1 −g /etc/passwd | more
This will sort the "/etc/passwd" file, using the colon ':' as the separator. It will sort via the 4th column
(GID section, in the file) and then sort within that sort using the first (name) to resolve any ties. The
−g is there so it sorts via full numbers, otherwise it will have 4000 before 50 (it will just look at the
first digit...).
join
Will put two lines together assuming they share at least one common value on the relevant line. It
won't print lines if they don't have a common value.
Command syntax:
join file1 file2
cut
Prints selected parts of lines (of a text file), or, in other words, removes certain sections of a line. You
may wish to remove things according to tabs or commas, or anything else you can think of...
Options for cut:
◊ −d −−− allows you to specify another delimiter, for example ':' is often used with /etc/passwd:
cut −d ':' (and probably some more options here) /etc/passwd
◊ −f −−− this option works with the text by columns, separated according to the delimiter. For
example if your file had lines like "result,somethingelse,somethingelse" and you only wanted
result you would use:
cut −d ',' −f 1 /etc/passwd
This would get you only the usernames in /etc/passwd
◊ "," (commas) −−− used to separate numbers, these allow you to cut particular columns. For
example:
cut −d ':' −f 1,7 /etc/passwd
This would only show the username and the shell that each person is setup for in /etc/passwd.
◊ "−" (hyphen) −−− used to show from line x to line y, for example 1−4, (would be from lines 1
to line 4).
cut −c 1−50 file1.txt
This would cut (display) characters (columns) 1 to 50 of each line (and anything else on that
line is ignored)
◊ −x −−− where x is a number, to cut from line 1 to "x"
◊ x− −−− where x is a number, to cut from "x" to the end.
cut −5, 20−, 8 file2.txt
This would display ("cut") characters (columns) 1 to 5, 8 and from 20 to the end.
ispell/aspell
To spell check a file interactively, prompts for you to replace word or continue. aspell is said to be
better at suggesting replacement words, but its probably best to find out for yourself.
aspell example:
Chapter 11. Text Related Tools
51GNU/Linux Command−Line Tools Summary
aspell −c FILE.txt
This will run aspell on a particular file called "FILE.txt", aspell will run interactively and prompt for
user input.
ispell example:
ispell FILE.txt
This will run ispell on a particular file called "FILE.txt" ispell will run interactively and prompt for
user input.
chcase
Is used to change the uppercase letters in a file name to lowercase (or vice versa).
You could also use tr to do the same thing...
cat fileName.txt | tr '[A−Z]' '[a−z]'
> newFileName.txt
The above would convert uppercase to lowercase using the the file "fileName.txt" as input and
outputting the results to "newFileName.txt".
cat fileName.txt | tr '[a−z]' '[A−Z]' > newFileName.txt
The above would convert lowercase to uppercase using the the file "fileName.txt" as input and
outputting the results to "newFileName.txt".
chcase (a perl script) can be found at the chcase homepage.
fmt
(format) a simple text formatter. Use fmt with the −u option to output text with "uniform spacing",
where the space between words is reduced to one space character and the space between sentences is
reduced to two space characters.
Example:
fmt −u myessay.txt
Will make sure the amount of space between sentences is two spaces and the amount of space
between words is one space.
paste
Puts lines from two files together, either lines of each file side by side (normally separated by a
tab−stop but you can have any symbols(s) you like...) or it can have words from each file (the first file
then the second file) side by side.
To obtain a list of lines side by side, the first lines from the first file on the left side separated by a
tab−stop then the first lines from the second file. You would type:
paste file1.txt file2.txt
To have the list displayed in serial, first line from first file, [Tab], second line from first file, then third
and fourth until the end of the first file type:
paste −−serial file1.txt file2.txt
This command is very simple to understand if you make yourself an example
Its much easier if you create an example for yourself. With just a couple of lines, I
used "first line first file" and "first line second file" et cetera for a quick example.
Chapter 11. Text Related Tools
52GNU/Linux Command−Line Tools Summary
expand
Will convert tabs to spaces and output it. Use the option −t num to specify the size of a "tapstop", the
number of characters between each tab.
Command syntax:
expand file_name.txt
unexpand
Will convert spaces to tabs and output it.
Command syntax:
unexpand file_name.txt
uniq
Eliminates duplicate entries from a file and it sometimes greatly simplifies the display.
uniq options:
◊ −c −−− count the number of occurances of each duplicate
◊ −u −−− list only unique entries
◊ −d −−− list only duplicate entries
For example:
uniq −cd phone_list.txt
This would display any duplicate entries only and a count of the number of times that entry has
appeared.
tr
(translation). A filter useful to replace all instances of characters in a text file or "squeeze" the
whitespace.
Example:
cat some_file | tr '3' '5' > new_file
This will run the cat program on some file, the output of this command will be sent to the tr
command, tr will replace all the instances of 3 with 5, like a search and replace. You can also do other
things such as:
cat some_file | tr '[A−Z]' '[a−z]' > new_file
This will run cat on some_file and convert any capital letters to lowercase letters (you could use this
to change the case of file names too...).
Alternatives
You can also do a search and replace with a one line Perl command, read about it at
the end of this section.
nl
The number lines tool, it's default action is to write it's input (either the file names given as an
argument, or the standard input) to the standard output.
Line numbers are added to every line and the text is indented.
Chapter 11. Text Related Tools
53GNU/Linux Command−Line Tools Summary
This command can do take some more advanced numbering options, simply read the info page on it.
These advanced options mainly relate to customisation of the numbering, including different forms of
separation for sections/pages/footers etc.
Also try cat −n (number all lines) or cat −b (number all non−blank lines). For more info on cat check
under this section: Section 11.2
There are two ways you can use nl:
nl some_text_file.txt
The above command would add numbers to each line of some_text_file. You could use nl to number
the output of something as shown in the example below;
grep some_string some_file | nl
Perl search and replace text
To search and replace text in a file is to use the following one−line Perl command[4]:
$ perl −pi −e "s/oldstring/newstring/g;" filespec [RET]
In this example, "oldstring" is the string to search, "newstring" is the string to replace it with, and
"filespec" is the name of the file or files to work on. You can use this for more than one file.
Example: To replace the string "helpless" with the string "helpful" in all files in the current directory,
type:
$ perl −pi −e "s/helpless/helpful/g;" * [RET]
Also try using tr to do the same thing (see further above in this section).
If these tools are too primitive
If these text tools are too simple for your purposes then you are probably looking at doing some
programming or scripting.
If you would like more information on bash scripting then please see the advanced bash scripting guide,
authored by Mendel Cooper.
sed and awk are traditional UNIX system tools for working with text, this guide does not provide an
explanation of them. sed works on a line−by−line basis performing substitution and awk can perform a
similar task or assist by working on a file and printing out certain information (its a programming
language).
You will normally find them installed on your GNU/Linux system and will find many tutorials all over
the internet, feel free to look them up if you ever have to perform many similar operations on a text file.
11.5. Text Conversion/Filter Tools
Filters (UNIX System/dos formats)
The following filters allow you to change text from Dos−style to UNIX system style and vice−versa,
or convert a file to other formats. Also note that many modern text editors can do this for you...
Chapter 11. Text Related Tools
54GNU/Linux Command−Line Tools Summary
Why use filters?
Because UNIX systems and Microsoft use two different standards to represent the
end−of−line in an ASCII text file.
This can sometimes causes problems in editors or viewers which aren't familiar with the other
operating systems end−of−line style. The following tools allow you to get around this
difference.
Whats the difference?
The difference is very simple, on a Windows text file, a newline is signalled by a carriage
return followed by a newline, '\r\n' in ASCII.
On a UNIX system a newline is simply a newline, '\n' in ASCII.
dos2unix
This converts Microsoft−style end−of−line characters to UNIX system style end−of−line characters.
Simply type:
dos2unix file.txt
fromdos
This does the same as dos2unix (above).
Simply type:
fromdos file.txt
fromdos can be obtained from the from/to dos website.
unix2dos
This converts UNIX system style end−of−line characters to Microsoft−style end−of−line characters.
Simply type:
unix2dos file.txt
todos
This does the same as unix2dos (above).
Simply type:
todos file.txt
todos can be obtained from the from/to dos website.
antiword
This filter converts Microsoft word documents into plain ASCII text documents.
Simply type:
antiword file.doc
You can get antiword from the antiword homepage.
recode
Converts text files between various formats including HTML and dozens of different forms of text
encodings.
Use recode −l for a full listing. It can also be used to convert text to and from Windows and UNIX
system formats (so you don't get the weird symbols).
Chapter 11. Text Related Tools
55GNU/Linux Command−Line Tools Summary
Warning
By default recode overwrites the input file, use '<' to use recode as a filter only (and to
not overwrite the file).
Examples:
UNIX system text to Windows text:
recode ..pc file_name
Windows text to UNIX system text:
recode ..pc/ file_name
UNIX system text to Windows text without overwriting the original file (and creating a new output
file):
recode ..pc < file_name > recoded_file
tr
(Windows to UNIX system style conversion only). While tr is not specifically designed to convert
files from Windows−format to UNIX system format by doing:
tr −d '\r' < inputFile.txt > outputFile.txt
The −d switch means to simply delete any occurances of the string. Since we are looking for '\r',
carriage returns it will remove any it finds, making the file a UNIX system text file. You can read
more about tr over here, Section 11.4.
11.5.1. Conversion tools
enscript
Converts text files to postscript, rtf, HTML (use ghostview to view the postscript file). enscript has a
large number of options which can be used to customise the output.
Examples:[5]
enscript −−language=html input_file.txt −o output_file.html
This will take some file and output it as a html file.
enscript −−help−highlight
Display help on using the highlight feature (list all different types of highlighting available)
enscript −−help−highlight
Highlight (pretty print), example:
enscript −E −−color −−language=html −−toc −−output=foo.html *.h *.c
Add all the files with a .h and a .c (C source and header files) into a file called foo.html, use colour
and add a table of contents
For further options refer to the well written manual page of enscript.
figlet
Chapter 11. Text Related Tools
56GNU/Linux Command−Line Tools Summary
Used to create ASCII "art". Figlet can create several different forms (fonts) of ASCII art, its one of
the more unusual programs around.
11.6. Finding Text Within Files
grep
Looks for text within files. For example:
grep this_word this_file.txt
Example options:
◊ −v −−− this option is used to display lines which do not contain the string.
◊ −n −−− this option displays the line numbers
◊ −w −−− this option makes grep match the whole word
◊ −A x or −B x (where x is a number) −−− display "x" lines After or Before the section where
the particular word is found.
◊ −r or rgrep −−− search for text within files recursively.
This command uses regular expressions, for more information please see, Section 20.4.2.
For example, this command would look in the file "rpmlist.txt" for anything starting with "rpm":
grep rpm rpmlist.txt
Or you could use it like this, to search through the output of another file:
rpm −qa | grep ogg
The first command lists all RPM's installed on your system, the second finds any containing the string
"ogg" and outputs them.
rgrep
A "recursive" version of grep (this is a different program to grep). This will search all the files in the
current directory and all it's subdirectories and print the names of the files and the matching line.
Follows similar syntax to grep (see above). You could also use grep with the −r option to achieve the
same affect.
fgrep
This version of grep calls grep with the −F option. This will look for literal strings only, it won't use
or expand any kind of regular expression.
For example you could type:
fgrep 'a$*b?' file.txt
And fgrep would look for the string "a$*b?" in the file "file.txt".
Other Versions
There are various versions of grep which are designed to do different things try searching for them on
the internet or within your distribution.
Chapter 11. Text Related Tools
57Chapter 12. Mathematical tools
num−utils homepage
The "num−utils" homepage, Num Utils, contains a variety of command line programs that could be
useful when performing maths on your GNU/Linux machine.
units
Convert units of measurement between different scales. For example, centimeters to inches, litres to
gallons.
Simply run the program, I recommend running it as follows:
units −−verbose
This will run the program and it will tell you exactly what it is doing.
Example: you enter "60 meters" then you want it worked out in "kilometers". The first line will tell
you what this evaluates to.
If you wanted the conversion rate for "meters" to "kilometers" read the second line of the output
(which will tell you meters/1000).
To exit
Press CTRL−D (end−of−file key) when you are finished using units.
python
Python is a very powerful, easy to learn, general purpose, interpreted programming language. And it
makes a great calculator! If you don't have a calculator installed then simply type python, then hit
[Enter].
This will execute the Python interpreter in interactive mode. Type your sums just like you would use a
calculator. Note that if you want to work out fractions make sure you use a decimal point and a zero
to obtain the correct answer (otherwise it will use integer division).
To start python in interactive mode, simply type:
python
Once python is started you can use it to add up sums or maybe do some python programming.
Use CTRL−D (end−of−file key) to exit the Python interpreter.
numgrep
A little bit like grep only this is designed for numbers only.
Use '/' (forward slashes) to contain each expression.
Use m<n> to find multiples of the number n and use f<n> to find factors of the number n.
Use commas to seperate expressions and .. (two dots) to represent a range.
For example, to input from standard input you could simply type:
Chapter 12. Mathematical tools
58GNU/Linux Command−Line Tools Summary
numgrep
To input from a file and look for numbers between 1 and 1000 you could type:
numgrep /1..1000/ file_name
This tool comes from the num−utils package
Please note that this tool is part of the num−utils package.
Chapter 12. Mathematical tools
59Chapter 13. Network Commands
The network commands chapter explains various tools which can be useful when networking with other
computers both within the network and accross the internet, obtaining more information about other
computers. This chapter also includes information on tools for network configuration, file transfer and
working with remote machines.
netstat
Displays contents of /proc/net files. It works with the Linux Network Subsystem, it will tell you what
the status of ports are ie. open, closed, waiting, masquerade connections. It will also display various
other things. It has many different options.
tcpdump
This is a sniffer, a program that captures packets off a network interface and interprets them for you.
It understands all basic internet protocols, and can be used to save entire packets for later inspection.
ping
The ping command (named after the sound of an active sonar system) sends echo requests to the host
you specify on the command line, and lists the responses received their round trip time.
You simply use ping as:
ping ip_or_host_name
Note to stop ping (otherwise it goes forever) use CTRL−C (break).
Please note
Using ping/smbmount/ssh or other UNIX system programs with a computer name
rather than IP address will only work if you have the computer listed in your /etc/hosts
file. Here is an example:
192.168.1.100 new
This line says that their is a computer called "new" with IP address 192.168.1.100.
Now that it exists in the /etc/hosts file I don't have to type the IP address anymore, just
the name "new".
hostname
Tells the user the host name of the computer they are logged into. Note: may be called host.
traceroute
traceroute will show the route of a packet. It attempts to list the series of hosts through which your
packets travel on their way to a given destination. Also have a look at xtraceroute (one of several
graphical equivalents of this program).
Command syntax:
traceroute machine_name_or_ip
tracepath
tracepath performs a very simlar function to traceroute the main difference is that tracepath doesn't
take complicated options.
Command syntax:
tracepath machine_name_or_ip
Chapter 13. Network Commands
60GNU/Linux Command−Line Tools Summary
findsmb
findsmb is used to list info about machines that respond to SMB name queries (for example windows
based machines sharing their hard disk's).
Command syntax:
findsmb
This would find all machines possible, you may need to specify a particular subnet to query those
machines only...
nmap
" network exploration tool and security scanner". nmap is a very advanced network tool used to query
machines (local or remote) as to whether they are up and what ports are open on these machines.
A simple usage example:
nmap machine_name
This would query your own machine as to what ports it keeps open. nmap is a very powerful tool,
documentation is available on the nmap site as well as the information in the manual page.
13.1. Network Configuration
ifconfig
This command is used to configure network interfaces, or to display their current configuration. In
addition to activating and deactivating interfaces with the "up" and "down" settings, this command is
necessary for setting an interface's address information if you don't have the ifcfg script.
Use ifconfig as either:
ifconfig
This will simply list all information on all network devices currently up.
ifconfig eth0 down
This will take eth0 (assuming the device exists) down, it won't be able to receive or send anything
until you put the device back "up" again.
Clearly there are a lot more options for this tool, you will need to read the manual/info page to learn
more about them.
ifup
Use ifup device−name to bring an interface up by following a script (which will contain your default
networking settings). Simply type ifup and you will get help on using the script.
For example typing:
ifup eth0
Will bring eth0 up if it is currently down.
ifdown
Use ifdown device−name to bring an interface down using a script (which will contain your default
network settings). Simply type ifdown and you will get help on using the script.
For example typing:
Chapter 13. Network Commands
61GNU/Linux Command−Line Tools Summary
ifdown eth0
Will bring eth0 down if it is currently up.
ifcfg
Use ifcfg to configure a particular interface. Simply type ifcfg to get help on using this script.
For example, to change eth0 from 192.168.0.1 to 192.168.0.2 you could do:
ifcfg eth0 del 192.168.0.1
ifcfg eth0 add 192.168.0.2
The first command takes eth0 down and removes that stored IP address and the second one brings it
back up with the new address.
route
The route command is the tool used to display or modify the routing table. To add a gateway as the
default you would type:
route add default gw some_computer
13.2. Internet Specific Commands
Note that should DNS not be configured correctly on your machine, you need to edit "/etc/resolv.conf" to
make things work...
host
Performs a simple lookup of an internet address (using the Domain Name System, DNS). Simply
type:
host ip_address
or
host domain_name
dig
The "domain information groper" tool. More advanced then host... If you give a hostname as an
argument to output information about that host, including it's IP address, hostname and various other
information.
For example, to look up information about "www.amazon.com" type:
dig www.amazon.com
To find the host name for a given IP address (ie a reverse lookup), use dig with the `−x' option.
dig −x 100.42.30.95
This will look up the address (which may or may not exist) and returns the address of the host, for
example if that was the address of "http://slashdot.org" then it would return "http://slashdot.org".
dig takes a huge number of options (at the point of being too many), refer to the manual page for more
information.
whois
(now BW whois) is used to look up the contact information from the "whois" databases, the servers
are only likely to hold major sites. Note that contact information is likely to be hidden or restricted as
it is often abused by crackers and others looking for a way to cause malicious damage to
Chapter 13. Network Commands
62GNU/Linux Command−Line Tools Summary
organisation's.
wget
(GNU Web get) used to download files from the World Wide Web.
To archive a single web−site, use the −m or −−mirror (mirror) option.
Use the −nc (no clobber) option to stop wget from overwriting a file if you already have it.
Use the −c or −−continue option to continue a file that was unfinished by wget or another program.
Simple usage example:
wget url_for_file
This would simply get a file from a site.
wget can also retrieve multiple files using standard wildcards, the same as the type used in bash, like
*, [ ], ?. Simply use wget as per normal but use single quotation marks (' ') on the URL to prevent bash
from expanding the wildcards. There are complications if you are retrieving from a http site (see
below...).
Advanced usage example, (used from wget manual page):
wget −−spider −−force−html −i bookmarks.html
This will parse the file bookmarks.html and check that all the links exist.
Advanced usage: this is how you can download multiple files using http (using a wildcard...).
Notes: http doesn't support downloading using standard wildcards, ftp does so you may use wildcards
with ftp and it will work fine. A work−around for this http limitation is shown below:
wget −r −l1 −−no−parent −A.gif http://www.website.com[6]
This will download (recursively), to a depth of one, in other words in the current directory and not
below that. This command will ignore references to the parent directory, and downloads anything that
ends in ".gif". If you wanted to download say, anything that ends with ".pdf" as well than add a
−A.pdf before the website address. Simply change the website address and the type of file being
downloaded to download something else. Note that doing −A.gif is the same as doing −A "*.gif"
(double quotes only, single quotes will not work).
wget has many more options refer to the examples section of the manual page, this tool is very well
documented.
Alternative website downloaders
You may like to try alternatives like httrack. A full GUI website downloader written in
python and available for GNU/Linux
curl
curl is another remote downloader. This remote downloader is designed to work without user
interaction and supports a variety of protocols, can upload/download and has a large number of
tricks/work−arounds for various things. It can access dictionary servers (dict), ldap servers, ftp, http,
gopher, see the manual page for full details.
Chapter 13. Network Commands
63GNU/Linux Command−Line Tools Summary
To access the full manual (which is huge) for this command type:
curl −M
For general usage you can use it like wget. You can also login using a user name by using the −u
option and typing your username and password like this:
curl −u username:password http://www.placetodownload/file
To upload using ftp you the −T option:
curl −T file_name ftp://ftp.uploadsite.com
To continue a file use the −C option:
curl −C − −o file http://www.site.com
13.3. Remote Administration Related
ssh
Secure shell, remotely login on a machine running the sshd daemon. Once you are logged in you have
a secure shell and are able to execute various commands on that computer such as copy files, reboot
the computer, just like it was your own GNU/Linux PC.
Or you can use ssh with a full hostname to connect to a remote machine (as in across the internet).
Examples:
ssh hostname
Connect to a remote system with your current username, you will obviously need the password of the
user on the other machine.
ssh username@hostname
Connect to a remote system with your a different username, you will obviously need the password of
the user on the other machine.
scp
Secure copy, part of the ssh package. Allows you to copy files from one computer to another
computer, use −r to copy recursively (copy entire directories and subdirectories).
scp's syntax is always
scp machineToBeCopiedFrom machineToBeCopiedTo
Where either machine can be a local directory (on the current filesystem /) or a remote machine.
Remote machines are usually machinesFullName:/directory (if you omit the directory part it will just
assume the home directory of the username you are logging in with).
The example below copies all files from the current directory (not including any directories), the
command will login to "new" using the username of the person currently logged in on the local
computer, the files will be copied to the root directory of the remote computer called "new" (which is
probably on the LAN):
scp * new:/
Chapter 13. Network Commands
64GNU/Linux Command−Line Tools Summary
You could also copy files from another computer to another computer. Let's say you are on a
computer called "p100". And you want to copy files (and directories) from "hp166" (in the /tmp
directory and anything below that) to "new" and put the files in new's temporary directory. You could
do:
scp −r hp166:/tmp new:/tmp
Assuming you were logged in as "fred" you would need passwords for user "fred" on the computers
hp166 and new. Add an user_name@ before the computer name to login under a different user name.
For example to perform the above command with user "root" on hp166 and "anon" on new you would
type:
scp −r root@hp166:/tmp anon@new:/tmp
To copy from a remote machine to a local computer you simply do things in reverse:
scp remoteMachine:/mystuff/* .
This will copy files on the remote machine in the directory "mystuff" to your local computer.
Remote Machines
Please note that when working with a remote machine you need to have a : (colon)
after the machine name even if you want the files in their home directory. Otherwise
the command will fail.
sftp
Secure ftp, another part of the ssh package. This command is similar to ftp but uses an encrypted
tunnel to connect to an ftp server and is therefore more secure than just plain ftp.
The command usage is very similar to ftp (the command−line tool), sftp (once running) uses
commands such as help (for help), put (send files to the server), get (download files from the server)
and various others, refer to the manual page and internal documentation for further details.
Graphical programs
Sometimes its easier to manage files with a GUI, many of these programs do have
good GUI equivalents, try searching the internet or sites like Sourceforge or
Freshmeat.
Chapter 13. Network Commands
65Chapter 14. Security
The security chapter is designed to give the user a very basic level of understanding of security within the
GNU/Linux operating system. This chapter also has information on the UNIX system style file permissions
used on most GNU/Linux machines.
More comprehensive guides can be found at the Linux Documentation Project, such as the Linux Security
howto authored by Kevin Fenzi and Dave Wreski.
There are also sites such as Linux Security. If your looking for a program to assist in locking down your
operating system you may want to check Bastille Linux that runs on RPM based distributions
(Redhat/Mandriva/SuSE).
Changing root's password
This trick works well if you have forgotten your superuser password, type linux single at a
LILO/Grub prompt. Then passwd once the system has started and you are at a console.
Grub:
If you are using grub go to the relevant line (the one with the kernel and various options) then
press 'e' for edit and add "single" on to the end of the lines that boot the kernel. Then hit
[Enter] and press 'b' (to boot).
Lilo:
If you are using lilo press escape and type " linux single" and then hit [Enter] to boot.
Security Warning
This is also a basic security hazard if you have others using your computer and
security is a concern, you may like to add a password to your LILO or Grub prompt to
stop this from being done.
umask
The umask is a value set by the shell. It controls the default permissions of any file created during that
shell session. This information is inherited from the shell's parent and is normally set in some
configuration file by the root user (in my case /etc/profile).
umask has an unusual way of doing things ...to set the umask you must describe file permissions by
saying what will be disabled.
You can do this by doing 777 minus the file permissions you want. Note that umask works with
numbers only, for an explanation please see, Section 14.2
For example:
You want the default during a particular shell session to be equivalent to chmod 750 (user has r/w/x,
group has r/x and other has no permissions), then the command you would use would be:
umask 027
Chapter 14. Security
66GNU/Linux Command−Line Tools Summary
14.1. Some basic Security Tools
md5sum
Compute an md5 checksum (128−bit) for file "file_name" to verify it's integrity. You normally use
the " md5sum −c" option to check against a given file (often with a ".asc" extention) to check whether
the various files are correct, this comes in handy when downloading isos as the checking is automated
for you.
Command syntax:
md5sum file_name
mkpasswd −l 10
This command will make a random password of length ten characters. This password generator
creates passwords that are designed to be hard to guess. There are similar alternatives to this program
scattered around the internet.
14.2. File Permissions
Use ls −l to see the permissions of files (list−long). They will appear like this, note that I have added spaces
between permissions to make it easier to read:
Where: r = read, w = write, x = execute
− rwx
rw−
r−− 1
type owner group others
newuser newuser
This number is the number of hard links (pointers) to this file. You can use ln to create another
hard−link to the file.
This is the type of file. '−' means a regular file, 'd' would mean a directory, 'l' would mean a link.
There are also other types such as 'c' for character device and 'b' for block device (found in the /dev/
directory).
These are the permissions for the owner of the file (the user who created the file).
These are the permissions for the group, any users who belong is the same group as the user who
created the file will have these permissions.
These are the permissions for everyone else. Any user who is outside the group will have these
permissions to the file.
The two names at the end are the username and group respectively.
chmod
Change file access permissions for a file(s).
There are two methods to change permissions using chmod; letters or numbers.
Letters Method:
Chapter 14. Security
67GNU/Linux Command−Line Tools Summary
use a + or − (plus or minus sign) to add or remove permissions for a file respectively. Use an
equals sign =, to specify new permissions and remove the old ones for the particular type of
user(s).
You can use chmod letter where the letters are:
a (all (everyone)), u (user), g (group) and o (other).
Examples:
chmod u+rw somefile
This would give the user read and write permission.
chmod o−rwx somefile
This will remove read/write/execute permissions from other users (doesn't include users within your
group).
chmod a+r somefile
This will give everyone read permission for the file.
chmod a=rx somefile
This would give everyone execute and read permission to the file, if anyone had write permission it
would be removed.
Numbers Method:
you can also use numbers (instead of letters) to change file permissions. Where:
r (read) = 4 w (write) = 2 x (execute) = 1
Numbers can be added together so you can specify read/write/execute permissions; read+write = 6,
read+execute = 5, read+write+execute = 7
Examples:
chmod 777 somefile
This would give everyone read/write/execute permission on "this_file". The first number is user,
second is group and third is everyone else (other).
chmod 521 somefile
This would give the user read and execute permission, and the group write permission (but not read
permission!) and everyone else execute permission. (Note that it's just an example, settings like that
don't really make sense...).
chown
Changes the ownership rights of a file (hence the name 'chown' − change owner). This program can
only be used by root.
Use the −R option to change things recursively, in other words, all matching files including those in
subdirectories.
Command syntax:
chown owner:group the_file_name
Chapter 14. Security
68GNU/Linux Command−Line Tools Summary
sticky bit
Only the person who created the file within a directory may delete it, even if other people have write
permission. You can turn it on by typing:
chmod 1700 somedirectory (where 1 = sticky bit)
or (where t represents the sticky bit)
chmod +t somedirectory
To turn it off you would need to type:
chmod 0700 somefile (where the zero would mean no sticky bit)
or (where t represents the sticky bit)
chmod −t somefile
Note that the permissions aren't relevant in the numbers example, only the first number (1 = on, 0 =
off).
An example of a sticky directory is usually /tmp
suid
Allow SUID/SGID (switch user ID/switch group ID) access. You would normally use chmod to turn
this on or off for a particular file, suid is generally considered a security hazard so be careful when
using this.
Example:
chmod u+s file_name
This will give everyone permission to execute the file with the permissions of the user who set the +s
switch.
Security Hazard
This is obviously a security hazard. You should avoid using the suid flag unless
necessary.
chattr
Change file system attributes (works on ext2fs and possibly others...). Use the −R option to change
files recursively, chattr has a large number of attributes which can be set on a file, read the manual
page for further information.
Example:
chattr +i /sbin/lilo.conf[7]
This sets the 'immutable' flag on a file. Use a '+' to add attributes and a '−' to take them away. The +i
will prevent any changes (accidental or otherwise) to the "lilo.conf" file. If you wish to modify the
lilo.conf file you will need to unset the immutable flag: chattr −i. Note some flags can only be used
by root; −i, −a and probably many others.
Note there are many different attributes that chattr can change, here are a few more which may be
useful:
Chapter 14. Security
69GNU/Linux Command−Line Tools Summary
◊ A (no Access time) −−− if a file or directory has this attribute set, whenever it is accessed,
either for reading of for writing, it's last access time will not be updated. This can be useful,
for example, on files or directories which are very often accessed for reading, especially since
this parameter is the only one which changes on an inode when it's opened.
◊ a (append only) −−− if a file has this attribute set and is open for writing, the only operation
possible will be to append data to it's previous contents. For a directory, this means that you
can only add files to it, but not rename or delete any existing file. Only root can set or clear
this attribute.
◊ s (secure deletion) −−− when such a file or directory with this attribute set is deleted, the
blocks it was occupying on disk are written back with zeroes (similar to using shred). Note
that this does work on the ext2, and ext3 filesystems but is unlikely to work on others (please
see the documentation for the filesystem you are using). You may also like to see shred,
please see Chapter 7
lsattr
(list attributes). This will list if whether a file has any special attributes (as set by chattr). Use the −R
option to list recursively and try using the −d option to list directories like other files rather than
listing their contents.
Command syntax:
lsattr
This will list files in the current directory, you may also like to specify a directory or a file:
lsattr /directory/or/file
Chapter 14. Security
70Chapter 15. Archiving Files
The archiving files chapter provides some basic information on the simple programs that you can use to
archive files. You will often see these programs used when you try to install programs without using a
package management tool.
This is not a backup guide
Please note that while tar is useful for regular purposes, and possibly combined with bash sciprting or
similar it can become useful, it is not a great program for performing real backups of data.
You should try searching the internet if you are looking for backup programs on GNU/Linux or try
Sourceforge or Freshmeat for programs that you can use. You may also like to see rsync, Section 15.2.
15.1. tar (tape archiver)
Type tar then −option(s)
Options list:
• −c −−− create.
• −v −−− verbose, give more output, show what files are being worked with (extracted or added).
• −f −−− file (create or extract from file) − should always be the last option otherwise the command
will not work.
• −z −−− put the file though gzip or use gunzip on the file first.
• −x −−− extract the files from the tarball.
• −p −−− preserves dates, permissions of the original files.
• −j −−− send archive through bzip2.
• −−exclude=pattern −−− this will stop certain files from being archived (using a standard wild−card
pattern) or a single file name.
tar examples
tar −cvpf name_of_file.tar files_to_be_backed_up
This would create a tape archive (no compressing).
tar −zxvpf my_tar_file.tar.gz
This would extract files (verbosely) from a gzipped tape archive.
15.2. rsync
rsync
rsync is a replacement for the old rcp (remote−copy) command. It can use ssh for encryption and is a
very flexible tool, it can copy from local machine to local machine, from local to remote (and
vice−versa), and to and from rsync servers.
rsync uses an advanced differencing algorithm, so when to copies or syncs something it will (a) only
copy new/changed files and (b) if the files have being changed it will copy the differences between
Chapter 15. Archiving Files
71GNU/Linux Command−Line Tools Summary
the files (not the entire file). Using this method rsync saves time and bandwidth.
rsync also has advanced exclusion options similar to GNU tar. rsync has a well written manual page,
for further information read the rsync documentation online or type:
man rsync
If you wish to visit the rsync site you will find it over here
15.3. Compression
There are two main compression utilities used in GNU/Linux. It's normal to first "tar" a bunch of files (using
the tar program of course) and then compress them with either bzip2 or gzip. Of course either of these tools
could be used without tar, although they are not designed to work on more than one file (they use the UNIX
tools philosophy, let tar group the files, they will do the compression...this simplifies their program). It's
normal to use tar and then use these tools on them, or use tar with the correct options to use these
compression programs.
GNU zip (gzip)
gzip is the GNU zip compression program and probably the most common compression format on
UNIX−like operating systems.
gzip your_tar_file.tar
This will compress a tar archive with GNU zip, usually with a .gz extension. Gzip can compress any
type of file, it doesn't have to be a tar archive.
gunzip your_file.gz
This will decompress a gzipped file, and leave the contents in the current directory.
bzip2
bzip2 is a newer compression program taht offers superior compression to gzip at the cost of more
processor time.
bzip2 your_tar_file.tar
This will compress a tar archive with the bzip2 compression program, usually with a .bz extension.
bzip2 can compress any type of file, it doesn't have to be a tar archive.
bunzip2 your_file.tar.bz2
This will decompress a file compressed by bzip2, and leave the contents in the current directory.
zipinfo
Use zipinfo to find detailed information about a zip archive (the ones usually generally used by
ms−dos and windows, for example winzip).
Command syntax:
zipinfo zip_file.zip
zipgrep
Will run grep to look for files within a zip file (ms−dos style, for example winzip) without manually
decompressing the file first.
Command syntax:
Chapter 15. Archiving Files
72GNU/Linux Command−Line Tools Summary
zipgrep pattern zip_file.zip
bzip2recover
Used to recover files from a damaged bzip2 archive. It simply extracts out all the working blocks as
there own bzip2 archives, you can than use bzip2 −t on each file to test the integrity of them and
extract the working files.
bzme
Will convert a file that is zipped or gzipped to a file compressed using bzip2.
Command syntax:
bzme filename
Tip
Both gzip and bzip2 supply tools to work within compressed files for example listing the files within the
archive, running less on them, using grep to find files within the archive et cetera.
For gzip the commands are prefixed with z, zcat, zless, zgrep.
For bzip2 the commands are prefixed with bz, bzcat, bzless, bzgrep.
Chapter 15. Archiving Files
73Chapter 16. Graphics tools (command line based)
The graphics tools chapter explains some image programs that can be called from the command−line. While I
have found image programs that can be used from the command−line, zgv is the only one I've ever heard of, I
did not find them very useful. All the tools listed use the X windowing system to work and simply run from
the command line (so they can be scripted/automated if necessary).
montage
Creates a 'montage', an image created of many other images, arranged in a random fashion.
Command syntax:
montage r34.jpg r32.jpg skylines* skyline_images.miff
The above would create a "montage" of images (it would tile a certain number of images) into a
composite image called "skyline_images.miff", you could always use display to view the image.
Note
Note that the images are converted to the same size (scaled) so they can be tiled
together.
convert
To convert the file format of an image to another image format. convert is used to change a files
format, for example from a jpeg to a bitmap or one of many other formats. convert can also
manipulate the images as well (see the man page or the ImageMagick site).
Example from Jpeg to PNG format:
convert JPEG: thisfile.jpg PNG: thisfile.png
import
Captures screen−shots from the X server and saves them to a file. A screen−dump of what X is doing.
Command syntax:
import file_name
display
display is used to display (output) images on the screen. Once open you are can also perform editing
functions and are able to read/write images. It has various interesting options such as the ability to
display images as a slide show and the ability to capture screenshots of a single window on−screen.
Command syntax (for displaying an image):
display image_name
To display a slide show of images, open the images you want possibly using a wildcard, for example:
display *.jpg
And then click on the image to bring up the menu and then look under the miscellaneous menu for the
slide show option.
Speed Warning
Chapter 16. Graphics tools (command line based)
74GNU/Linux Command−Line Tools Summary
Be careful when opening multiple large sized images (especially on a slow machine)
and putting the slide show on a small delay between image changes. Your processor
will be overloaded and it will take a significant amount of time to be able to close
ImageMagick.
identify
Will identify the type of image as well as it's size, colour depth and various other information. Use the
−verbose option to show detailed information on the particular file(s).
Command syntax:
identify image_name
mogrify
mogrify is another ImageMagick command which is used to transform images in a number of
different ways, including scaling, rotation and various other effects. This command can work on a
single file or in batch.
For example, to convert a large number of tiff files to jpeg files you could type:
mogrify −format jpeg *.tiff
This command has the power to do a number of things in batch including making thumbnails of sets
of images.
For this you could type:[8]
mogrify −geometry 120x120 *.jpg
showrgb
showrgb is used to uncompile an rgb colour−name database. The default is the one that X was built
with. This database can be used to find the correct colour combination for a particular colour (well it
can be used as a rough guide anyway).
To list the colours from the X database, simply type:
showrgb
Please note:
All tools listed, excluding showrgb are part of the ImageMagick package. Type man ImageMagick for a
full list of available commands. Or see the ImageMagick site ImageMagick for further information.
Chapter 16. Graphics tools (command line based)
75Chapter 17. Working with MS−DOS files
Use the mtools programs to work with ms−dos based files, execute mtools for a full listing of available m*
tools. There are a lot of files within the mtools package for working with ms−dos disks, also try the info
documentation of mtools for more details.
The use of slashes
Note that with mtools commands you can use the slashes on the a: part either way (ie. backslash
(windows−style) or forward slash (UNIX system style)).
mformat
Formats an unmounted disk as an ms−dos floppy disk. Usage is similar to the ms−dos format utility,
to format the first floppy disk you can type:
mformat a:
mcopy
Copies files from an ms−dos disk when it's not mounted. Similar to the ms−dos copy command
except it's more advanced.
Command syntax:
mcopy a:/file_or_files /destination/directory
mmount
Mount an ms−dos disk, without using the normal UNIX system mount.
For example:
mmount a: /mnt/floppy
This will mount the floppy under /mnt/floppy (this option may or may not be necessary, it depends on
your /etc/fstab setup).
mbadblocks
Scans an ms−dos (fat formatted disk) for bad blocks, it marks any unused bad blocks as "bad" so they
won't be used.
Example:
mbadblocks a:
dosfsck
This program is used to check and repair ms−dos based filesystems. Use the −a option to
automatically repair the filesystem (ie don't ask the user questions), the −t option to mark un−readable
clusters as bad and the −v option to be more verbose (print more information).
Example:
dosfsck −at /dev/fd0
This would check your floppy disk for any errors (and bad sectors) and repair them automatically.
Chapter 17. Working with MS−DOS files
76Chapter 18. Scheduling Commands to run in the
background
There are two main tools used to perform scheduled tasks, at and cron. You may also like to try anacron if
your computer does not run continuously, as cron will only work if your computer is left on (anacron can
catch up with the scheduled tasks the next time the computer is on...).
at
'at' executes a command once on a particular day, at a particular time. at will add a particular
command to be executed.
Examples:
at 21:30
You then type the commands you want executed then press the end−of−file key (normally CTRL−D
). Also try:
at now + time
This will run at the current time + the hours/mins/seconds you specify (use at now + 1 hour to have
command(s) run in 1 hour from now...)
You can also use the −f option to have at execute a particular file (a shell script).
at −f shell_script now + 1 hour
This would run the shell script 1 hour from now.
atq
Will list jobs currently in queue for the user who executed it, if root executes at it will list all jobs in
queue for the at daemon. Doesn't need or take any options.
atrm
Will remove a job from the 'at' queue.
Command syntax:
atrm job_no
Will delete the job "job_no" (use atq to find out the number of the job)
cron
cron can be used to schedule a particular function to occur every minute, hour, day, week, or month.
It's normal to use the crontab to perform the editing functions as this automates the process for the
cron daemon and makes it easier for normal users to use cron.
Anacron
anacron is another tool designed for systems which are not always on, such as home
computers
While cron will not run if the computer is off, anacron will simply run the command
when the computer is next on (it catches up with things).
crontab
Chapter 18. Scheduling Commands to run in the background
77GNU/Linux Command−Line Tools Summary
crontab is used to edit, read and remove the files which the cron daemon reads.
Options for crontab (use crontab −option(s)):
◊ −e −−− to edit the file.
◊ −l −−− to list the contents of the file.
◊ −u username −−− use the −u with a username argument to work with another users crontab
file.
When using crontab −e you have a number of fields (6) what they mean is listed below:
Field
minute
hour
day of month
month
day of week
Allowed Values
0−59
0−23
1−31
1−12 (or names, see below)
0−7 (0 or 7 is Sun, or use three letter names)
There are also a number of shortcut methods for common tasks, including:[9]
◊ @reboot −−− run command at reboot
◊ @yearly −−− same as 0 0 1 1 *
◊ @annually −−− same as @yearly
◊ @monthly −−− same as 0 0 1 * *
◊ @weekly −−− same as 0 0 * * 0
◊ @daily −−− same as 0 0 * * *
◊ @midnight −−− same as @daily
◊ @hourly −−− same as 0 * * * *
[10]
Note that * (asterisk) is used to mean anything (similar to the wildcard). For example if you leave the
day part (the 5th place) with an asterisk it would mean everyday.
Lists are allowed. A list is a set of numbers (or ranges) separated by commas. Examples: ``1,2,5,9'',
``0−4,8−12".
Step values can be used in conjunction with ranges. Following a range with ``/<number>'' specifies
skips of the number's value through the range. For example, ``0−23/2'' can be used in the hours field
to specify command execution every other hour (the alternative in the V7 standard is
``0,2,4,6,8,10,12,14,16,18,20,22''). Steps are also permitted after an asterisk, so if you want to say
``every two hours'', just use ``*/2''.
When writing a crontab entry you simply type in six fields separated by spaces, the first five are those
listed in the table (using numbers or letters and numbers as appropriate), the 6th field is the command
to be executed and any options, cron will read everything up until the newline.
Example:
5 4 * * sun echo "run at 5 after 4 every sunday"
Chapter 18. Scheduling Commands to run in the background
78GNU/Linux Command−Line Tools Summary
This would run the echo command with the string shown at 4:05 every Sunday.
Chapter 18. Scheduling Commands to run in the background
79Chapter 19. Miscellaneous
The miscellaneous chapter contains commands that don't really fit into the other sections of this guide.
renaming extensions
To rename all of the files in the current directory with a '.htm' extension to '.html', type:
$ chcase −x 's/htm/html/' '*.htm'
You can get a copy of the chcase perl script here.
For more complex renaming you should read Section 7.3
rel[11]
Use rel to analyze text files for relevance to a given set of keywords. It outputs the names of those
files that are relevant to the given keywords, ranked in order of relevance; if a file does not meet the
criteria, it is not outputted in the relevance listing.
units man page
There is a man page, part of the Linux Programmers Manual called "units". It displays various
information on the various scientific measurements (such as mega, giga et cetera). This manual page
also has a short discussion about the argument over which standard should be used to measure data
(ie. the kibibyte vs kilobyte).
To access this man page type:
man 7 units
fortune
fortune is a tool which will print a random, hopefully interesting quote or entertaining short piece of
writing. There are options to customise which area the epigrams should come from. Just type fortune
to get a random epigram from any section.
Simply type:
fortune
Chapter 19. Miscellaneous
80Chapter 20. Mini−Guides
The mini−guides chapter is a section of the document that describes certain concepts in more depth than the
usual command descriptions. The information listed is fairly specific as I have tried to avoid the duplication of
too much information that is already online.
20.1. RPM: Redhat Package Management System
Checking
Installed RPM's
Use the rpm −V option to check whether or not a package has been modified.
For example:
rpm −V textutils
If none of the files from the textutils package have changed then rpm will exit without outputting any data. If,
on the other hand, the program has changed, you may see something like this:
U.5....T /bin/cat
This isn't as cryptic as it appears. The line returned from rpm −V contains any number of eight characters plus
the full path to the file. Here are the characters and their meaning:[12]
• S −−− File size differs
• M −−− Mode differs (includes permissions and file type)
• 5 −−− MD5 sum differs
• D −−− Device major/minor number mis−match
• L −−− ReadLink(2) path mis−match
• U −−− User ownership differs
• G −−− Group ownership differs
• T −−− mTime differs
Mandriva Users Note
Mandriva Linux uses a customised version of RPM called urpmi (It consists of the urpm* commands,
urpmi to install, urpme to remove and urpmf and urpmq to query).
This customised version has advantages over standard RPM, including automatic−dependency solving
and Debian apt−get style functions (ability to download programs over the internet and have all
dependencies resolved automatically).
The urpm* commands are all described in detail in Mandriva's documentation and various sources
online.
20.2. Checking the Hard Disk for errors
Checking the hard disk for errors on your primary drive is very, very rarely required in GNU/Linux, most
checking is automated on start−up if it is required. If you do need to check the hard disk for errors you will
first need to unmount it. Then use the file system checker, fsck.
Chapter 20. Mini−Guides
81GNU/Linux Command−Line Tools Summary
fsck.file_system_type
If you had an ext3 file−system then it would be:
fsck.ext3
Also try
You can also try using:
fsck −t file_system_type
20.3. Duplicating disks
This simple technique shows you how you would duplicate floppy disks in a GNU/Linux system using dd.
This technique is not as useful as it used to be but can still be used for creating an image of a cd (although that
is best done through the cd burning program).
This information has been taken from the Linux Online Classroom, see [4] in the Bibliography for further
details.
$ dd if=/dev/fd0 of=floppy−image
$ dd if=floppy−image of=/dev/fd0
The first dd makes an exact image of the floppy to the file floppy−image, the second one writes the image to
the floppy. (The user has presumably switched the floppy before the second command. Otherwise the
command pair is of doubtful usefulness).
Similar techinques can be used when creating bootdisks, you simply use dd to transfer the image to the floppy
disk.
20.4. Wildcards
Wildcards are useful in many ways for a GNU/Linux system and for various other uses. Commands can use
wildcards to perform actions on more than one file at a time, or to find part of a phrase in a text file. There are
many uses for wildcards, there are two different major ways that wildcards are used, they are globbing
patterns/standard wildcards that are often used by the shell. The alternative is regular expressions, popular
with many other commands and popular for use with text searching and manipulation.
Tip
If you have a file with wildcard expressions in it then you can use single quotes to stop bash expanding
them or use backslashes (escape characters), or both.
For example if you wanted to create a file called 'fo*' (fo and asterisk) you would have to do it like this
(note that you shouldn't create files with names like this, this is just an example):
touch 'fo*'
Note that parts of both subsections on wildcards are based (at least in part) off the grep manual and info pages.
Please see the Bibliography for further information.
Chapter 20. Mini−Guides
82GNU/Linux Command−Line Tools Summary
20.4.1. Standard Wildcards (globbing patterns)
Standard wildcards (also known as globbing patterns) are used by various command−line utilities to work
with multiple files. For more information on standard wildcards (globbing patterns) refer to the manual page
by typing:
man 7 glob
Can be used by
Standard wildcards are used by nearly any command (including mv, cp, rm and many others).
? (question mark)
this can represent any single character. If you specified something at the command line like "hd?"
GNU/Linux would look for hda, hdb, hdc and every other letter/number between a−z, 0−9.
* (asterisk)
this can represent any number of characters (including zero, in other words, zero or more characters).
If you specified a "cd*" it would use "cda", "cdrom", "cdrecord" and anything that starts with "cd"
also including "cd" itself. "m*l" could by mill, mull, ml, and anything that starts with an m and ends
with an l.
[ ] (square brackets)
specifies a range. If you did m[a,o,u]m it can become: mam, mum, mom if you did: m[a−d]m it can
become anything that starts and ends with m and has any character a to d inbetween. For example,
these would work: mam, mbm, mcm, mdm. This kind of wildcard specifies an "or" relationship (you
only need one to match).
{ } (curly brackets)
terms are separated by commas and each term must be the name of something or a wildcard. This
wildcard will copy anything that matches either wildcard(s), or exact name(s) (an "or" relationship,
one or the other).
For example, this would be valid:
cp {*.doc,*.pdf} ~
This will copy anything ending with .doc or .pdf to the users home directory. Note that spaces are not
allowed after the commas (or anywhere else).
[!]
This construct is similar to the [ ] construct, except rather than matching any characters inside the
brackets, it'll match any character, as long as it is not listed between the [ and ]. This is a logical NOT.
For example rm myfile[!9] will remove all myfiles* (ie. myfiles1, myfiles2 etc) but won't remove a
file with the number 9 anywhere within it's name.
\ (backslash)
is used as an "escape" character, i.e. to protect a subsequent special character. Thus, "\\" searches for a
backslash. Note you may need to use quotation marks and backslash(es).
20.4.2. Regular Expressions
Regular expressions are a type of globbing pattern used when working with text. They are used for any form
of manipulation of multiple parts of text and by various programming languages that work with text. For more
information on regular expressions refer to the manual page or try an online tutorial, for example IBM
Developerworks using regular expressions. For the manual page type:
Chapter 20. Mini−Guides
83GNU/Linux Command−Line Tools Summary
Type:
man 7 regex
Regular expressions can be used by
Regular Expressions are used by grep (and can be used) by find and many other programs.
Tip
If your regular expressions don't seem to be working then you probably need to use single quotation
marks over the sentence and then use backslashes on every single special character.
. (dot)
will match any single character, equivalent to ? (question mark) in standard wildcard expressions.
Thus, "m.a" matches "mpa" and "mea" but not "ma" or "mppa".
\ (backslash)
is used as an "escape" character, i.e. to protect a subsequent special character. Thus, "\\" searches for a
backslash. Note you may need to use quotation marks and backslash(es).
.* (dot and asterisk)
is used to match any string, equivalent to * in standard wildcards.
* (asterisk)
the proceeding item is to be matched zero or more times. ie. n* will match n, nn, nnnn, nnnnnnn but
not na or any other character.
^ (caret)
means "the beginning of the line". So "^a" means find a line starting with an "a".
$ (dollar sign)
means "the end of the line". So "a$" means find a line ending with an "a".
For example, this command searches the file myfile for lines starting with an "s" and ending with an
"n", and prints them to the standard output (screen):
cat myfile | grep '^s.*n$'
[ ] (square brackets)
specifies a range. If you did m[a,o,u]m it can become: mam, mum, mom if you did: m[a−d]m it can
become anything that starts and ends with m and has any character a to d inbetween. For example,
these would work: mam, mbm, mcm, mdm. This kind of wildcard specifies an "or" relationship (you
only need one to match).
|
This wildcard makes a logical OR relationship between wildcards. This way you can search for
something or something else (possibly using two different regular expressions). You may need to add
a '\' (backslash) before this command to work, because the shell may attempt to interpret this as a
pipe.
[^]
This is the equivalent of [!] in standard wildcards. This performs a logical "not". This will match
anything that is not listed within those square brackets. For example, rm myfile[^9] will remove all
myfiles* (ie. myfiles1, myfiles2 etc) but won't remove a file with the number 9 anywhere within it's
name.
Chapter 20. Mini−Guides
84GNU/Linux Command−Line Tools Summary
20.4.3.
Useful categories of characters (as defined by the POSIX standard)
This information has been taken from the grep info page with a tiny amount of editing, see [10] in the
Bibliography for further information.
• [:upper:] uppercase letters
• [:lower:] lowercase letters
• [:alpha:] alphabetic (letters) meaning upper+lower (both uppercase and lowercase letters)
• [:digit:] numbers in decimal, 0 to 9
• [:alnum:] alphanumeric meaning alpha+digits (any uppercase or lowercase letters or any decimal
digits)
• [:space:] whitespace meaning spaces, tabs, newlines and similar
• [:graph:] graphically printable characters excluding space
• [:print:] printable characters including space
• [:punct:] punctuation characters meaning graphical characters minus alpha and digits
• [:cntrl:] control characters meaning non−printable characters
• [:xdigit:] characters that are hexadecimal digits.
These are used with
The above commands will work with most tools which work with text (for example: tr).
For example (advanced example), this command scans the output of the dir command, and prints lines
containing a capital letter followed by a digit:
ls −l | grep '[[:upper:]][[:digit:]]'
The command greps for [upper_case_letter][any_digit], meaning any uppercase letter followed by any digit. If
you remove the [ ] (square brackets) in the middle it would look for an uppercase letter or a digit, because it
would become [upper_case_letter any_digit]
Chapter 20. Mini−Guides
85Appendix A. Appendix
A.1. Finding Packages/Tools
A.1.1. Finding more useful tools
If you are looking to find more tools, the GNU project (GNU's Not Unix) maintains a directory, a website
listing categorized links to various free−software tools (which they consider useful) called the GNU
Directory.
Also try sites such as Sweet Code which offer mailing lists of useful tools which they find.
You may also try looking at the most highly rated, most active or most downloaded programs at SourceForge
and FreshMeat.
A.1.2. Finding a particular tool(s)
Many of the tools listed in this guide are part of a package of tools, such as diffutils which contains the various
tools used to find differences between files, such as diff, sdiff, diff3, cmp. Most small tools are bundled
together in this fashion. Most major distribution's will offer a search function to help you search the packages
by file, you can of course do this via the command−line interface or a GUI.
If you need to search the distribution's available packages via the command−line, the method will vary
depending on the distribution you are using, see the subsections below or consult your distribution's
documentation (or of course the internet):
A.1.2.1. Mandriva (urpm* commands, rpm based)
To find where a particular file came from use urpmf.
Command syntax:
urpmf file_name
The results are often overwhelming as this particular command will take a string and list every file of every
package in it's database that contains the particular keyword (ie. both uninstalled and installed packages). To
refine the results you may want to add a pipe to it and send it through grep −w file_name (the −w option will
only show you only exact (whole word) matches). How you would do this is shown below:
urpmf file_name | grep −w file_name
For more information on the urpm* commands, please refer to the tip towards the end of this section: Section
20.1.
A.1.2.2. Red Hat (rpm)
To find which package a particular file came from use rpm with the −qf option.
Command syntax:
Appendix A. Appendix
86GNU/Linux Command−Line Tools Summary
rpm −qf /path/to/the/file
This will find which package the file came from. You need to use rpm −qf not with a keyword but with the
location of the actual file. To find more information on the particular package listed use rpm with the −qi
option.
Command syntax:
rpm −qi package_name
Note that the package name is the name of the package without the .arch.rpm (often .i386.rpm) extension on
the end.
For more information on the usage of rpm, please refer to this section Section 20.1.
A.1.2.3. Debian (deb)
To find where a particular file came from use dpkg with the −S option.
There are two ways to do this:
dpkg −S file_name
or:
dpkg −S /path/to/file
You may also like to try (if it's installed, it's generally a lot faster than the dpkg search):
dlocate −S file_name
For more information on dpkg and dlocate please refer to the relevant manual pages and online sources of
information.
A.1.3. Finding package(s)
Packages can be found via the internet utilizing sites such as:
• RPMFind for RPM based packages.
• Debian Package Listfor deb packages.
• RPMSeek, this site intends to index Debian packages as well as RPM.
• TuxFinder where you can search for deb, rpm, tgz, iso and even documentation.
Also try the author's homepage and large sites such as FreshMeat and SourceForge.
A.2. Further Reading
A.2.1. General Further Reading
This guide is simply a short summary of some of the available tools of a GNU/Linux based distribution. If
you find a particular command interesting and useful, you can look up the on−line manual, or/and info page to
learn more about how to use this command or check the HOWTO's online at Linux Documentation Project.
Appendix A. Appendix
87GNU/Linux Command−Line Tools Summary
The manual/info pages will always be an up−to−date source of information on how to use the command. Also
have a look at the documentation installed on your distribution, its normally located in /usr/share/doc.
Check the references section of this document, Bibliography, for some links to useful resources which were
used in the creation of this document.
Of course if you are having trouble with a particular command try using a search engine such as Google or
AllTheWeb, or search the usenet groups Google Groups. If you still can't find a solution, look for a mailing
list which is related to the topic you are having trouble with, or try a forum which is related to the topic.
Readers who would like another reference to commands may want to have at:
• Commands from "Linux in a Nutshell 3rd Edition" as published by Orielly −−− this document was
not used in the creation of this guide, however it is a comprehensive guide to GNU/Linux Commands
(it's an indexed listing). It lists and explains 379 commands taken from Linux in a Nutshell 3rd
Edition.
• The Linux Newbie Admin guide list of commands −−− another list of commands from an excellent
system administration guide for GNU/Linux.
• Comptechdoc's Linux Command Quickreference Guide −−− a good list of commands but only one
line explanations of what they actually do...
• SS64.com list of bash commands −−− this page lists commands and links to their man pages online.
If you wish to learn more about GNU/Linux on a variety of subjects also see the various online (free) tutorials
published by IBM Developerworks.
If you are looking for a general reference to everything GNU/Linux try the Rute User's Tutorial and
Exposition. Or take a look at your distributions documentation, Debian maintains comprehensive
documentation, debian documentation site.
A.2.2. Specific Further reading
The most obvious place to look for documentation is to find the homepage of the program. Although
sometimes there are other sources of information such as the Linux Documentation Project or various online
HOWTO's or similar guides. They are usually easily found using search engines. Try large sites such as
(ibiblio) the publics library and digital archive or TuxFinder which can search for documentation.
Below is a very short list of some further reading for a few of the more complex tools:
• OpenSSH OpenSSH manual page
• vim The Vim HOWTO
• emacs The Emacs HOWTO
• RPM RPM HOWTO
• Samba Samba documentation site
• ImageMagick ImageMagick command−line tools
• BASH BASH reference manual
• Bash scripting Advanced bash scripting guide
• rsync rsync homepage
Appendix A. Appendix
88GNU/Linux Command−Line Tools Summary
A.2.2.1. The UNIX tools philosophy further reading
• An article within the coreutils documentation (installed on nearly every GNU/Linux distro) provides
further explanation of the UNIX tools philosophy. To access the article simply type:
info coreutils
Then type / (slash; runs a search) then the string "toolbox" (toolbox is the string to be searched for)
then hit enter (follow hyperlink) and then go down to the "Toolbox introduction" section and hit enter.
This will give you access to the article.
• Other articles online include an: Orielly article on the UNIX tools philosophy.
• A listing of important qualities of the philosophy.
• Linux Exposed The Unix Philosophy Explained
• Or an entire book which is considered the authoritative guide toward understanding the philosophy
behind how the UNIX system was built. The book is called "The Unix Philosophy" ISBN:
1555581234.
A.2.3. Online Manual And Info Pages
While manual pages and info pages are usually installed with the program itself they are also available online
if you need them, the listed links are usually listed by category or by the man page sections.
A.2.3.1. Online Manual Page Websites:
• Manual Page Resource Links (from the Linux Documentation Project)
• A RedHat Based Searchable Index
• Another Searchable Index
• Another Manual Page Site (searchable)
A.2.3.2. Downloadable Manual Pages:
• Downloadable Man Pages hosted by Ibiblio
A.2.3.3. Online Info Page Website:
• GNU Manual's
A.3. GNU Free Documentation License
GNU Free Documentation License
Version 1.1, March 2000
Copyright (C) 2000 Free Software Foundation, Inc. 59 Temple Place, Suite 330, Boston, MA 02111−1307
USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is
not allowed.
Appendix A. Appendix
89GNU/Linux Command−Line Tools Summary
A.3.1. PREAMBLE
The purpose of this License is to make a manual, textbook, or other written document "free" in the sense of
freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it,
either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a
way to get credit for their work, while not being considered responsible for modifications made by others.
This License is a kind of "copyleft", which means that derivative works of the document must themselves be
free in the same sense. It complements the GNU General Public License, which is a copyleft license designed
for free software.
We have designed this License in order to use it for manuals for free software, because free software needs
free documentation: a free program should come with manuals providing the same freedoms that the software
does. But this License is not limited to software manuals; it can be used for any textual work, regardless of
subject matter or whether it is published as a printed book. We recommend this License principally for works
whose purpose is instruction or reference.
A.3.2. APPLICABILITY AND DEFINITIONS
This License applies to any manual or other work that contains a notice placed by the copyright holder saying
it can be distributed under the terms of this License. The "Document", below, refers to any such manual or
work. Any member of the public is a licensee, and is addressed as "you".
A "Modified Version" of the Document means any work containing the Document or a portion of it, either
copied verbatim, or with modifications and/or translated into another language.
A "Secondary Section" is a named appendix or a front−matter section of the Document that deals exclusively
with the relationship of the publishers or authors of the Document to the Document's overall subject (or to
related matters) and contains nothing that could fall directly within that overall subject. (For example, if the
Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The
relationship could be a matter of historical connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding them.
The "Invariant Sections" are certain Secondary Sections whose titles are designated, as being those of
Invariant Sections, in the notice that says that the Document is released under this License.
The "Cover Texts" are certain short passages of text that are listed, as Front−Cover Texts or Back−Cover
Texts, in the notice that says that the Document is released under this License.
A "Transparent" copy of the Document means a machine−readable copy, represented in a format whose
specification is available to the general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for
drawings) some widely available drawing editor, and that is suitable for input to text formatters or for
automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise
Transparent file format whose markup has been designed to thwart or discourage subsequent modification by
readers is not Transparent. A copy that is not "Transparent" is called "Opaque".
Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input
format, LaTeX input format, SGML or XML using a publicly available DTD, and standard−conforming
simple HTML designed for human modification. Opaque formats include PostScript, PDF, proprietary
Appendix A. Appendix
90GNU/Linux Command−Line Tools Summary
formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD
and/or processing tools are not generally available, and the machine−generated HTML produced by some
word processors for output purposes only.
The "Title Page" means, for a printed book, the title page itself, plus such following pages as are needed to
hold, legibly, the material this License requires to appear in the title page. For works in formats which do not
have any title page as such, "Title Page" means the text near the most prominent appearance of the work's
title, preceding the beginning of the body of the text.
A.3.3. VERBATIM COPYING
You may copy and distribute the Document in any medium, either commercially or noncommercially,
provided that this License, the copyright notices, and the license notice saying this License applies to the
Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this
License. You may not use technical measures to obstruct or control the reading or further copying of the
copies you make or distribute. However, you may accept compensation in exchange for copies. If you
distribute a large enough number of copies you must also follow the conditions in section 3.
You may also lend copies, under the same conditions stated above, and you may publicly display copies.
A.3.4. COPYING IN QUANTITY
If you publish printed copies of the Document numbering more than 100, and the Document's license notice
requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front−Cover Texts on the front cover, and Back−Cover Texts on the back cover. Both covers must also
clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with
all words of the title equally prominent and visible. You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy
these conditions, can be treated as verbatim copying in other respects.
If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as
many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.
If you publish or distribute Opaque copies of the Document numbering more than 100, you must either
include a machine−readable Transparent copy along with each Opaque copy, or state in or with each Opaque
copy a publicly−accessible computer−network location containing a complete Transparent copy of the
Document, free of added material, which the general network−using public has access to download
anonymously at no charge using public−standard network protocols. If you use the latter option, you must
take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location until at least one year after the last time
you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.
It is requested, but not required, that you contact the authors of the Document well before redistributing any
large number of copies, to give them a chance to provide you with an updated version of the Document.
A.3.5. MODIFICATIONS
You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3
above, provided that you release the Modified Version under precisely this License, with the Modified
Appendix A. Appendix
91GNU/Linux Command−Line Tools Summary
Version filling the role of the Document, thus licensing distribution and modification of the Modified Version
to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:
A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those
of previous versions (which should, if there were any, be listed in the History section of the Document). You
may use the same title as a previous version if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the
modifications in the Modified Version, together with at least five of the principal authors of the Document (all
of its principal authors, if it has less than five).
C. State on the Title page the name of the publisher of the Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice giving the public permission to use the
Modified Version under the terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the
Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section entitled "History", and its title, and add to it an item stating at least the title, year, new
authors, and publisher of the Modified Version as given on the Title Page. If there is no section entitled
"History" in the Document, create one stating the title, year, authors, and publisher of the Document as given
on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the
Document, and likewise the network locations given in the Document for previous versions it was based on.
These may be placed in the "History" section. You may omit a network location for a work that was published
at least four years before the Document itself, or if the original publisher of the version it refers to gives
permission.
K. In any section entitled "Acknowledgements" or "Dedications", preserve the section's title, and preserve in
the section all the substance and tone of each of the contributor acknowledgements and/or dedications given
therein.
L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section
numbers or the equivalent are not considered part of the section titles.
M. Delete any section entitled "Endorsements". Such a section may not be included in the Modified Version.
N. Do not retitle any existing section as "Endorsements" or to conflict in title with any Invariant Section.
If the Modified Version includes new front−matter sections or appendices that qualify as Secondary Sections
and contain no material copied from the Document, you may at your option designate some or all of these
sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's
license notice. These titles must be distinct from any other section titles.
Appendix A. Appendix
92GNU/Linux Command−Line Tools Summary
You may add a section entitled "Endorsements", provided it contains nothing but endorsements of your
Modified Version by various parties−−for example, statements of peer review or that the text has been
approved by an organization as the authoritative definition of a standard.
You may add a passage of up to five words as a Front−Cover Text, and a passage of up to 25 words as a
Back−Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of
Front−Cover Text and one of Back−Cover Text may be added by (or through arrangements made by) any one
entity. If the Document already includes a cover text for the same cover, previously added by you or by
arrangement made by the same entity you are acting on behalf of, you may not add another; but you may
replace the old one, on explicit permission from the previous publisher that added the old one.
The author(s) and publisher(s) of the Document do not by this License give permission to use their names for
publicity for or to assert or imply endorsement of any Modified Version.
A.3.6. COMBINING DOCUMENTS
You may combine the Document with other documents released under this License, under the terms defined
in section 4 above for modified versions, provided that you include in the combination all of the Invariant
Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined
work in its license notice.
The combined work need only contain one copy of this License, and multiple identical Invariant Sections may
be replaced with a single copy. If there are multiple Invariant Sections with the same name but different
contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the
original author or publisher of that section if known, or else a unique number. Make the same adjustment to
the section titles in the list of Invariant Sections in the license notice of the combined work.
In the combination, you must combine any sections entitled "History" in the various original documents,
forming one section entitled "History"; likewise combine any sections entitled "Acknowledgements", and any
sections entitled "Dedications". You must delete all sections entitled "Endorsements."
A.3.7. COLLECTIONS OF DOCUMENTS
You may make a collection consisting of the Document and other documents released under this License, and
replace the individual copies of this License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for verbatim copying of each of the
documents in all other respects.
You may extract a single document from such a collection, and distribute it individually under this License,
provided you insert a copy of this License into the extracted document, and follow this License in all other
respects regarding verbatim copying of that document.
A.3.8. AGGREGATION WITH INDEPENDENT WORKS
A compilation of the Document or its derivatives with other separate and independent documents or works, in
or on a volume of a storage or distribution medium, does not as a whole count as a Modified Version of the
Document, provided no compilation copyright is claimed for the compilation. Such a compilation is called an
"aggregate", and this License does not apply to the other self−contained works thus compiled with the
Document, on account of their being thus compiled, if they are not themselves derivative works of the
Appendix A. Appendix
93GNU/Linux Command−Line Tools Summary
Document.
If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document
is less than one quarter of the entire aggregate, the Document's Cover Texts may be placed on covers that
surround only the Document within the aggregate. Otherwise they must appear on covers around the whole
aggregate.
A.3.9. TRANSLATION
Translation is considered a kind of modification, so you may distribute translations of the Document under the
terms of section 4. Replacing Invariant Sections with translations requires special permission from their
copyright holders, but you may include translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections. You may include a translation of this License provided that you
also include the original English version of this License. In case of a disagreement between the translation and
the original English version of this License, the original English version will prevail.
A.3.10. TERMINATION
You may not copy, modify, sublicense, or distribute the Document except as expressly provided for under this
License. Any other attempt to copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License. However, parties who have received copies, or rights,
from you under this License will not have their licenses terminated so long as such parties remain in full
compliance.
A.3.11. FUTURE REVISIONS OF THIS LICENSE
The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License
from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns. See Copyleft.
Each version of the License is given a distinguishing version number. If the Document specifies that a
particular numbered version of this License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or of any later version that has been
published (not as a draft) by the Free Software Foundation. If the Document does not specify a version
number of this License, you may choose any version ever published (not as a draft) by the Free Software
Foundation.
Bibliography
(1) Tony Steidler−Dennison, Lockergnome Penguin Shell Series, Lockergnome.
Responsible for many of the commands listed in this document. In particular Lockergnome inspired much of
the wildcards section: Section 20.4
(2) Brandon Rhodes, Linux Network Commands Page.
Appendix A. Appendix
94GNU/Linux Command−Line Tools Summary
Responsible for parts of the network commands section: Chapter 13
(3) Michael Stutz, Linux Cookbook Homepage, No Starch Press.
Many of these commands have come from the Linux Cookbook (version 1.2). I highly recommend this book
to any novice or intermediate GNU/Linux user, have a look at it online, and then of course buy it :).
(4) Michael Jordan, Linux Online Classroom, Linux Online.
Some very small sections of this document were taken from the Beginner's course on the Linux Online
Website.
(5) man and info pages.
The man and info pages of various tools listed in this document have been used as a resource to assist in the
creation of this document. They are a useful resource of up−to−date information on a program and should be
consulted when you require information about a particular tool.
(6) Focus On Unix −− Unix.about.com.
Some of the tutorials under the power commands section of the unix.about.com site were used in the
construction of this guide. In particular parts of the xargs command: Chapter 8 and parts of the cut command:
Section 11.4 were used from their tutorials.
(7) MandrakeSoft Command Line Manual, MandrakeSoft.
The Command Line Manual developed for Mandake Linux 9.0 was used in the creation of this document. A
small section (in regard to command−line completion) was used from this document. If you are running
mandrake you will most likely find this guide here.
(8) MandrakeSoft Starter Guide, MandrakeSoft.
The MandrakeSoft Starter Guide, a guide developed for Mandake Linux 9.0 was used in the creation of this
document. A small section (in regard to how to recover from a system freeze) was used from this document. If
you are running a mandrake system you will most likely find the document here.
(9) Hrvoje Niksic, Wget Manual page, Free Software Foundation.
A section of the wget manual page was used in this guide, from this page, Wget Manual page. In particular
relating to downloading multiple files while using the http protocol.
(10) Grep, Free Software Foundation.
Appendix A. Appendix
95GNU/Linux Command−Line Tools Summary
Both wildcards subsections are based off the grep manual and info pages. The Useful Categories of Characters
(as defined from the POSIX standard) was taken from the grep info page.
(11) Marc Ewing, Jeff Johnson, and Erik Troan, RPM Manual Page, Red Hat.
A small section of the RPM manual page was used in the creation of the RPM verifying subsection, without
any kind of editing.
(12) Markku Rossi, Enscript Manual Page, Free Software Foundation.
The examples for enscript are based off those shown in the enscript manual page.
(13) Paul Vixie, Cron Manual Page, 4th Berkeley Distribution.
The information from the crontab section (below and including the table) was taken (unedited, but with small
additions) from the crontab manual pages. Type man 1 crontab and man 5 crontab to access the 2 different
manual pages.
(14) IBM Developerworks.
Some parts of the IBM Developerworks tutorials have been used in the creation of this document. IBM
Developerworks frequently publishes new tutorials on a variety of subjects, visit the IBM Developerworks
Linux site (see link above) for more information on their GNU/Linux tutorials.
(15) Suso Banderas, Num−utils homepage.
The num−utils manual pages were used in the creation of the maths section. In particular all the description of
the num−utils tools are based off the manual pages on the num−utils homepage.
(16) Carla Schroder, Archive of the LinuxChix posting.
This particular LinuxChix posting was made through a mailing list discussion about cron under the TechTalk
mailing list. The posters homepage is http://www.tuxcomputing.com.
(17) Joe Barr, CLI for noobies: import, display, mogrify.
This particular article by Joe Barr was used in the description of the mogrify tool in particular the example on
creating thumbnails.
(18) Kyle Rankin, Please, For the Love of All That's Recoverable, Shred Your Hard Drive!.
This particular article by Kyle Rankin was used (only a paragraph) for information on the shred command.
Appendix A. Appendix
96
THE E XPERT ’S VOICE® IN WEB DEVELOPMENT
Learn
PHP 7
Object-Oriented Modular Programming
using HTML5, CSS3, JavaScript, XML, JSON,
and MySQL
—
Steve Prettyman
www.allitebooks.comLearn PHP 7
Object-Oriented Modular Programming
using HTML5, CSS3, JavaScript, XML,
JSON, and MySQL
Steve Prettyman
www.allitebooks.comLearn PHP 7: Object-Oriented Modular Programming using HTML5, CSS3, JavaScript, XML,
JSON, and MySQL
Steve Prettyman				
Stone Mountain, Georgia USA					
ISBN-13 (pbk): 978-1-4842-1729-0		
DOI 10.1007/978-1-4842-1730-6
ISBN-13 (electronic): 978-1-4842-1730-6
Library of Congress Control Number: 2015960461
Copyright © 2016 by Steve Prettyman
This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material
is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting,
reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval,
electronic adaptation, computer software, or by similar or dissimilar methodology now known or hereafter
developed. Exempted from this legal reservation are brief excerpts in connection with reviews or scholarly
analysis or material supplied specifically for the purpose of being entered and executed on a computer system,
for exclusive use by the purchaser of the work. Duplication of this publication or parts thereof is permitted only
under the provisions of the Copyright Law of the Publisher’s location, in its current version, and permission for use
must always be obtained from Springer. Permissions for use may be obtained through RightsLink at the Copyright
Clearance Center. Violations are liable to prosecution under the respective Copyright Law.
Trademarked names, logos, and images may appear in this book. Rather than use a trademark symbol with every
occurrence of a trademarked name, logo, or image we use the names, logos, and images only in an editorial fashion
and to the benefit of the trademark owner, with no intention of infringement of the trademark.
The use in this publication of trade names, trademarks, service marks, and similar terms, even if they are not
identified as such, is not to be taken as an expression of opinion as to whether or not they are subject to proprietary
rights.
While the advice and information in this book are believed to be true and accurate at the date of publication, neither
the authors nor the editors nor the publisher can accept any legal responsibility for any errors or omissions that may
be made. The publisher makes no warranty, express or implied, with respect to the material contained herein.
Managing Director: Welmoed Spahr
Lead Editor: Steve Anglin
Editorial Board: Steve Anglin, Louise Corrigan, Jonathan Gennick, Robert Hutchinson, Michelle Lowman,
James Markham, Susan McDermott, Matthew Moodie, Jeffrey Pepper, Douglas Pundick,
Ben Renow-Clarke, Gwenan Spearing
Coordinating Editor: Mark Powers
Copy Editor: Kezia Endsley
Compositor: SPi Global
Indexer: SPi Global
Artist: SPi Global
Distributed to the book trade worldwide by Springer Science+Business Media New York, 233 Spring Street,
6th Floor, New York, NY 10013. Phone 1-800-SPRINGER, fax (201) 348-4505, e-mail orders-ny@springer-sbm.com,
or visit www.springeronline.com. Apress Media, LLC is a California LLC and the sole member (owner) is Springer
Science + Business Media Finance Inc (SSBM Finance Inc). SSBM Finance Inc is a Delaware corporation.
For information on translations, please e-mail rights@apress.com, or visit www.apress.com.
Apress and friends of ED books may be purchased in bulk for academic, corporate, or promotional use. eBook
versions and licenses are also available for most titles. For more information, reference our Special Bulk
Sales–eBook Licensing web page at www.apress.com/bulk-sales.
Any source code or other supplementary material referenced by the author in this text is available to readers
at www.apress.com. For additional information about how to locate and download your book’s source code, go
to www.apress.com/source-code/. Readers can also access source code at SpringerLink in the Supplementary
Material section for each chapter.
Printed on acid-free paper
www.allitebooks.comContents at a Glance
About the Author����������������������������������������������������������������������������������������������������� xi
Acknowledgments������������������������������������������������������������������������������������������������� xiii
Introduction�������������������������������������������������������������������������������������������������������������xv
■Chapter
■
1: An Introduction to PHP 7���������������������������������������������������������������������� 1
■Chapter
■
2: Interfaces, Platforms, Containers, and Three-Tier Programming������ 39
■Chapter
■
3: Modular Programming����������������������������������������������������������������������� 77
■Chapter
■
4: Secured User Interfaces������������������������������������������������������������������� 109
■Chapter
■
5: Handling and Logging Exceptions���������������������������������������������������� 153
■Chapter
■
6: Data Objects������������������������������������������������������������������������������������� 187
■Chapter
■
7: Authentication���������������������������������������������������������������������������������� 223
■Chapter
■
8: Multifunctional Interfaces���������������������������������������������������������������� 249
Index��������������������������������������������������������������������������������������������������������������������� 289
iii
www.allitebooks.comContents
About the Author����������������������������������������������������������������������������������������������������� xi
Acknowledgments������������������������������������������������������������������������������������������������� xiii
Introduction�������������������������������������������������������������������������������������������������������������xv
■Chapter
■
1: An Introduction to PHP 7���������������������������������������������������������������������� 1
Chapter Objectives/Student Learning Outcomes������������������������������������������������������������� 1
PHP 5.5+, PHP 7+, and PHP.NET�������������������������������������������������������������������������������������� 1
PHP 5.6+ and PHP 7+����������������������������������������������������������������������������������������������������������������������������� 8
Do It�������������������������������������������������������������������������������������������������������������������������������������������������������� 8
PHP, JavaScript, CSS, HTML, and Apache Web Server������������������������������������������������������ 9
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 13
PHP, Apache, and MySQL������������������������������������������������������������������������������������������������ 14
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 18
Putting it All Together—PHP, Apache, and MySQL���������������������������������������������������������� 18
EasyPHP������������������������������������������������������������������������������������������������������������������������������������������������ 18
XAMPP�������������������������������������������������������������������������������������������������������������������������������������������������� 22
Microsoft Internet Information Server�������������������������������������������������������������������������������������������������� 24
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 25
Testing Your Environment����������������������������������������������������������������������������������������������� 25
Testing Your Administration Environment��������������������������������������������������������������������������������������������� 25
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 27
Testing Your PHP Environment�������������������������������������������������������������������������������������������������������������� 28
EasyPHP’s Code Classroom������������������������������������������������������������������������������������������������������������������ 30
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 30
v
www.allitebooks.com■ Contents
Alias Directories������������������������������������������������������������������������������������������������������������� 30
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 33
Notepad++, Editors, and Code Testers��������������������������������������������������������������������������� 33
Notepad++������������������������������������������������������������������������������������������������������������������������������������������� 34
Other Editors����������������������������������������������������������������������������������������������������������������������������������������� 34
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 35
Chapter Terms���������������������������������������������������������������������������������������������������������������� 35
Chapter Questions and Projects������������������������������������������������������������������������������������� 35
■Chapter
■
2: Interfaces, Platforms, Containers, and Three-Tier Programming������ 39
Chapter Objectives/Student Learning Outcomes����������������������������������������������������������� 39
PHP Platforms and Containers��������������������������������������������������������������������������������������� 39
PHP PC Applications����������������������������������������������������������������������������������������������������������������������������� 40
PHP Smart Phone Applications������������������������������������������������������������������������������������������������������������� 40
PHP Facebook and Other Social Applications��������������������������������������������������������������������������������������� 40
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 41
PHP, AJAX, and CSS—Web Applications����������������������������������������������������������������������������������������������� 47
PHP, AJAX, and CSS—Smart Phone Web Applications������������������������������������������������������������������������� 52
PHP Three-Tier Architecture������������������������������������������������������������������������������������������� 57
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 58
Interface Tier���������������������������������������������������������������������������������������������������������������������������������������� 59
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 60
Business Rules Tier������������������������������������������������������������������������������������������������������������������������������ 61
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 62
Data Tier����������������������������������������������������������������������������������������������������������������������������������������������� 63
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 64
Putting It All Together��������������������������������������������������������������������������������������������������������������������������� 64
Case Study�������������������������������������������������������������������������������������������������������������������������������������������� 65
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 69
vi
www.allitebooks.com■ Contents
MVC and Dependency Injection�������������������������������������������������������������������������������������� 70
Chapter Terms���������������������������������������������������������������������������������������������������������������� 70
Chapter Questions and Projects������������������������������������������������������������������������������������� 71
■Chapter
■
3: Modular Programming����������������������������������������������������������������������� 77
Chapter Objectives/Student Learning Outcomes����������������������������������������������������������� 77
PHP Libraries, Extensions, Classes, and Objects������������������������������������������������������������ 77
PHP Extensions�������������������������������������������������������������������������������������������������������������� 78
Classes and Objects����������������������������������������������������������������������������������������������������������������������������� 79
Creating a PHP Class������������������������������������������������������������������������������������������������������ 79
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 84
Return Method��������������������������������������������������������������������������������������������������������������� 84
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 86
Set Methods������������������������������������������������������������������������������������������������������������������� 87
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 93
Get Methods������������������������������������������������������������������������������������������������������������������� 93
Do It������������������������������������������������������������������������������������������������������������������������������������������������������ 96
Constructor Method�������������������������������������������������������������������������������������������������������� 96
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 101
Chapter Terms�������������������������������������������������������������������������������������������������������������� 101
Chapter Questions and Projects����������������������������������������������������������������������������������� 102
■Chapter
■
4: Secured User Interfaces������������������������������������������������������������������� 109
Chapter Objectives/Student Learning Outcomes��������������������������������������������������������� 109
Secured User Interaction���������������������������������������������������������������������������������������������� 110
HTML5 Form Validation������������������������������������������������������������������������������������������������ 110
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 113
JavaScript Validation���������������������������������������������������������������������������������������������������� 114
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 120
vii
www.allitebooks.com■ Contents
PHP Filtering����������������������������������������������������������������������������������������������������������������� 120
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 123
Additional HTML Input Security������������������������������������������������������������������������������������ 123
HTML5 Select List Box and Radio Buttons������������������������������������������������������������������������������������������ 124
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 128
Validating Input with an XML File������������������������������������������������������������������������������������������������������� 128
Dependency Injection��������������������������������������������������������������������������������������������������� 135
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 147
Chapter Terms�������������������������������������������������������������������������������������������������������������� 147
Chapter Questions and Projects����������������������������������������������������������������������������������� 148
■Chapter
■
5: Handling and Logging Exceptions���������������������������������������������������� 153
Chapter Objectives/Student Learning Outcomes��������������������������������������������������������� 153
Handling Exceptions����������������������������������������������������������������������������������������������������� 153
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 160
Exception and Error Handling vs. If/Else Conditions���������������������������������������������������� 160
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 167
Logging Exceptions������������������������������������������������������������������������������������������������������ 167
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 173
Reading Log and Text Files������������������������������������������������������������������������������������������� 174
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 182
Chapter Terms�������������������������������������������������������������������������������������������������������������� 182
Chapter Questions and Projects����������������������������������������������������������������������������������� 183
■Chapter
■
6: Data Objects������������������������������������������������������������������������������������� 187
Chapter Objectives/Student Learning Outcomes��������������������������������������������������������� 187
The Data Class������������������������������������������������������������������������������������������������������������� 187
JSON Data�������������������������������������������������������������������������������������������������������������������� 197
MySQL Data������������������������������������������������������������������������������������������������������������������ 197
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 199
viii
www.allitebooks.com■ Contents
Backup and Recovery��������������������������������������������������������������������������������������������������� 199
JSON Backup and Recovery����������������������������������������������������������������������������������������� 211
MySQL Backup and Recovery�������������������������������������������������������������������������������������� 211
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 214
Connecting the Data Tier���������������������������������������������������������������������������������������������� 214
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 219
Chapter Terms�������������������������������������������������������������������������������������������������������������� 220
Chapter Questions and Projects����������������������������������������������������������������������������������� 220
■Chapter
■
7: Authentication���������������������������������������������������������������������������������� 223
Chapter Objectives/Student Learning Outcomes��������������������������������������������������������� 223
Verification and Sessions��������������������������������������������������������������������������������������������� 223
JSON Data�������������������������������������������������������������������������������������������������������������������� 232
MySQL Data������������������������������������������������������������������������������������������������������������������ 232
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 233
Registration������������������������������������������������������������������������������������������������������������������ 233
JSON Data�������������������������������������������������������������������������������������������������������������������� 236
MySQL Data������������������������������������������������������������������������������������������������������������������ 237
Logging In��������������������������������������������������������������������������������������������������������������������� 237
JSON Data�������������������������������������������������������������������������������������������������������������������� 242
MySQL Data������������������������������������������������������������������������������������������������������������������ 242
Change Password��������������������������������������������������������������������������������������������������������� 243
JSON Data�������������������������������������������������������������������������������������������������������������������� 246
MySQL Data������������������������������������������������������������������������������������������������������������������ 246
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 246
Chapter Terms�������������������������������������������������������������������������������������������������������������� 247
Chapter Questions and Projects����������������������������������������������������������������������������������� 247
ix
www.allitebooks.com■ Contents
■Chapter
■
8: Multifunctional Interfaces���������������������������������������������������������������� 249
Chapter Objectives/Student Learning Outcomes��������������������������������������������������������� 249
The Complete Application��������������������������������������������������������������������������������������������� 249
Data Handling Using JavaScript����������������������������������������������������������������������������������� 249
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 263
Updating, Deleting, and Inserting in the Interface Tier������������������������������������������������� 263
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 270
Updating, Deleting, and Inserting in the Business Rules Tier��������������������������������������� 270
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 276
Final Touches���������������������������������������������������������������������������������������������������������������� 276
Do It���������������������������������������������������������������������������������������������������������������������������������������������������� 284
ABC Canine Shelter Reservation System Logical Design��������������������������������������������� 285
Limitations������������������������������������������������������������������������������������������������������������������������������������������ 285
Chapter Terms�������������������������������������������������������������������������������������������������������������� 287
Chapter Questions and Projects��������������������������������������������������������������������������������������������������������� 287
Index��������������������������������������������������������������������������������������������������������������������� 289
x
www.allitebooks.comAbout the Author
Steve Prettyman earned his Bachelor’s of Arts Degree in education from Oglethorpe University in 1979.
He quickly began his teaching career as a high school mathematics instructor while continuing his education
by earning a Master’s Degree in business information systems from Georgia State University (1985). Since
then, Steve has spent over 30 years in the IT industry. He has been an instructor at Chattahoochee Technical
College, Kennesaw State University, and Southern Polytechnic State University for almost 20 years. His
primary teaching responsibilities include programming, web design, and web application development.
xiAcknowledgments
Thank you to everyone who has helped put this book together. Special thanks to the Introduction to PHP
classes that have been the true testers and debuggers for this journey.
Special acknowledgement to all the open source developers and providers of free tutorials and training
to every Internet user who wants to learn more about programming, especially w3schools and The New
Boston.
xiiiIntroduction
Learn PHP 7: Object-Oriented Modular Programming using HTML5, CSS3, JavaScript, XML, JSON, and
MySQL is intended for use as a beginning level programming book. It is not the goal of this book to cover
advanced techniques in the current versions of the PHP programming language. Some knowledge of general
programming concepts is expected but no actual programming experience or education is assumed.
All code examples in this book are compatible with PHP 7. Most examples are compatible with PHP 5.6.
The newest (as of the publication date) methods (functions) available in PHP have been used to provide
the reader with the most current coding techniques. The examples use core methods provided in the PHP
language. PHP includes many additional methods to accomplish similar tasks. The reader may, and should,
research additional ways of improving security, performance, and other techniques. It is the goal of this book
to prompt users to always consider using the most secure and efficient methods of program development.
The code in this book provides some examples of using these techniques. The user should remember that
no program is 100% secure. The programmer can only strive to make an application as secure as possible. It
takes a team of developers, network personnel, security administrators, data center personnel, and others
working together to provide the safest environment.
A Different Approach
There are quite a number of PHP books on the market today. What makes this book any different than any
other?
•This book uses the concept of “learning by doing,” which shows the reader how to
develop applications with conditional statements, loops, arrays, and methods. Over
70 PHP methods (functions) are introduced and demonstrated in coding examples.
•From the very first examples, the reader is introduced to object-oriented
programming techniques. Many other books only briefly cover OO programming (if
at all) in the final chapters.
•Object-oriented set methods are used to verify and filter user input. Many other
books simply show a set method accepting data and storing it.
•A major objective of the book is to convince the reader to create all programs as
secure and efficient as possible. The newest password encryption techniques
(password_hash) are demonstrated.
•The try and catch methods are introduced to capture exceptions and some errors.
The newest versions of PHP have been created to handle exceptions and errors
using this approach. Many other books use die or other techniques to shut down a
program.
•Multi-tier program design is introduced in the early chapters. This allows the reader
to discover what logic and coding should take place in each tier. Many PHP books do
not even cover this topic.
xv■ Introduction
•The majority of the examples in the book are used to develop one main application
(ABC Canine Shelter Reservation System). As the book progresses, the application is
built from the beginning, in stages, showing the reader that application development
should be broken into stages. Only after each stage is completed and tested, can
the next stage begin. This approach works hand in hand with multi-tier design.
Additional programming exercises and a term project are provided to enhance the
understanding of development.
•The creation of user, change, and error logs are introduced. This allows the reader
to gain an understanding of how to provide backup and recovery ability to keep an
application functioning properly when security breaches or exceptions occur.
•The introduction of data objects and the data tier demonstrates to the reader the
importance of creating an application that provides the ability to change data
storage techniques and data storage location without requiring a major rewrite of the
application. XML, JSON, and MySQL examples are provided.
•A natural relationship between PHP, HTML5, CSS3, and JavaScript is demonstrated
throughout the book. This relationship is one of the major strengths of PHP.
•Throughout the book, web links are provided to point the user to additional
resources to help understand the material or to dig deeper into the subject matter.
Updates to link locations are provided on the book’s web site.
Special Note for Teachers
The design of the content of this book provides flexibility in teaching styles and approaches. Each college
and university approaches the initial education of programming concepts in different ways. This book
provides three different types of programming exercises, which allow teachers to pick and choose what
would work best in their environment. “Do It” exercises are provided in each chapter to allow the student to
gain hands-on experience with techniques shown by modifying existing examples to produce the desired
results. These exercises provide a level of confidence before the student attempts to program exercises at
the end of the chapters. In addition, a Term Project is provided that builds an application that uses the same
types of algorithms and programming techniques shown in the book.
Teaching tools, including test banks, course outline, and PowerPoint slides are available for use from
the book’s web site and from apress.com.
Code Examples, Images, and Links
Every effort has been made to catch any errors in code (and grammar). Please let us know if/when
you discover problems in this book. Please send all corrections to Steve Prettyman
(steve_prettyman@hotmail.com).
All code examples, images, and links are available for download from apress.com and the following
location. You can download code examples from either web site. Copying code from the book may cause
errors due to format requirements for publishing.
Book’s web site: www.littleoceanwaves.com/securephp/
xvi■ Introduction
Chapter Overview
Chapter 1: An Introduction to PHP 7
After completing this chapter, the student will be able to:
•Understand the difference between LAMP, WAMP, and MAMP
•Successfully install a version of LAMP, WAMP, or MAMP
•Search the Internet for troubleshooting problems
•Explain the difference between a programming language and a scripting language
•Create an error-free simple PHP program
Chapter 2: Interfaces, Platforms, Containers, Three Tier Programming
After completing this chapter, the student will be able to:
•Give examples of platforms or containers that can host PHP programs
•Create a simple, dynamic web application using PHP
•Explain three-tier design and determine what is contained in each tier
•Design a three-tier application
•Explain each step of the program development life cycle (PDLC)
•Define and explain MVC and dependency injection
Chapter 3: Modular Programming
After completing this chapter, the student will be able to:
•Create an error-free simple objected-oriented (OO) modular PHP program
•Create a PHP class and make an instance of the class (object)
•Create an OO PHP encapsulated program, including get and set methods
•Create PHP methods (functions) that accept parameters and return information
•Create PHP public and private properties (variables)
•Import existing PHP code from another file or library into a program
•Validate information received using ternary (conditional) operators
xvii■ Introduction
Chapter 4: Secure User Interfaces
After completing this chapter, the student will be able to:
•Explain why user input must be validated in the interface and business rules tiers
•Explain why user input must be filtered in the business rules tier
•Use HTML5 code to validate user input
•Use JavaScript code to validate user input
•Use PHP if statements (conditional statements) to validate and filter input
•Use foreach loops to dynamically create an HTML select box from an XML file
•Use simple arrays for filtering and validation
•Pass simple arrays into methods (functions)
•Understand how to use dependency injection to control code version changes
Chapter 5: Handling and Logging Exceptions
After completing this chapter, the student will be able to:
•Explain the difference between errors and exceptions
•Create a PHP program that can handle general exceptions
•Create a PHP program that can create, raise, and handle user exceptions
•Explain and use a switch and/or embedded if/else statement
•Create a PHP program that uses the while loop and/or the for loop
•Create a program that reads/updates a text file using a two-dimensional array
•Create a PHP program that logs exceptions and e-mails support personnel
Chapter 6: Data Objects
After completing this chapter, the student will be able to:
xviii
•Create a data class that inserts, updates, and deletes XML or JSON data
•Explain how to create a data class that updates MySQL Data using a SQL Script
•Create a PHP program that creates a change backup log
•Create a PHP program that can recover data from a previous backup
•Apply changes to create up-to-date valid information
•Use dependency injection to attach a data class to another class in the BR tier
•Create a three-tier PHP application■ Introduction
Chapter 7: Authentication
After completing this chapter, the student will be able to:
•Define sessions and explain how sessions are used for authentication
•Create a PHP program that authenticates user logon
•Create a PHP program that register users
•Create a PHP program that will allow users to change passwords
•Create a PHP program that logs invalid login attempts
Chapter 8: Multifunctional Interfaces
After completing this chapter, the student will be able to:
•Create a complete PHP application that deletes, updates, and inserts data
•Create a professional look to a completed application using CSS
•Use JavaScript to accept and manipulate data from another program
•Secure all programs within an application requiring user IDs/passwords
•Populate HTML objects with values from a JSON object
xixChapter 1
An Introduction to PHP 7
“PHP is a popular general-purpose scripting language that is especially suited to web
development. Fast, flexible, and pragmatic, PHP powers everything from your blog to the
most popular web sites in the world.” —www.php.net
Chapter Objectives/Student Learning Outcomes
After completing this chapter, the student will be able to:
•Understand the differences between LAMP, WAMP, and MAMP
•Successfully install a version of LAMP, WAMP, or MAMP
•Search the Internet for troubleshooting problems
•Explain the difference between a programming language and a scripting language
•Create an error-free simple PHP program
PHP 5.5+, PHP 7+, and PHP.NET
Today, PHP (Hypertext Preprocessor) is one of the most popular languages used for web application
development. The language has evolved to allow the programmer to quickly develop well-formed error-free
programs using both procedural and objected-oriented programming techniques. It provides the ability
to use many preexisting libraries of code that either come with the basic installation or can be installed
within the PHP environment. This gives you multiple ways to complete a particular task. It provides more
flexibility than many other languages. The ease with which additional libraries of code can be added to the
environment is one of the many driving forces in its popularity.
Procedural language—A procedural programming language includes functions/methods
that can be called from the main flow of the program. The flow of the program jumps to
the function/method, executes the code within the module, and then returns to the next
statement in the main flow of the program. Some Procedural languages include a main
function/method that automatically is called when the program is executed.
Electronic supplementary material The online version of this chapter (doi:10.1007/978-1-4842-1730-6_1)
contains supplementary material, which is available to authorized users.
© Steve Prettyman 2015
S. Prettyman, Learn PHP 7, DOI 10.1007/978-1-4842-1730-6_1
1Chapter 1 ■ An Introduction to PHP 7
Object-oriented language—An object-oriented language uses classes and objects. Classes
are similar to blue prints. A class describes what an object can contain, including
properties/variables and functions/methods. An object is an instance of a class (like a
building that has been created from a blueprint). Object-oriented languages provide
polymorphism, encapsulation, and inheritance. Objects are naturally encapsulated by
containing all related functions/methods and properties/variables within the object itself.
Polymorphism allows duplicate method/function names within object-oriented objects.
However, the “signature” must be different. The “signature” is the combination of the
types of variables (numbers and characters) passed into the method/function and the
type of information passed out of a method/function. For example, several add methods
could be created—one that only accepts integers (whole numbers), one that only accepts
floating point numbers (numbers with decimals), and one that accepts a combination.
The program will determine which method/function to call by what has been passed into
the method/function. Inheritance in object-oriented programming allows an object to
inherit properties/variables and functions/methods from another object. The object can
also override those items inherited. This is similar to a child inheriting characteristics from
the parents. Object-oriented languages can also be event-driven. An event-driven program
will “sleep” until an event occurs. This is similar to an ATM machine program waiting for
a user to input an ATM card.
PHP is an open source language. As such, each version of the language is created using input from the
individuals who use it—the programmers themselves. This allows the language, over time, to evolve and
float into the direction that is driven by the users. From its first release in 1995 as a Personal Home Page Tool
(PHP) by Rasmus Lerdorf, the versions have been released on the Internet with forums to provide users the
ability to make suggestions and even provide code changes and additions. Today www.php.net is the official
PHP web site.
Open source language—An open source programming language is developed by a
community of interested parties. The community accepts input from fellow programmers
for suggested upgrades and corrections. Several members of the community work together
to present proposals and to make changes to the language. Open source languages are
“free”. A non-open source language (such as Microsoft C#) is created and updated by a
company or major organization. Non-open source languages are not usually “free”.
2Chapter 1 ■ An Introduction to PHP 7
Figure 1-1. PHP.NET (09/24/15)
The www.php.net home page provides information on each of the latest releases of the language. It also
provides information on future releases, the features planned for those releases, and the planned release
dates. In addition, other related PHP information can be found, including links and information to major
PHP conferences.
Figure 1-2. Get involved (09/24/15)
3
www.allitebooks.comChapter 1 ■ An Introduction to PHP 7
As mentioned, this site provides the ability for users to help with the future development of the
language. Users can get involved with testing beta versions and reporting errors or program bugs. Visitors
can also view documentation related to the development of possible future versions. This is a good way of
discovering future enhancements or security fixes before major announcements have been made to the
public.
Figure 1-3. Download page (09/24/15)
The download page, as you might have guessed, provides the ability to gain easy access to the latest
versions of the language. However, as you will note, only the language itself is provided. It is more common,
and recommended, that the beginning user use a WAMP (Windows, Apache, MySQL, PHP); LAMP (Linux,
Apache, MySQL, PHP); or MAMP (Mac, Apache, MySQL, PHP) package for initial installation. These
packages (which we will look at later) allow for easy installation of multiple products at the same time.
Otherwise, you have to run many separate installations, which can become complicated and error-prone
if incompatible versions are installed.
WAMP/LAMP/MAMP—Open source (free) combinations, including Apache Web Server,
MySQL, and PHP for a specific operating system (Windows, Linux, and Mac). These
packages are open source. The combination of software is used for creating dynamic web
sites and web applications.
4Chapter 1 ■ An Introduction to PHP 7
Figure 1-4. Documentation pages (09/24/15)
One of the more important pages of the PHP web site is the documentation page. This page allows
users to search for descriptions and functionality of the language itself. You can also download the complete
documentation. However, since this is a “live” site, with possible changes occurring, the most current
information is best obtained by directly accessing it from the web site.
Figure 1-5. The Manual (11/11/14)
5Chapter 1 ■ An Introduction to PHP 7
You can use the manual as if it were a textbook by clicking through each link from the beginning.
The limited amount of explanation provided with each section of the manual might cause a beginner to
want to give up on programming and change interests to something ghastly like networking! The manual
does provide a great guide for experienced programmers, as the syntax of the language is similar to other
languages such as JavaScript, Perl, and Java.
Figure 1-6. Search (11/11/14)
On any page of the web site, the user can enter a term, an expression, or even a function name to find
more information. As the information is entered in search box, the web page will provide the user with one
or more options below the box for the user to select.
6Chapter 1 ■ An Introduction to PHP 7
Figure 1-7. Echo (11/11/14)
Once the user has selected an option (such as echo shown in Figure 1-7), the results of the search
provide the user with a general description of the item requested, any inputs or outputs for a function
(parameters), and example code.
Figure 1-8. Echo code (11/11/14)
7Chapter 1 ■ An Introduction to PHP 7
The example code provides explanations of the use of the function within the code itself by using
comments (indicated by the // and gold color in Figure 1-8). The comments are not executable code. The
executable code is color-coded to highlight strings (red), variables (blue), keywords (green), and the PHP
opening and closing tags (blue). Color-coding helps make the code more readable. It also can make it easier
to find syntax errors when creating programs. Many PHP editors provide similar color schemes.
PHP 5.6+ and PHP 7+
With the release of the PHP 7 environment, great improvements have taken place. PHP 5.5+ has dramatically
improved security. In this book, we will use the newest PHP encryption tool “password hash” instead of MD5
which many current books use. Over the last several years, MD5 has proven to be vulnerable to hacking.
“PHP 7 is based on the PHPNG project (PHP Next-Gen), that was led by Zend to speed
up PHP applications. The performance gains realized from PHP 7 are huge! They vary
between 25% and 70% on real-world apps, and all of that just from upgrading PHP,
without having to change a single line of code!” —www.zend.com
PHP 7 also replaces fatal errors, which previously would crash a program, with exceptions that can be
handled within the program itself.
If you are migrating from a previous version of PHP to PHP 7, please review the following link:
http://php.net/manual/en/migration70.php
The code used in the examples in this book is compatible with PHP 7. Most examples are also
compatible with PHP 5.5 and PHP 5.6.
Do It
8
1.Go to www.php.net. Search for information on the print and printf functions.
How are these functions similar? How are they different?
2.How do you “join the team” and help with the creation of the next version of
PHP? Hint: Go to the “Get Involved” section of www.php.net, select “Guide for
Contributors,” and then find the “Join the team” link. Of course, the web site
changes, so you may need to find a different route to the information.
3.Which ways can the www.php.net web site be useful for a beginning PHP
programmer?
4.What language is used to create PHP? Hint: The answer is somewhere on the
www.php.net web site.
5.Go to www.php.net. Search for the list of improvements and changes with PHP 7.
List those improvements and changes. Which of these do you think will affect a
beginning level programmer?Chapter 1 ■ An Introduction to PHP 7
PHP, JavaScript, CSS, HTML, and Apache Web Server
PHP is a scripting language. A scripting language is different than an actual programming language.
Programming languages (such as Java) are written by the programmer in an English-like syntax. The
program is compiled, which means it’s converted from the English syntax into machine code (0s and 1s).
This code is then executed (run) within a compatible operating system and hardware. Scripting languages
do not use a compiler. The first time the code is accessed it is interpreted line by line as the program is
executed.
You may wonder if this causes the code to be slower than compiled code. The answer is no. Once the
code has been executed once, the interpreted code stays in the memory of the computer, or server, for other
executions. If the programmer changes this code, a new version will replace the previous version in memory.
JavaScript is also a scripting language. As you may be aware, JavaScript code can be seen within a web
browser by viewing the source, as shown in Figure 1-9.
Figure 1-9. JavaScript, HTML, and CSS code from yahoo.com (11/11/14)
9Chapter 1 ■ An Introduction to PHP 7
The source code displayed in Figure 1-9 is from www.yahoo.com and it shows a combination of several
languages, including HTML, CSS, and JavaScript. The JavaScript code (displayed in black) is located
between script tags (<script type="text/JavaScript"> and </script>). This JavaScript code will attempt
to create a cookie on your machine, if your browser allows cookies.
Figure 1-10. The www.php.net source code (11/11/14)
However, when we look at the www.php.net source code (in Figure 1-10), we cannot see any PHP script
code. There are links to some PHP files present, but no actual PHP code is displayed. Why?
JavaScript code resides on the user's computer. It is interpreted and executed within the browser. PHP
code resides on a web server. The code is also interpreted and executed, but by the web server, not by the
browser. The results of executing the PHP code are returned to the browser, not to the actual code itself.
<?php
Print "Hello";
?>
■■Note You may notice other formats for using PHP (such as: <%, <%=, %>, or <script language="php">);
with PHP 7 these styles are no longer valid. There were actually depreciated previously, but still usuable.
10Chapter 1 ■ An Introduction to PHP 7
You might guess that this code will display Hello. While this is correct, the question is, what processes
happen to produce this result?
If this code is placed in a file (such as hello.php) on a web server, we would use our web browser
to request this file by entering its name and location in the URL (address) box (such as http://servera.
com/hello.php). The address entered instructs the browser to send an HTTP Get request to the web server
(servera.com) to return the web page (hello.php).
Figure 1-11. Requesting an HTML/JavaScript web page
The web server receiving the request will determine that PHP code must first be interpreted and
executed. It determines this simply by looking at the file extension (.php) of the file requested. Any PHP code
within the file is then sent to the PHP processor for interpretation and execution. The results of the execution
of the code is returned to the web server, which in turn sends it (and any other HTML and/or JavaScript
code) back to the browser. In this example, Hello would be returned and displayed by the browser. If we
then viewed the source code, as mentioned, we would only see the actual word Hello. We would not see any
HTML or PHP. Why? Because we did not send any HTML back to the browser.
Figure 1-12. Requesting a web page with PHP code
You may be wondering if you can use this process to send back actual HTML (and/or JavaScript) code to
create a dynamic web page. The answer is yes. The PHP print function will return any HTML (or JavaScript)
code that has been placed between the "". The browser will interpret any code returned by the web server.
Print function. The print function is not actually a function. It is a language construct.
Functions require that strings be included in quotes when passed. Language constructs do
not require quotes around strings. However, it is still recommended. Print will pass whatever
has been passed into it to the browser. It will attempt to convert any item that is not a string
to string (text) format since all items displayed within a web page are in text format.
For more information, visit:
http://php.net/manual/en/function.print.php.
For a more in-depth explanation of the print command, visit the free “The New Boston”
(thenewboston.com) video(s) at:
https://www.thenewboston.com/videos.php?cat=11&video=16996.
11Chapter 1 ■ An Introduction to PHP 7
■■Note
All links provided in this book can be accessed from http://www.littleoceanwaves.com/securephp.
<?php
Print "<h1>Hello</h1>";
?>
If we change our code to the listing above, the browser will display Hello as an HTML header (h1). The
disadvantage of using the print function is that the program will have no control over where the statement is
displayed on the web page. The statement will actually be displayed as the first line of code, even before any
other existing HTML tags. This might be okay if we are just returning a statement to the user, such as “Your
process has been completed”. However, this might not be acceptable if your goal is to format output at an
exact location on the page. There are other techniques and functions that we could choose to eliminate this
problem. However, it is beyond our current discussion.
Now that we know we must interpret and execute PHP code with the help of a web server, what server
should we use?
The Apache web server is the server that is most commonly used to host and handle PHP web page
requests. Like other web servers, Apache can also accept and return requests for other types of files, including
HTML, JavaScript, PERL, images, and RSS feeds. Apache, as mentioned, determines what processes need to
be completed from HTTP requests by first looking at the file extensions of the requested files.
Figure 1-13. Apache.org web site (09/24/15)
Apache, like PHP, is an open source product. All changes to the Apache web server are coordinated by
the Apache Software Foundation. ASP maintains the apache.org web site to provide users and developers
the ability to discover projects currently under development and the ability to download the latest versions
of Apache. However, as mentioned, downloading separate versions of PHP, Apache, and MySQL can cause
issues with incompatible versions. Unless you know what you are doing, it’s much wiser to download a
complete WAMP, LAMP, or MAMP version.
12Chapter 1 ■ An Introduction to PHP 7
Figure 1-14. Apache’s Get Involved (09/24/15)
The Apache Software Foundation also encourages all users of their products to keep up to date and to
get involved in the development of future products. Users are encouraged to join discussion and mailing
groups, test out new releases, and even help fix bugs or add new features to their products.
Do It
1.What are the differences in executing PHP code compared to executing Java
code?
2.What is the difference between a scripting language and a programming
language? What type of language is PHP?
3.How does the Apache web server handle requests for a PHP web page?
4.Why can we see JavaScript code within a web browser but we can’t see PHP
code?
5.Go to www.apache.org. What are some of the ways that you can become involved
with the development of Apache projects, even though you have limited
experience?
13
www.allitebooks.comChapter 1 ■ An Introduction to PHP 7
PHP, Apache, and MySQL
What happens when a web page requests information from a database?
Commonly databases are stored on servers that are separate from the web server itself.
Does the request for data come from the web server or from the PHP processor?
Since the SQL statements are contained within the PHP code itself, the PHP processor sends the SQL
statements to the Database Management System (MySQL) to be processed.
Figure 1-15. Requesting a PHP web page that retrieves information from a MySQL database
SQL—Structured Query Language is a special language used to update, insert, or delete
data from a DBMS (Database Management System). A DBMS is an application that
interacts with a program language and a database to update, insert, or delete data. The
DBMS uses SQL to interpret the required changes to the data within the database. For
more information on SQL, visit http://en.wikipedia.org/wiki/SQL. For more information
on DBMS, visit http://en.wikipedia.org/wiki/Database.
The Apache server will first discover that PHP code must be interpreted. The PHP code will then be sent
to the PHP processor. The PHP processor interprets the code (line by line). While doing so, it will discover
that SQL statements must be executed against a database. The SQL statements are then transferred to the
appropriate Database Management System (DBMS) for processing. The DBMS will return the results of
the execution of the SQL statements to the PHP processor. The PHP processor will then use those results
to format output to be given to the Apache server. The Apache server will then combine the results of what
is returned by the PHP processor with any other HTML (and/or JavaScript) code that might reside on the
original page requested and return all output to the browser on the user’s machine. The browser will then
interpret the HTML and JavaScript to display the results of the page requested.
Did you catch all of that?
Let’s look at a “real-world” example, shown in Figure 1-16.
Figure 1-16. Google.com search for “green cats” (11/12/14)
14Chapter 1 ■ An Introduction to PHP 7
For some very strange reason we have decided to look up “green cats” on the Internet. As we enter
the string into our favorite search engine (Google in this example) and then click the Search button, the
information is passed to a Google server farm somewhere. Where?
Who knows; it could be anywhere on the planet. But the power of the Internet is that we don’t care as
long as we get our results back quickly.
Figure 1-17. Green cats (11/12/14)
Okay, I must say I am amazed that there are 104 million possible links to green cats. Wow. Maybe we
should have filtered that down some. The point, however, is that Google returns a web page with a listing of
links and descriptions of those links (plus ads).
Did Google return a static page that already existed?
No. The servers created a dynamic page from the request of the user. The Google algorithms (software)
searched the massive Google database farms. The request was first sent to a Google web server from the
user’s browser. The web server then sent a request to the Google databases (actually using a Google Query
Language similar to SQL) to return information about “green cats”. The software on the web server then
compiled the results, added HTML and JavaScript (also some Google Script Language code) for formatting
the results web page, and returned the information to the user.
Static vs. dynamic web pages—A static web page does not change in relation to user
requests or input. The page is created by a web developer and resides on the web server.
When the user requests the page via a browser, a copy of the page is sent to the browser
for display. A dynamic page does not exist within a web server. The page is created using
input from the user. A program residing on the web server will create and format the page.
The page that is created by the program is then downloaded to the user’s browser. A copy
of the page is not (usually) maintained on the web server. For more information on static
web pages visit http://en.wikipedia.org/wiki/Static_web_page. For more information on
dynamic web pages visit: http://en.wikipedia.org/wiki/Dynamic_web_page.
15Chapter 1 ■ An Introduction to PHP 7
Did every page get downloaded to the user’s web browser?
No, just the first page. The page links at the bottom of the first results page return information to the web
server requesting the next set of information (to dynamically create the second page, or another requested
page). As you might now be starting to figure out, the same process we have just discussed related to
processing PHP files on the Internet is a very common process for creating dynamic pages.
Your might have noticed something interesting about the results page URL address that was displayed.
The address is now https://www.google.com/?gws_rd=ssl#q=Green+Cats, not www.google.com.
Google algorithms use the GET HTTP Request when sending search requests to their servers.
HTTP—Hypertext Transfer Protocol is the protocol (standard) for transferring messages
(text and web pages) between nodes (computers and servers) on the Internet. It is a
request-response protocol. For example, a user “requests” a web page though a browser.
The web server “responds” to the request and returns the page to the browser. The browser
changes the request into an HTTP Get Request (such as GET /pages/mypage.html HTTP/1.1)
that is sent to the web server. The web server responds with the information requested
and a status code (such as HTTP/1.1 200 OK). For more information on HTTP, visit
http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods.
<form name="orders" method="get" id="orders" action="searchprocess.php">
Name: <input type="text" name="customername" id="customername"><br />
<input type="submit" value="Submit your name">
</form>
Let’s look at a simpler example above to discover what occurs. Assume the code above is saved in an
index.html file on your localhost web site under the projects folder.
Figure 1-18. Index.html example
If the user enters Fred in the textbox displayed in the browser, the results page (created by interpreting
and executing the searchprocess.php file on the web server and sending the results back to the browser)
will display the URL line : http://127.0.0.1/projects/searchprocess.php?customername=Fred.
Figure 1-19. Execution of searchprocess.php
16Chapter 1 ■ An Introduction to PHP 7
The name of the textbox (customername) and the value entered in the textbox (Fred) are now visible on
the URL line. Actually, customername is now a parameter and Fred is now the value the parameter holds.
This is the result of using the GET process.
When we click the Google Search button or the Search button in our simple example, the requested
information is send via the GET HTTP process. All information (and variables) needed for the receiving
program are sent on the actual URL line to be received by the program on the web server that will process
the initial request.
Why does the Google search engine send information via GET instead of POST (which would have
hidden the information)?
The main reason is to save server memory. Just think of the millions of requests that Google has for
information. If all of these requests resided in memory, the servers would soon crash. Also, since the user is
doing a “public” search for information, there is no reason to hide the information. In later chapters, we will
discover how to read both GET and POST parameters within PHP programs.
However, for now let’s get back to our discussion of Apache, PHP, and DBMS.
PHP can access information from many types of DBMS systems, including Oracle and SQL Server.
However, the most popular combination (as mentioned already) is to pair PHP with MySQL. I bet at this point
you can guess why? Yes, it’s open source and free. MySQL is also one of the easier DBMS systems to use.
Figure 1-20. www.mysql.com (09/24/15)
Just like all the open source products we have discussed, the user can go to the official web site
(www.mysql.com) to download the latest versions. Also, as you can probably guess, you can join in on the fun
of helping to develop new versions of MySQL and related products. Documentation of current and several
previous versions are available for download. The documentation is pretty intense and not for the weak of
mind or the beginner. Also, as you probably are tired of reading it is not recommended that you download a
new version of MySQL individually until you have more experience. Stick with the WAMP, LAMP, and MAMP
packages, at least for now.
17Chapter 1 ■ An Introduction to PHP 7
Do It
1.Why does the PHP processor send SQL to the DBMS instead of the Apache web
server sending it directly to the DBMS?
2.What might Apache do with the information received from the DBMS before
sending it back to the user’s browser?
3.Go to www.mysql.com. What is the latest version of MySQL? Which versions of
Apache and PHP are compatible?
4.Why do search engines pass information via GET HTTP requests instead of POST
HTTP requests? When would you use a POST request?
Putting it All Together—PHP, Apache, and MySQL
As you have hopefully discovered by this point, PHP, Apache, and MySQL need to run seamlessly together to
successfully create dynamic web pages. There are numerous development packages available that provide
a combination of these products, along with other tools such as PhpMyAdmin (which is a great help in
setting up your web server and databases). By installing one of these products, you will greatly reduce your
frustration level and maybe even manage to keep most of your hair. We will briefly look at two of the most
popular; EasyPHP and XAMPP. We will not dive in-depth or provide step-by-step install directions for two
reasons. As soon as this book is published the directions probably will change, and it’s fine to use the default
settings. Accepting what the developers suggest works most of the time.
EasyPHP
Figure 1-21. www.easyphp.org (09/24/15)
18Chapter 1 ■ An Introduction to PHP 7
You can download the developer’s version of EasyPHP from the following link. It is not necessary to
download the host version unless you are planning on hosting “live” web pages directly from your computer
onto the Internet.
http://www.easyphp.org/easyphp-devserver.php
The developer's version of EasyPHP is a WAMP (Windows, Apache, MySQL, PHP) package that’s used in
the Microsoft Windows environment. There are additional tools that you can choose to also install to assist
in development. However, for our purposes you need only the basic install. After installation, the files will be
located in your program files directory under the EasyPHP directory.
■■Warning Pay attention to which buttons you click on the web site during download. You might download
extra items you are not interested in if you don't read what you are downloading before you click the button(s).
After downloading the installer by clicking the download arrow on the web site, follow the directions
provided with the software. On your first attempt, leave all the default settings. Hopefully, everything will
install correctly. If not, read the next section entitled, “Common Installation Problems”.
Common Installation Problems
Missing C# Library
PHP 7 (and earlier versions of PHP) require the Microsoft Visual Studio C# library. If you have Windows 8 or
later, this library is probably already installed. Also, if you have a recent version of Microsoft Visual Studio, it
is also probably already installed. If you receive an error indicating that C# is missing or the wrong version,
paste the message into a search engine on the Internet. Search for a response from Microsoft for directions to
fix the error. The response should include a link to download the missing files and installation instructions.
Port Conflicts
If you already have a service using port 80, the default port for HTML traffic between your PC and the outside
world, you will receive an error message from Apache when it attempts to run. You can fix this problem in
multiple ways.
Wikipedia defines a port as:
In computer networking, a port is an application-specific or process-specific software
construct serving as a communications endpoint in a computer's host operating system.
The purpose of ports is to uniquely identify different applications or processes running
on a single computer and thereby enable them to share a single physical connection to
a packet-switched network like the Internet. In the context of the Internet Protocol, a
port is associated with an IP address of the host, as well as the type of protocol used for
communication.
For more information on ports, visit:
http://en.wikipedia.org/wiki/Port_(computer_networking).
19Chapter 1 ■ An Introduction to PHP 7
A. If you don’t mind shutting down other services using the port while you are developing, you can
follow the directions below. Once you are done using Apache and PHP, you can turn the services back on or
just reboot your PC and the services will turn back on.
1.Go to the Microsoft Windows 7/8/10 Task Manager (press Ctrl+Alt+Delete at the
same time).
2.Select the Services tab.
3.Look for any of the following services in Windows 7/8/10. If you find one
running, right-click it and turn it off. Then try restarting Apache again. If that
does not work, turn that one back on and try another one. (The names may be
slightly different depending on the version of Windows.)
SQL Server Reporter, Web Deployment Agent, BranchCache, Sync Share Service,
WAS (IIS Administrator), and W3SVC
B. If you need your other services running or you do not have the administrative privileges to turn off
services on port 80, you can change the default listening port location for Apache.
Go to your system tray (bottom-right corner of your screen). Find the EasyPHP icon by scrolling over
the icons. A description of each should appear. If you don’t see the icon, click the up arrow in the system tray
to see more icons. Right-click the EasyPHP icon. Select Configuration and then select Apache. This will open
the Apache configuration file (httpd.conf) into Notepad (or your default text editor). First save a copy of this
file somewhere in case you make an error. This will allow you to recover from any major mistakes that occur.
Then search for Listen 127.0.0.1:80 within the file. Change the occurrence of 80 to 8080 or to 81; on that
line only. This will allow the Apache server to listen to one of the ports that are not commonly used. Resave
the file (make sure you are resaving the original file to the original location).
■■Note Make sure when you’re using Notepad or any other text editor that you use Save As, and then select
All Files for the file type. Also make sure to include the .conf file extension. If you do not change the file type
to all files, your file will be saved as httpd.conf.txt. If that happens, the server will not see the file. You can
easily fix the problem by reopening the file and saving it in the proper method.
You can then restart Apache by going back to your system tray to find the EasyPHP icon. Double-click
the icon; a message box will appear that will give you the status Apache and MySQL. You will probably see
red for the Apache status. Click the Apache button. Within a few moments, it should turn green. This will
indicate that the server is now running. Do the same for MySQL.
Missing Files
If you receive an error message related to this, somehow your files have become corrupted before
installation. Return to the EasyPHP web site and download the files again. Also, if you somehow mess up the
Apache configuration file, go back and reinstall the product again.
Can’t Install Files In Program Files Directory
This indicates that you or something else has a high security restriction on that directory. Rerun the
installation and change the location of your installation to another directory. Just remember, when we
reference the program files directory later in this book, that you should instead look at the directory in which
your files were installed.
20Chapter 1 ■ An Introduction to PHP 7
Apache Delays and Hang-ups
In Windows 8/10 you may experience problems with Apache working slowly or hanging-up. To correct this
problem go to your system tray (bottom-right corner of your screen). Find the EasyPHP icon by scrolling
over the icons. A description of each should appear. If you don’t see the icon, click the up arrow in the
system tray to see more icons. Right-click the EasyPHP icon. Select Configuration and then select Apache.
This will open the Apache configuration file (httpd.conf ) into Notepad (or your default text editor). First
save a copy of this file somewhere in case you make an error. This will allow you to recover from any major
mistakes that occur.
Then add the following two lines to the bottom of the file.
AcceptFilter http none
AcceptFilter https none
Resave the file (make sure you are resaving the original file to the original location).
Other Errors
For errors that have not been discussed here, copy and paste the error into a search engine. Locate an
answer column or blog that provides suggestions to fix your error. There are many free resources on the
Internet. Do not pay for a web site (or someone else) to fix your problem.
Configurations
You need to determine when you want Apache to run. Apache can be set to run when you boot your PC,
when an application needs it, or manually. To change settings, you can right-click the EasyPHP Icon in the
system tray (bottom-right corner of your screen), then select Configuration and then select EasyPHP. If you
don’t see the icon, click the up arrow in the system tray. A small screen should appear that will allow you to
check (or uncheck) two options—Start on Session Startup and Launch Servers When the Application Starts.
There are many optional libraries that you can link or unlink to PHP as needed. In many cases the
libraries are already loaded and just need to be linked. You can add these libraries by going to the PHP
configuration file (php.ini) and removing the comment (;) character at the beginning of the line. The
PHP configuration file can easily be found by right-clicking the EasyPHP icon in the system tray. Then
select Configuration and PHP. It is not necessary to make any changes at this point. It is also suggested that
you make these changes only when needed. Other libraries can be added using Curl and other methods
discussed in later chapters of this book.
For a more in-depth explanation of the php.ini file, view the free “The New Boston” (thenewboston.
com) video at https://www.thenewboston.com/videos.php?cat=11&video=16993.
21Chapter 1 ■ An Introduction to PHP 7
XAMPP
Figure 1-22. XAMPP at www.apachefriends.org (09/24/15)
Although XAMPP is similar to EasyPHP, XAMPP is more popular because it has free Windows,
Linux, and OS X versions. It also includes a lot of add-ons, including some of the most popular content
management systems—Drupal, Joomla, and WordPress. The latest downloads can be accessed directly at
the official XAMPP web site or at many other download locations.
https://www.apachefriends.org/
■■Warning Pay attention to what buttons you click on the web site. You might download extra items you are
not interested in if you don't read what you are downloading before you click the button(s).
During your first attempt at installing, use the default settings that the developers have suggested in the
installation software. You will greatly reduce the possibility of problems or headaches. If you do have errors,
read the next section entitled “Common Installation Problems” for assistance.
Common Installation Problems
Port Conflicts
If you already have a service using port 80, the default port for HTML traffic between your PC and the outside
world, you will receive an error message from Apache when it attempts to run. You can fix this problem in
multiple ways.
22Chapter 1 ■ An Introduction to PHP 7
A. If you don’t mind shutting down other services using the port while you are developing, you can
follow the directions on the video link. Once you are done using Apache and PHP you can turn the services
back on or just reboot your PC and the services will turn back on.
1.Go to the Windows 7/8/10 Task Manager (press Ctrl+Alt+Delete at the same
time).
2.Select the Services tab.
3.Look for any of the following services in Windows 7/8/10. If you find one
running, right-click it and turn it off. Then try restarting Apache again. If that
does not work, turn that one back on and try another one. (The names may be
slightly different depending on the version of Windows.)
SQL Server Reporter, Web Deployment Agent, BranchCache, Sync Share Service,
WAS (IIS Administrator), and W3SVC
B. If you need your other services running or you do not have the administrative privileges to turn off
services on port 80, you can change the default listening port location for Apache.
Go to your system tray (in Microsoft Windows it’s at the bottom-right corner of your screen). Find the
XAMPP icon by scrolling your mouse over the icons. A description of each should appear. If you don’t see
the icon, click the up arrow in the system tray to see more icons. Double-click the icon. The Control Panel
should appear. You should see start up error messages in red on the console. If it is a port conflict, click the
Config button to the right of Apache. Select httpd.conf from the list provided. This will open the Apache
configuration file (httpd.conf) into Notepad (or your default text editor). First save a copy of this file
somewhere in case you make a mistake. This will allow you to recover the original file. Search for Listen 80
within the file. Change the occurrence of 80 to 8080 or to 81. This will allow the Apache server to listen to one
of these ports that are not commonly used. Resave the file (make sure you are resaving the original file to the
original location).
■■Note Make sure when using Notepad or any other text editor that you use Save As, then select All Files for
the file type. Also make sure to include the .conf file extension. If you do not change the file type to All Files,
your file will be saved as httpd.conf.txt. If that happens, the server will not see the file. You can easily fix the
problem by reopening the file and saving it in the proper method.
You can then restart Apache by clicking the Start button next to Apache in the XAMPP console. If you get
a green status for Apache, you will also want to start MySQL by clicking the Start button to the right of MySQL.
Missing Files
If you receive an error message related to this, somehow your files have become corrupted before
installation. Return to the XAMPP web site and download the files again. If you somehow have messed up
the Apache configuration file, you also will need to download the files again.
Can’t Install Files in Program Files Directory
This would indicate that you or something else has a high security restriction on that directory. Rerun the
installation and change the location of your installation to another directory. Just remember, when you
reference the program files directory later in this book, that you should instead look at the directory in which
your files were installed.
23Chapter 1 ■ An Introduction to PHP 7
Apache Delays and Hang-ups
In Windows 8/10 you may experience problems with Apache working slowly or hanging-up. To correct this
problem go to your system tray (bottom-right corner of your screen). Find the XAMPP icon by scrolling over
the icons. A description of each should appear. If you don’t see the icon, click the up arrow in the system tray
to see more icons. Right-click the XAMPP icon. Select Configuration and then select Apache. This will open
the Apache configuration file (httpd.conf ) into Notepad (or your default text editor). First save a copy of this
file somewhere in case you make an error. This will allow you to recover from any major mistakes that occur.
Then add the following two lines to the bottom of the file.
AcceptFilter http none
AcceptFilter https none
Resave the file (make sure you are resaving the original file to the original location).
Other Errors
For errors that have not been discussed here, copy and paste the error into a search engine. Locate an
answer column or blog that provides suggestions to fix your error. There are many free resources on the
Internet. Do not pay for a web site (or someone else) to fix you problem.
Configurations
You can change configurations for XAMPP by going to the Control Panel (double-click the XAMPP on the
system tray at the bottom-right of your screen). Then click on the config button at the upper-right of your
screen (not the config buttons to the right of the applications). You can then check (or uncheck) those
applications that you want to have automatically start the next time the Control Panel starts. You should
check Apache and MySQL for the lessons in this book. Of course, you can always start them from the Control
Panel when needed.
There are many optional libraries that you can link or unlink to PHP as needed. In many cases, the
libraries are already loaded and just need to be linked. You can add these libraries by going to the PHP
configuration file (php.ini) and remove the comment (;) character at the beginning of the line. The PHP
configuration file can easily be found by double-clicking the XAMPP icon in the system tray. Then click
the Config button to the right of Apache. A list will display; select php.ini. It is not necessary to make any
changes at this point. It is also suggested that you make these changes only when needed. Other libraries can
be added using Curl and other methods discussed in later chapters of this book.
Microsoft Internet Information Server
Alternatively, if you are unable to get Apache to perform properly in Windows (especially Windows 8
or Windows 10), or you like Microsoft’s IIS Server, you can install PHP to use Microsoft IIS (Internet
Information Server) instead of Apache. For more information, visit:
http://www.microsoft.com/web/platform/phponwindows.aspx
24Chapter 1 ■ An Introduction to PHP 7
Do It
1.
Use a search engine to answer this question: You receive the following error
either while installing or as soon as you try to start XAMMP or EasyPHP. How can
you find the solution to your problem? What might be causing this error?
Internal Server Error
The server encountered an internal error or misconfiguration and was
unable to complete your request.
Please contact the server administrator, you@example.com and inform
them of the time the error occurred, and anything you might have
done that may have caused the error.
More information about this error may be available in the server
error log.
2.Use a search engine to answer this question: What is XAMPP error #1130? How
can you fix this error?
3.Use a search engine to answer this question: When trying to run a PHP program
using EasyPHP (and Apache) you receive the error below. What is causing this
error? How can you fix it?
Cannot load mcrypt extension. Please check your PHP configuration.
4.
If you have not already attempted to do so, install either EasyPHP or XAMPP on
your personal machine. Did you have any problems with your installation? If so,
what problems did you have? How did you solve those problems?
Testing Your Environment
You have green lights now, right? Everything is working correctly?
Well, hopefully. However, you need to make sure. The best way to do this is to test your environment.
Testing Your Administration Environment
First we need to test the server and see if our administration pages will display. In EasyPHP, you can do
either of the following:
1.Right-click on the EasyPHP icon and select Administration.
2.Open your favorite browser and enter the following:
or
http://127.0.0.1/home/
25Chapter 1 ■ An Introduction to PHP 7
If you had to change your port due to conflicts, you may need to enter the port number, such as:
http://127.0.0.1:8080/home/
You should see a screen similar to the one shown in Figure 1-23.
Figure 1-23. EasyPHP administration screen (PHP 5.6)
For XAMPP, open your favorite browser and enter this address:
http://127.0.0.1/dashboard/
If you had to change your port due to conflicts, then you must also include this port:
http://127.0.0.1:8080/dashboard/
26Chapter 1 ■ An Introduction to PHP 7
If XAMPP is installed properly, you should see a screen similar to the one shown in Figure 1-24.
Figure 1-24. XAMPP dashboard screen (09/24/15)
If at this point you are not seeing this page (or some page with XAMPP displayed), something is wrong.
Check the following:
Is EasyPHP or XAMPP running (started)? Do you see the green light or green shaded color for Apache
either in the XAMPP Control Panel or in EasyPHP? If not, try clicking the start buttons or links.
If Apache will not start, are you seeing an error message? If not, check the error log file. For EasyPHP,
right-click the icon on the system tray and select the error log file for Apache. For XAMPP, click the Log
button on the Control Panel next to Apache and select Error Log.
If you see green and the pages seem to be locked up, try stopping and restarting Apache. If might take a
couple of attempts to wake it up. If it continues to hang, check your computer settings. Are you maxing out
on CPU usage?
Can you determine the problem? If you have an error message, paste it in your favorite search engine
and see what the experts say about the problem.
Do It
1.
If you have not already done so, test your environment using the
directions above. Did you have any problems? If so, what problems occurred?
How did you fix those problems?
27Chapter 1 ■ An Introduction to PHP 7
Testing Your PHP Environment
Hopefully everything is good at this point. Either you have been flying through with great luck, or you
managed to fix all the problems you have encountered. However, you still need to see if you can actually run
your own PHP program in Apache.
Open a text editor (not Word, but Notepad or Notepad++ are good), and enter the following code
exactly as it has been shown.
<?php
print "Hello World";
?>
Figure 1-25. Using Save As with All Files to save PHP programs
Using the Save As selection on the File menu, change the File Type to All Files or to php. Enter the file
name myfirstprogram.php and save it in one of the locations below.
If you are using EasyPHP, save it to:
C:\Program Files (x86)\EasyPHP-DevServer-14.1VC11\data\localweb\projects
Of course, you should change the version name (or Program File name) to the correct version (location)
that you are using on your machine. If you have a version of EasyPHP that does not have the localweb\
projects folders, find the location of the www folder under the EasyPHP folder and create a folder called
projects. Then save the file under that folder.
If you are using XAMPP, first go to C:\xampp\htdocs and create a folder called projects. Then go back
to your text editor, choose Save As (don’t forget to change the file type to All Files or php), name the file
myfirstprogram.php and save it to the location below.
C:\xampp\htdocs\projects
28Chapter 1 ■ An Introduction to PHP 7
If you saved your files correctly in the EasyPHP or XAMPP locations, you can attempt to run your
program by entering the following in your browser URL box.
http://127.0.0.1/projects/myfirstprogram.php
If you changed the port, then change the first part to http://127.0.0.1:8080/ (enter the correct port
you are using in place of 8080).
Your program should display the message shown in Figure 1-26.
Figure 1-26. Hello World
Common Problems
Nothing is displayed, error 404:
1.Make sure you typed the address exactly as shown.
2.Your server might be hung up. Stop and restart it.
3.Make sure you placed your file in the correct location.
4.Make sure you saved your file as a .php file and not as .txt. Try Save As again
and renaming the file (make sure file type is either All Files or php).
5.Check for typos in your actual program code. Did you remember the semicolon (;)?
Fix any and resave. You might need to stop and start the server if it does not see
the changes for some reason. You can go to the log files and look at the PHP log
files to see any errors that might exist in your code.
6.Go to the Apache log files (see directions in previous common problems) to look
for errors. If you cannot correct them, copy the errors and paste them in a search
engine to see what others have found as solutions.
The actual program code is displayed not the results of executing the code:
1.Make sure you saved your file as a .php file and not as .txt. Try Save As again
and renaming the file (make sure file type is either All Files or php).
2.Your Apache server or PHP might not be started or is hung. Stop and start
Apache again.
3.Did you forget or have a typo in the <?php or ?> lines?
4.Go to the Apache log files (see directions in previous common problems) to find
the errors. If you cannot correct them, copy the errors and paste them in a search
engine to see what others have found as solutions.
For any other errors, copy and paste them into a web search engine to see what others have discovered
as a solution.
29Chapter 1 ■ An Introduction to PHP 7
EasyPHP’s Code Classroom
If you are still having problems getting a version of LAMP, MAMP, or WAMP to work on your computer, all is
not lost.
EasyPHP (www.easyphp.org) now has an online coding environment for students and teachers. This
environment (see Figure 1-27) allows you to enter code (black window below), click a Submit button
(red button), and see your results on the right (white window).
Figure 1-27. www.codeclassroom.net
Do It
1.
If you have not already tested your environment, do so. Did the test work? What
problems, if any, did you have? How did you solve those problems?
Alias Directories
It is common practice in the real world to create alias directories in web servers. Alias directories are “fake”
locations of files that trick the user of your web site into believing a file is in one location when it is in
another.
Why would you use an alias directory? As web sites grow, the locations of files on servers may have
to change. By using an alias the user of your web site will not know that the actual location of the file has
changed. The alias gives you the ability to store your files in any location on your computer (server). If you
are not using an alias all your files must be stored in the default location. The default locations are:
EasyPHP: C:\Program Files (x86)\EasyPHP-DevServer-14.1VC11\data\localweb\
XAMPP: C:\xampp\htdocs\
30Chapter 1 ■ An Introduction to PHP 7
You might want to consider creating an alias directory, especially if you want to locate your files on a
jump drive. In this book, we assume that files are located under the default locations in a projects folder.
EasyPHP: C:\Program Files (x86)\EasyPHP-DevServer-14.1VC11\data\localweb\projects
XAMPP: C:\xampp\htdocs\projects
This will allow us to test programs using the same URL whether we are using EasyPHP or XAMPP.
http://127.0.0.1/projects/myfirstprogram.php
If you do create an alias directory, just remember to replace projects with whatever alias name you
are using.
Figure 1-28. EasyPHP alias screen
In EasyPHP, alias directories can be created from the Administration screen. Go to the system tray
(bottom-right of your screen), right-click the EasyPHP icon, and select Administration. In the middle of
the screen, locate Local Files, and then locate the Add an Alias button to the right. Click and follow the
directions. Before adding your alias, the folder must already exist.
31Chapter 1 ■ An Introduction to PHP 7
Figure 1-29. The httpd-xampp file
In XAMPP, it takes a little more work. Open the system panel by double-clicking the XAMPP icon.
Then click the Config button to the right of Apache. Select the httpd-xampp configuration file from the list.
Choose Edit. Find from your text editor menu. Search for the string '<IfModule alias_module>'. Do not
change anything that is already listed in this section. However, you can add locations (using the following
code) for your executable files. Once you have entered the required lines, stop and start Apache to help it
find the new changes.
Alias /myfiles "C:/Temp"
<Directory "C:/Temp">
Options Indexes FollowSymLinks MultiViews ExecCGI
AllowOverride All
Require all granted
</Directory>
For more information on creating alias directories, visit:
https://www.youtube.com/watch?v=XX6t3zJRXF8.
■■Note This directory setting allows complete read and write capability to the directory. We will discuss
options to secure the directory for “live” sites in a later chapter.
32Chapter 1 ■ An Introduction to PHP 7
Figure 1-30. Hello World running from the alias directory called myfiles as an index.php file
This listing would allow any files in the C:/Temp directory to execute in Apache when the user enters
myfiles as a directory name in the URL line. The directory settings provided don't provide much security.
However, this is just for testing on a test machine. If you are in a live environment, you would need to
tighten the security settings under the directory tag. To execute the files within this directory, you would
enter the URL http://127.0.0.1/myfiles in a browser. If you do not include a file name, Apache will
try to find an index.html or index.php file. If neither exists, Apache will list the files in the directory,
with the current settings. This allows easy access to files for testing. However, it is not a good idea in a live
environment. You can request a file that is not the index file by adding the file name (http://127.0.0.1/
myfiles/myfirstprogram.php). Remember to include the port number if you had to change it
(http://127.0.0.1:8080/myfiles/myfirstprogram.php). Of course, the directory must exist and the files
must be in the directory before you test the URL in a browser.
Do It
1.
Create an alias folder called myfiles that points to an existing location on your
hard drive or jump drive. Place the hello world program that you used to test
your environment in the folder. Try to run the program from the folder using the
previous instructions. Were you successful? If not, what problems did you have?
How did you fix those problems?
Notepad++, Editors, and Code Testers
When creating PHP code, you do not need to use a specific editor or purchase an editor. You can create all
code within a text editor (even in Notepad). However, it does help to have an editor that highlights (colors)
your code to make it easier to discover coding (syntax) errors.
33
www.allitebooks.comChapter 1 ■ An Introduction to PHP 7
Notepad++
Figure 1-31. Hello World inside Notepad++
Notepad++ is available for download at www.notepad-plus-plus.org. This editor is basic and easy to
use. It can create files in over 20 different forms (including PHP). Most of the coding examples provided in
this book are created with Notepad++. When you’re creating a new PHP program in Notepad++, you must
tell the application the file type. You can do this by choosing the Language menu item and then choosing
PHP. This will allow the application to help you with color-coding and other features.
Other Editors
There are hundreds of other editors available. I suggest you pick one that you are most comfortable using;
www.download.com is a good site to find PHP free editors. Pick one that has lots of users and a strong rating.
As mentioned previously, you may want to also try EasyPHP’s code classroom at:
www.codeclassroom.net
34Chapter 1 ■ An Introduction to PHP 7
Do It
1.
Decide on a text editor that you will use to complete your coding while using this
book. Download the editor to your PC. Retype your hello world program in the
editor and save the program. Run the program from your browser. Why did you
choose the editor that you downloaded? What do you like about the editor? What
do you not like about the editor?
Chapter Terms
PHPProcedural Language
Object-Oriented Languagewww.php.net
WAMPLAMP
MAMPScripting Language
Programming LanguageJavaScript
Web BrowserSource Code
HTMLCSS
Script TagsWeb Server
print FunctionApache
Apache Software FoundationSQL
Database Management SystemStatic Page
Dynamic PageGET HTTP Request
MySQLEasyPHP (Developer's Version)
Port 80httpd.conf
php.iniXAMPP
XAMPP Control PanelAlias Directories
Open SourceNotepad++
Chapter Questions and Projects
Multiple Choice
1.
MAMP stands for
a.Mobile Application Motor Processor
b.My Awesome Mobile Program
c.Apache-MySQL-PHP
d.Modern Application Modular Programing
e.None of these
35Chapter 1 ■ An Introduction to PHP 7
2.
3.
4.
5.
6.
36
The goals of the Apache Software Foundation (ASP) include
a.Coordination of all changes to the Apache web server
b.Overseeing the selling of all Apache software
c.Licensing all web servers
d.Maintaining membership to open source programming through the Apache
web server
What scripting languages can be viewed within a web browser?
a.Java
b.XML
c.JavaScript
d.PHP
Select the statements that are true about static web pages:
a.They are sometimes called flat page/stationary pages
b.They are generated by a web application
c.Static web pages display the same information for all users
d.All of the above
e.A and C
___________ is an object-oriented computer programming language commonly
used to create interactive effects within web browsers.
a.HTML
b.XML
c.JavaScript
d.PHP
What is the correct way to end a PHP statement?
a.;
b.New line
c.<!php>
d..Chapter 1 ■ An Introduction to PHP 7
7.
8.
9.
The configurations button on the XAMPP Control Panel allow the user to do
what?
a.Install XAMPP
b.Select applications to automatically start
c.Manage add-ons
d.Configure MYSQL
php.net provides all of the following except
a.Information of each latest release
b.PHP language documentation
c.LAMP, MAMP, and WAMP downloads
d.Contributions to the PHP documentation
Which of the following best describes a scripting language?
a.The language is compiled.
b.The program must be compatible with operating system and hardware.
c.The first time the code is accessed is when the program is first executed.
d.The code is slower than compiled code
True/False
1.The alias directory allows you to save your web page files in a directory (folder) of
your choice rather than a www directory. It allows a URL address to point directly
to that folder.
2.A static page is a page added to the dryer when drying clothes to prevent static
cling.
3.A client browser submits a GET HTTP request to the server, then the server
returns a response to the client browser.
4.The (Developer’s Version) of EasyPHP can be purchased only for one year at a
time.
5.A dynamic web page never changes but a static web page is always changing.
6.WAMP stands for Windows, Apache, MySQL, and PHP.
7.Apache is an example of a web server.
8.HTML stands for Hypertext Markup Language.
9.PHP originally stood for Personal Home Page.
10.A procedural language is a programming language that uses classes and objects.
11.While viewing a web site in a browser, you may view the source code, which can
show you HTML, JavaScript, and CSS. However, PHP code will not be visible.
12.Java is a procedural programming language.
37Chapter 1 ■ An Introduction to PHP 7
Short Answer/Essay
1.Explain the process that occurs when a browser requests a static web page.
2.Explain the process that occurs when a browser requests a dynamic web page.
3.Explain the difference between a procedural language and a scripting language.
4.How do you add access to PHP library code to your program?
5.Why should you use WAMP, MAMP, or LAMP instead of installing each
application individually?
Projects
1.Create a PHP program to display a summary of your work history and
educational history.
2.Create a PHP program to display your major and the courses required to
complete your major.
3.Create a PHP program to display the goals and/or objectives of your college/
university.
Term Project
1.
Your supervisor has requested that you design a secure application that will keep
track of inventory in the warehouse of the ABC Computer Parts Corporation.
This application will be accessible both within the warehouse itself and outside
(via the Internet and/or smart phones). What data fields are necessary to keep
track of this information? What size and data types (string, integer, floating point)
should define these fields? What other restrictions on input (no negative values
for item number) should be defined for these fields?
For example, if a Social Security Number (SSN) was a required field:
SSN: SIZE: Min: 9 characters (string) Max: 9 characters (string) Restrictions: Valid
SSN format
Notice that it uses characters, not integers, because no calculations will be done
on the SSN number.
38Chapter 2
Interfaces, Platforms, Containers,
and Three-Tier Programming
“As of January 2013, PHP was installed on more than 240 million web sites (39% of those
sampled) and 2.1 million web servers.”
—Ide, Andy (2013-01-31). “PHP Just Grows & Grows”
Chapter Objectives/Student Learning Outcomes
After completing this chapter, the student will be able to:
•Give examples of platforms or containers that can host PHP programs
•Create a simple dynamic web application using PHP
•Explain three-tier design and determine what is contained in each tier
•Design a three-tier application
•Explain each step of the program development lifecycle (PDLC)
•Define and explain MVC and Dependency Injection
PHP Platforms and Containers
PHP is a powerful language because it can be adapted for use on almost any hardware or software platform.
The ease at which it interfaces with HTML and JavaScript provides the ability for PHP applications to run on
any system that can host a browser. More and more applications are now being created using browsers as the
main interface tool for the application. This allows the application to run on PCs, the Internet, and even in
smart phones without the requirement of installing the actual application (or other software) on the device.
It also allows users to experience the same “feel” for the application when they switch between devices.
In the following sections, we will take a brief look at some of the platforms and containers that can
host PHP applications. We will use the words platform and container interchangeably. In this discussion we
consider a platform or container a software tool that “hosts” the PHP program and any output returned by
executing the program.
Electronic supplementary material The online version of this chapter (doi:10.1007/978-1-4842-1730-6_2)
contains supplementary material, which is available to authorized users.
© Steve Prettyman 2015
S. Prettyman, Learn PHP 7, DOI 10.1007/978-1-4842-1730-6_2
39Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
PHP PC Applications
PHP programs can be developed to run as PC applications hosted within an operating system. However, the
skills needed to create these applications require an in-depth understanding of communication between
operating systems and event-driven PHP programs. These advanced skills are beyond the concepts shown
in this introductory book. However, some might also argue that the skills needed to accomplish this are
unnecessary since a PHP program can run within any browser residing in any operating system.
PHP PC applications do have the ability to “create once” and “run anywhere,” as with other languages
(such as Java). PHP PC applications can be created to require no (or little) code changes between PC
operating systems and hardware platforms.
The GTK SDK (Software Development Kit) is one of several tools that can be used for PC application
development. If you visit the web site (http://gtk.php.net/), you can find information on the latest version
and future development.
If you are curious about PHP PC application development, try the link below or search in
your browser for “PHP GTK Tutorial”.
http://www.developertutorials.com/building-desktop-applications-in-php-8-02-01/
PHP Smart Phone Applications
PHP can also be used to create smart phone apps. Usually this occurs as an attempt to retrofit a current web
application to the smart phone environment. Smart phone application development requires advanced
skills in developing communication links between your program and the smart phone operating system.
Smart phone apps may be necessary to use some of the features built into the smart phone operating
system (such as GPS). All smart phone operating systems provide API (Application Program Interface) calls
that allow applications residing on the phone to use these features. Although web applications (discussed
later in this chapter) can run in a browser on a smart phone, they cannot make API calls to the smart phone
operating system (since they are not hosted within the phone itself ). If the application requires the ability to
interface with the smart phones operating system, it must reside on the smart phone.
Developing smart phone applications require advanced programming skills and an in-depth knowledge
of the smart phone operating systems. Some of this hassle can be reduced by using one of the free smart
phone SDKs (Software Development Kits) available today. Some SDKs now provide the ability to convert
applications for use on multiple operating systems.
You should have good basic PHP skills before attempting to create smart phone applications.
PHP Facebook and Other Social Applications
PHP can be used to create applications (and games) that are hosted in the Facebook Canvas Platform and
other social applications (such as Twitter). The techniques used in these applications are similar. We will
take a brief look at the Facebook Canvas as an example.
Applications can uses tools in Facebook itself (such as the Facebook Login) using API (Application
Program Interface) calls. For example, an application can use Facebook tools to monitor the use of the
application. When a user signs in to an application (or game) using the Facebook sign-in, the user must
acknowledge and accept the security levels necessary to run the program. By accepting these settings, the
user is giving the application permission to make API calls to retrieve information (and may be change
information) from the user’s Facebook environment.
You can create PHP applications that are merely hosted by Facebook that do not require the knowledge
of API programming. Many advertisements that include click-through ability for more information are hosted
in the Canvas but actually reside on a web server located somewhere else on the Internet. The Facebook
40Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Canvas does have the ability to interpret HTML and JavaScript code. This enables the developer to create an
application that could both be displayed in the Canvas and externally in a browser.
Let’s take a brief look at how you could host an application in the Facebook Canvas.
You will keep the development in “developer’s” mode. This simply means that when you have
completed the demo, everyone in Facebook will not be able to access the application. There are additional
steps you must go through to make your application ‘live’ (see developers.facebook.com for details).
■■Warning Facebook constantly changes its security settings and API (Application Programmer Interface).
Some of the following steps might slightly change over time. If you find these steps do not work, search the
Internet for “A Simple PHP Facebook App” and check the creation date of the tutorial or videos to ensure that
you have the most up-to-date information.
Do It
Complete the following:
1.
For this example, you need to use your browser to search for an existing secure
web page (one that uses https instead of http). Facebook no longer allows
non-secured web pages to be hosted in the Canvas. Since this is a PHP book, it
would be preferable to find a web application that includes PHP code (one that
has a file ending of php instead of html). However, you can use an HTML site for
this example. Remember, this is just for demonstration and educational purposes.
You should always request permission to host a web site in another site (such as
Facebook Canvas). All web sites are assumed to be protected by copyright laws
(even when there is no indication on the site that they are copyrighted).
Note: Some sites are secured to not allow their site to be hosted in another site.
If you follow these directions and the site does not display, that may be the cause.
If that happens, search for another secured web page.
You could elect to use your own web page (such as the hello world example).
However, the web page will need a hosting environment (besides your PC).
Facebook cannot interface with your localhost development environment.
There are many low-price hosting sites now available; some for as little as $1 a
month. Most hosting companies enable you to have secured sites (using https).
However, there is usually an additional fee for this service.
When picking a host site, make sure to read the fine print to determine if it will
host PHP applications. It is a good idea to have a hosting site for you to upload
your test programs. Programs should be tested in multiple environments.
Sometimes programs react differently in different environments.
If you have your own secure URL, or one that your school allows you to use,
upload your Hello World program onto the host. Then test it to make sure it still
works in the host and make sure that you know the actual URL address that will
run the program.
41Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
2.Sign in to Facebook (www.facebook.com). If you do not have a Facebook user
ID/password, you can create one for free. This demo does not require you to
completely build a Facebook page. If you have an existing account, you might
consider creating an extra account (with a different e-mail address) just for your
development needs.
3.Once you are signed in to Facebook, go to the developer’s page
(developers.facebook.com). Find the Menu on the page. Select Apps, and then
select Add New App. A screen similar to the one shown in Figure 2-1 will appear.
Locate and select the Facebook Canvas option.
Figure 2-1. Selecting Canvas from Facebook developer’s page (11/17/14)
(Remember that Facebook does change their screens. However, the sign-in process should be similar to
this demo.)
The next screen requires you to enter a name for your application. Any unique name is fine since this
application will not become live. You might also be prompted with some other questions related to whether
this app is part of another app (no) and you may be requested to select a category (Apps for Pages would
be fine). Once you have filled (and selected) the required information click the Create App ID button.
4.
42
You should now see a Quick Start page similar to Figure 2-2. Ignore the code at
the top of the Quick Start page (it’s beyond what we want to accomplish). Scroll
down the page to find the textbox that says, “Where Is Your App Hosted?”. You
may see a textbox (not required) that requests you to enter a unique URL for your
app. If you do not enter one, Facebook will generate one. For our demo, we will
leave it blank.Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Figure 2-2. The Facebook Quick Start page
Another textbox requires you to enter a secure URL to link your app into
Facebook. This is the actual location of your application on the Internet. Enter
the complete address of the secure web page you have discovered or enter the
location of your “Hello World” program if it is hosted on a secure site (https).
Note: Facebook requires (at least) an ending slash for your link, something
similar to:
www.mysita.com/projects/myfirstprogram.php/
Click the Next button.
5.
The next page displayed will show more example code. This code can be used
to log in to your application using the Facebook login and has the ability to
request Facebook permissions for your application. However, our demo does not
need login ability or any Facebook permissions. Just click the Next button at the
bottom of the page.
43Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Figure 2-3. The Facebook Open App page
6.
Click the Open Your App button. Once you click the button, Facebook will try to
load your page in the Canvas.
However, if you have picked an existing secure web page and see a message
similar to Figure 2-4, the page you selected might not allow hosting in another
site. If this happens, go to Steps 7-10. If you were successful, skip to Step 11.
However, copy and paste the URL (from the browser) that Facebook uses to
display your page, so you can test it again, if needed.
44Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Figure 2-4. Facebook open app failure
7.
If your page did not display, do the following. After you have copied the URL,
close the test page. You now want to find the “Dashboard” for your app. If it is
not visible on your Developers Facebook page, go to the menu at the top of the
page and select Apps. A drop-down list should display showing the name of your
app(s). Select your app.
45Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Figure 2-5. The Facebook dashboard
8.
Once you have displayed your dashboard, select Settings on the left menu.
Figure 2-6. The Facebook Settings page
46Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
9.
Scroll down to the bottom of the page. Locate Secured Canvas URL and erase the
address that resides in this textbox. Type the location of another secured web
page (https) in the box.
Remember, this must be a URL on the web, not your localhost. Click the Save
Changes button.
10.
Now paste the URL of your app (if you lost the URL address, it is under Canvas
Page on the Settings Page) in your browser.
Figure 2-7. Facebook working app
11.You should now see your app display on the canvas within your Facebook page.
12.Were you successful? What problems did you encounter following this example?
How did you solve those problems?
Congratulations, you have created your first Facebook app (although it is not live). If you would like
some of your friends to see your app, you can go back to the dashboard and select Rolls from the menu. You
can then use your friends (yes, they have to be Facebook Friends) and give them a “role” in the development
of your app (such as “Developers” or “Testers”). They then will have access to your app without it going live.
You are on your way to making lots of money as a Facebook game developer! Well, maybe not just yet.
We left out a lot of coding to react with Facebook’s API. But hopefully you get the idea that Facebook can
easily be used as a container for your PHP applications.
PHP, AJAX, and CSS—Web Applications
PHP and AJAX (Asynchronous JavaScript and XML) work well together. AJAX provides the ability to
dynamically change portions of a web page without reloading the complete page. Most web pages have
static areas (menus, headers, and footers) that do not change relative to user interaction. It is not necessary
for these areas of the web page to change when the user interacts (clicks a button) with the page. AJAX can
enable you to develop a container (in the following example, the container is located between the div tags)
to display output from a program hosted on a web server; without disturbing the complete web page. Users
can then view content on a web page (menu, header, and footer) when the results of the user’s interaction
(clicking a button) is still being processed. If for some reason the program is slow, hung, or missing, the
rest of the page still functions. You may have experienced this when you have displayed a page that hangs
because a lot of information (a lot of ads) is trying to load at once and the page will not function because it
must be completely loaded before it is usable.
AJAX also allows you to change the content of your PHP application on the web server without
disturbing the web page. You can then update the code in your application without the user’s knowledge
(as long as you keep the name of the application the same).
Let’s look at an example.
47Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
■■Note Code example files are included on the book’s web site. You can copy and use these example without
any changes. Every attempt has been made to ensure that code shown in this book is correct. Printing errors
might affect the code shown (such as uppercase and lowercase being adjusted and parentheses being replaced
with angled parentheses). All code available on the web site is functional.
Example 2-1. AJAX_Example_JavaScript.js
function getXMLHttp()
{
var xmlHttp;
try
{
xmlHttp = new XMLHttpRequest();
}
catch(e)
{
//Internet Explorer is different than the others
try
{
xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
}
catch(e)
{
try
{
xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
}
catch(e)
{
alert("Old browser? Upgrade today so you can use AJAX!")
return false;
}
}
}
return xmlHttp;
}
function AjaxRequest()
{
var xmlHttp = getXMLHttp();
xmlHttp.onreadystatechange = function()
{
if(xmlHttp.readyState == 4)
{
HandleResponse(xmlHttp.responseText);
}
}
xmlHttp.open("GET", "myfirstprogram.php", true);
48Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
xmlHttp.send(null);
}
function HandleResponse(response)
{
document.getElementById('AjaxResponse').innerHTML = response;
}
JavaScript—A scripting language that provides the ability for a web page to be interactive.
With JavaScript, a web page can react to the user entering information into a textbox and/
or clicking a button. If you need to brush up on JavaScript or need additional examples,
review the free “The New Boston” (thenewboston.com) videos at:
https://www.youtube.com/watch?v=yQaAGmHNn9s&list=PL46F0A159EC02DF82
For a more in-depth review of AJAX, review the free “The New Boston” (thenewboston.com)
videos at:
https://www.youtube.com/playlist?list=PL6gx4Cwl9DGDiJSXfsJTASx9eMq_HlenQ.
If you don’t know JavaScript, don’t get too hung up on the details of this program. Let’s just look at
a few key points. AJAX uses HTTP GET to request a program, similar to a browser requesting a page. In
this example, an instance of the class XMLHttpRequest (which exists in the JavaScript libraries) is named
XmlHttp. This object is then used to open the request for the myfirstprogram.php (like opening a pipe).
Then the send method of the object sends the request (pushes the water down the pipe). If the file is
returned back properly, the output of the file is placed on the HTML web page between div tags with an ID
of AjaxResponse. If the browser can’t handle AJAX communication, an alert box will display suggesting the
user upgrade the browser. Although it is unlikely that anyone is using a browser that cannot interpret AJAX
code, you still should handle all possibilities.
Example 2-2. ajaxdemo.html
<head> <title>PHP Ajax Demo</title>
<meta charset="utf-8">
<link href="ajaxdemo.css" rel="stylesheet">
<script type='text/javascript' src='Ajax_Example_JavaScript.js'></script></head>
<body>
<div id="wrapper">
<div id="header"> <h1>PHP Ajax Demo</h1> </div>
<div id="content"> <h2>"Watch it!!"</h2>
<p>The words below will be replaced by "Hello World" which is pulled from the
'myfirstprogram.php' file via AJAX.</p>
<h2>AJAX DEMO</h2>
<input type='button' onclick='AjaxRequest();' value='Find Hello World!'/><br /><br />
<div id='AjaxResponse'>
Pay attention… Notice when you click the button that only this section changes.
</div> </div> <!-- end of content -->
<div id="footer">Copyright &copy; 2015 Little Ocean Waves – Steve Prettyman
</div><!-- end of footer -->
</div> <!-- end of wrapper -->
</body></html>
49Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
For you to use this script, change the xmlHttp.open statement to select the file you wish to execute
(instead of myfirstprogram.php). Change the document.getElementById line to include the ID of the div tag
you want to use to host the output (instead of AjaxResponse) in your HTML file (see the HTML code in the
next example).
HTML—Hypertext markup language is a markup language used to format the layout of
a web page. HTML is interpreted by a browser, which then displays the results to the user.
For a more in-depth review of HTML, visit the free “The New Boston” (thenewboston.com)
videos at:
https://www.youtube.com/playlist?list=PL081AC329706B2953.
If you don’t know a lot about HTML, don’t worry. You only need to look at a few lines in this example.
First, near the top of the code, a link tag pulls in the ajaxdemo.css file. This CSS file allows you to see a page
with some graphic details. It allows you to demo that the page updates without the graphics from the CSS file
repasting or blinking. Right below this line the script type tag loads in the JavaScript file from Example 2-1.
If you named your file something else, this is the line you need to adjust with the new file name. If your files
are not all in the same folder, you should include the folder name along with the file name.
In the middle of the HTML body section, the input type tag creates a button that will call the
AjaxRequest function (contained in the JavaScript file) when clicked. This causes all the JavaScript code
in Example 2-1 to execute. The last line we need to pay attention to is the <div id='AjaxResponse'> tag.
The value in id (AjaxResponse) must match the object name used in the JavaScript getElementById code
exactly. Assuming that they match correctly, once the button is clicked, the JavaScript code will request the
myfirstprogram.php file and display the results between the div tags with the AjaxResponse ID.
Example 2-3. ajaxdemo.css
body { background-color: #000000;
font-family: Arial, Verdana, sans-serif; }
#wrapper { margin: 0 auto;
width: 85%;
min-width: 800px;
background-color: #cc0000;
color: #000066; }
#header { background-color: #ff0000;
color: #00005D; }
h1 { margin-bottom: 10px; }
#content { background-color: #ffffff;
color: #000000;
padding: 10px 20px;
overflow: auto; }
#footer { font-size: 80%;
text-align: center;
padding: 5px;
background-color: #0000FF;
color: #ffffff;
clear: both;}
h2 { color: #000000;
font-family: Arial, sans-serif; }
#floatright { float: right;
margin: 10px; }
50Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Just to be complete, the CSS file is shown here. Don’t worry if you don’t know CSS. This file only makes
the web site look nice for the demo. If you are going to use this file, make sure to save it in a file with the .css
file extension. Also, if you are going to change the name of the file, make sure to also change the file name in
the link tag (in the HTML file) to exactly match. Make sure to include any folder names, if necessary.
CSS—Cascading Style Sheets (CSS) work with HTML to display graphics on a web page.
CSS describes the layout of the page, colors, text fonts, background images, and other
characteristics of the web page. For a more in-depth review of CSS, visit the free “The New
Boston” (thenewboston.com) videos at:
https://www.thenewboston.com/videos.php?cat=40&video=18754.
Double-check all three files (.js, .css, and .html) to make sure the names of the files match (exactly)
the links that call them. If all the files are properly linked, the ajaxdemo.html file will first display, as shown
in Figure 2-8.
Figure 2-8. ajaxdemo.html
If your code does not work, double-check the file names (make sure they do not have a .txt ending).
If you see a blank page, there is something wrong. Look for typos in your code. Did you forget ;, {, (, or other
coding? If you get an error message, paste it in your browser to discover possible solutions. If you do not see
an error message, go to the logs (see Chapter 1) for Apache and PHP to determine other possible problems.
51Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Figure 2-9. The ajaxdemo.html file after the AJAX request
If there are no syntax errors (or incorrect file names or locations), when the user clicks the button,
the page will request the myfirstprogram.php file using AJAX and will display the result of the execution of
the program between the div tags. In this example, Hello World will be displayed.
Do It
1.Copy the three files shown previously from the book’s web site into your projects
folder (the location that you are running your projects in Apache). Run the
HTML program. Was your test successful? If not, why not?
2.Change the file name of your .js file and change the link tag in your HTML file to
reflect the new file name. Test your HTML program. Was your test successful? If
not, why not?
3.Change the name of your PHP program. Make changes to the .js file to reflect
the new name of your PHP program. Test your HTML program. Was your testing
successful? If not, why not?
PHP, AJAX, and CSS—Smart Phone Web Applications
At this point, you should be beginning to discover the flexibility and power of creating PHP applications.
You might be a little disappointed that we did not cover app development for smart phones in any detail. As
mentioned, apps on smart phones usually do API calls to the operating system to request the use of applications
residing on the phone (such as GPS). That level of coding is beyond entry-level. Thus, beyond what is covered
in this book. However, there are times when we want to provide smart phones with the ability to access a web
application from the browser on the phone. We can provide this ability with just a few changes to the previous
demo. This provides you with an application that works with any size device that includes a browser.
52Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
You will make this change without adjusting the HTML (except for adding a link), JavaScript, or PHP
code. You can adjust the ajaxdemo web page to format properly in smart phones or other mobile devices
using CSS. In this example, you only need to change the HTML file to discover the size of the display
(interface). Then CSS can be used to change the graphics to fit the proper screen size.
If the PHP file includes a lot of HTML (and/or other CSS code), we might need to also adjust the PHP file.
However, we should always consider having CSS format the overall output (instead of the PHP file). This will
allow you to use the same code in multiple containers (hosts) as you have seen demonstrated in this chapter.
You can add the following lines just below the link to the original CSS file in the ajaxdemo.html file.
<link href="ajaxdemomobile.css" rel="stylesheet" media="only screen and
(max-device-width:480px)">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
■■Note The new complete HTML file is located on the book’s web site.
These two lines will attempt to determine the size of the display screen and use the new CSS file for any
screens that are 480px or less. The demo program, as is, will fit on most mobile devices. However, let’s adjust
it to remove some of the spacing, padding, and margins.
■■Note You can also use the CSS3 Flexbox Attribute for multiple device sizes. Since its use requires a little
more understanding of CSS, we will stick with the “old style” method. You can find more information on CSS3
Flexbox at the following w3schools link.
http://www.w3schools.com/css/css3_flexbox.asp
Example 2-4. The ajaxdemomobile.css file
body { background-color: #000000;
font-family: Arial, Verdana, sans-serif;
margin: 0;
}
#wrapper { margin: 0 auto;
width: 100%;
margin: 0;
min-width: 0px;
background-color: #cc0000;
color: #000066; }
#header { background-color: #ff0000;
color: #00005D;
font-size: 100%;
padding: 0.5px 0.5px 0.5px 0.5px; }
h1 { margin: 0px; }
#content { background-color: #ffffff;
color: #000000;
padding: 0.5px 0.5px;
overflow: auto; }
#footer { font-size: 80%;
text-align: left;
padding: 0px;
background-color: #0000FF;
color: #ffffff;
clear: both;}
53Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
h2 { color: #000000;
font-family: Arial, sans-serif;
margin: 0px;
}
#floatright { float: none;
margin: 0px; }
Compare Example 2-4 to Example 2-3. The code in Example 2-4 is not perfect, but it does give you an
idea of what can be adjusted in the original CSS file for display in mobile devices. This example reduces
margins and padding to zero, or almost zero. This greatly reduces the wasted space on the display of a
smaller mobile device.
Do It
1.
Locate the new HTML file and CSS file on the book’s web site. If you have a web
host provider, upload these files (and the .js file) to the host. Try to access the
HTML page from your smart phone. You can also try to display the page by using
the URL location of the file on the book’s web site. Was your test successful? If
not, why not? Did the page format properly on your phone? If not, what do you
think needs to be adjusted?
■■Note If you don’t have a host web site on the Internet, you can also test this CSS file by downloading one of
the free mobile emulators available on the web (try www.download.com). You can also change the link tag in the
HTML file to point to the ajaxdemomobile.css file instead of the ajaxdemo.css file. Then try reducing the size
of your browser to simulate a smart phone screen.
PHP, HTML, JavaScript, CSS, and Dynamic Web Pages
As a last example of containers (hosts) for PHP programs, let’s consider the browser. As you have seen
in this chapter, you can use an HTML file to call our PHP program (clicking the button in the previous
demonstration). This, as detailed in Chapter 1, will cause the PHP program to execute and the results to be
returned to the browser. You could also have your PHP program return HTML code.
Example 2-5. Dynamic HTML page created by a PHP program
<?php
print "<html>";
print "<head><title>My Program</title></head>";
print "<body>";
print "<h1>Hello World</h1>";
print "</body>";
print "</html>";
?>
You could return a complete HTML page (even with JavaScript and links) back to the device (browser)
that requested the PHP program to execute. Example 2-5 would create a complete dynamic HTML page
from within PHP code. The output created can even contain links to CSS files and embedded CSS tags for
formatting. However, I urge caution on embedding CSS tags that depend on the container being a certain size.
As the developer, you do not know what type of device will display the result (PC, smart phone, tablet, or pad).
It would be better to provide multiple CSS files (as shown previously) to format the output for different devices.
54Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
In the previous examples, we have separated the initial interface (HTML and JavaScript) from the PHP
program. You could actually place the HTML (to display the initial web page) and PHP code in the same file.
You can create a PHP file that will determine whether the user has ever requested the page before. If
they have not, or the browser has timed them out, then the PHP program could display an initial HTML
page for the user to interact (such as clicking a button). The same program could then call itself again to
determine if the button has been clicked and return a response.
Let’s look at a different version of the Hello World program to do just that.
Example 2-6. The callmyself.php file
<?php
if (isset($_POST['submitbutton']))
{
print "<h1> Hello World </h1>";
}
else
{
print "<html><head><title>PHP Example</title></head>";
print "<form method='post' action='callmyself.php'>";
print "<input type='submit' id='submitbutton' name='submitbutton' value='Find Hello
World!'/>";
print "</form>";
print "</body></html>";
}
?>
For a more in-depth demonstration of PHP If statements, visit the following free videos
from “The New Boston” (thenewboston) at:
https://www.thenewboston.com/videos.php?cat=11&video=17004.
This program includes a simple if conditional statement to determine if the user has clicked the
submit button.
The format of the if statement is as follows:
if (conditional statement)
{
// code to execute if the conditional statement is true
}
else
{
// code to execute if the conditional statement is false
}
A conditional statement usually compares two values to determine if they are the same or different or
calls a method which returns a true or false value. We will look at functions returning values in a moment.
Let’s look at a quick example of the first type.
Conditional statements use a comparison operator (==, <, >, <=, and >=) to determine if the
statement is true or false.
55Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
If ( a > b)
{
print "it's A!";
}
else
{
print "it's B!";
}
In this example, the values in properties a and b are compared. If a is greater than b, then “it’s A!” is
displayed. Otherwise, “it’s B!” is displayed. PHP does some type conversion when it determines that it might
be necessary. For example, assume a = "5", and b = 6. PHP would convert the value in a from a string 5
to a number 5 so it can do the comparison. Many languages do not do this and will display an error if you
try to compare strings and numbers. If you don’t want this conversion to occur, you can use some special
comparison operators. For example, you can use three = signs to see if values are exactly the same (a === b)
instead of two.
Security and performance—Whenever possible use === instead of ==. This will assure that
you get exactly what you expect.
In Example 2-6, the if statement calls a method (isset). $_GET tries to retrieve the property
('submitbutton') and its value (“Find Hello World!”) from the HTML form, which used HTTP GET to pass
the information (you could have used $_POST and HTTP POST). isset will return a false or true back to the
if statement, depending on whether or not $_GET could retrieve the property (and its contents). The true or
false will cause the if statement to determine which block of code to execute.
As mentioned in Chapter 1, an object (such as a button) within an HTML form will produce a property
and value combination based on the object’s name and whatever is contained in the value statement of that
object. This is even true for submit buttons that have been given a name (id) and value (as in Example 2-6).
The first time the program is called from the browser, the button has not been clicked. So there is no
submitbutton variable created. A false is returned by the isset method. The code jumps to the else section
and executes the print statements that display the HTML form and submit button (as in Figure 2-10).
Figure 2-10. callmyself.php before the button is clicked
When the user clicks the button, the program calls itself (look at the action parameter of the form tag).
This time, since the user has clicked the button, there is a submitbutton property and a value ('Find Hello
World!') for that variable. The program determines that the variable is “set” (has a value in it) and returns
a true. The if statement then executes the one line of code between the if and else statements. Hello
World is then displayed. The PHP program handled all the functionality of the application without using any
existing static HTML page.
56Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Figure 2-11. callmyself.php after the button is clicked
The advantage of this technique is that all code can be contained in one file. Thus, all changes occur
in one place. The disadvantage of this technique is that all code is in one file. The more complicate the
code, the “messier” it can become. One way to clean up the code would be to move the code into functions
contained within other PHP libraries (we will look at this later). The additional disadvantage is that the file
name cannot be changed without affecting the users. If you changed the file name to mynewprogram.php,
you would need to inform all your users of the new name (and maybe location). The previous examples
using AJAX allowed you to change the file name within the HTML code page, but did not require you to
change the actual name of the HTML page that the user would request.
Do It
1.
Find the callmyself.php file on the book’s web site. Download the file to your
Apache projects folder. Change and add print statements to display your
complete name, the term, and your major. Test your program. Did your program
run successfully? If not, why not?
PHP Three-Tier Architecture
Most of this chapter has been discovering the different platforms (or containers) that can “host” PHP applications.
We have found that PHP can display its output in almost any container (PC, Facebook, smart phone/mobile
device, or browser). The ease at which PHP can interact with JavaScript, HTML, and CSS has provided this
flexibility. Today, almost any platform has the ability to interact with the Internet (and those that don’t will
sometime in the future). Any platform that can interact with the Internet can also interact with a PHP application.
This independence (or flexibility) of the interface demonstrates a logical separation of the platform or
host of the interface from other “tiers” (parts) of the application. This leads into a discussion of the three-
tier architecture and the logical design of PHP applications. The larger the application, the more likely the
application will need to be broken into modules. Also, it’s more likely that these modules could reside on
different servers (or web servers). Larger applications likely will require multiple programmers writing code
at the same time. These programmers may even use different languages to create the program modules.
Building a large application is not much different than assembling a car. The individual components of
the car (body, wheels, electronics, and engine) are assembled individually first. Each completed component
is then placed inside the chassis of the car. The components are then connected (hoses, wires, and belts) to
other components. When completed, all components of the car work together. If a component breaks, it can
be replaced without causing replacement or changes to any other component in the car.
The idea of modular (or component) programming is based on the methodology of blocks of code
that can be created individually to be assembled with other modules to produce a working application.
The modules can be modified or replaced without requiring changes to other modules. This methodology
has been around for a while. Even today, many programs are not modular because smaller programs can
work efficiently without being broken into modules. However, as these applications expand into larger
57Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
applications they become more difficult to update or maintain. A change requires updating the complete
application rather than just a module. At some point, an expanding application that has not be created with
modules has to be redesigned from the ground up into modules for better maintenance and reliability.
As discussed in Chapter 1, a search engine can display a web page interface in a browser on the user’s
PC. Once the user enters the search request, the information can be transmitted across the Internet to a
remote server (we don’t know where), which executes a search application (we don’t know what program
language was used to create it). The application then searches a database (we don’t know what DBMS or
where it is located) for the requested information. The results are sent back to the application, which in turn,
sends the information back to the browser (via the web server) on the user’s PC.
Figure 2-12. Three-tier modular application design
The flow of information in this process causes the design of this type of web application to naturally
fall into (at least) three tiers (modules); interface tier, business rules tier, and data tier. One advantage of
breaking code into different tiers is the ability to reuse tiers with multiple applications. For example, our
search engine could use the same business rules tier and data tier for multiple devices while using a different
interface (PC app or smart phone app). Distinct tiers can also be updated without affecting other tiers.
The smart phone app interface could be updated to use the latest features of the newest operating system
without changes to the business rules or data tiers. Code within the business rules tier could be updated
to fix logical bugs without requiring changes to the interface or data tiers. Let’s take a look at what typically
occurs in each tier.
Modular Three-Tier Applications, Design, Programming—Three-tier design provides
the ability to create programs that can be separated into an interface tier, business rules
tier, and data tier. The interface tier contains all graphics and program code related to
displaying information to the user. The business rules tier does not contain an interface.
However, it processes any information submitted from the interface tier and can then
submit information to the data tier to be stored. The data tier is the primary storage
location for the application, which may include the use of a database. Each tier can be
independently changed and built (compiled) without affecting the other tiers.
Do It
58
1.What are the name of the three tiers of modular design?
2.How is modular design similar to designing a building?
3.How does modular programming make coding more efficient?Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Interface Tier
Figure 2-13. Interface tier
The interface tier (IT) displays information and provides the user the ability to interact with the
application. Most interfaces provide a Graphical User Interface (GUI), which allows the user an attractive
way to view information and interaction with the application. GUI interfaces provide common objects,
including textboxes and buttons, which help the user to quickly adapt to new applications. In addition,
pictures, images, icons, video, and sound can often be included to keep the user’s interest. Menus and other
navigation objects are also commonly included to help the user move through the application successfully.
Objects—Objects are blocks of code that have already been compiled for use within an
application. Objects can be placed into a program by making an instance of the object.
Objects contain methods and properties. Methods (or functions) are blocks of code that
accomplish a task (such as placing items in a list box). Properties (or variables) are
characteristics of an object that can be changed (such as a background color). Objects are
usually well tested and error free. By reusing existing objects, the programmer can quickly
create more reliable programs.
This tier will display information using objects (such as labels and picture boxes) or scripting code
(such as the ajaxdemo.html example in this chapter). The tier will also accept information from the user
through interactive objects (such as textboxes and buttons). Static information can be provided from within
the tier (via menus, logos, or footers). Dynamic information is usually provided to the tier from the business
rules tier (such as the output from myfirstprogram.php shown in this chapter).
Some coding (shown in later chapters), which prepares information to be send to other tiers may
be present in the interface tier. For example, JavaScript code that verifies that the user has entered all the
required information or the proper information (numeric characters in an age textbox) is acceptable.
Additional code may also prepare information received from the business rules tier to be displayed (such as
converting numbers to text format) in the interface.
Verification/Verification Code—Verification code validates information. The code
compares the information received to an expected standard format. For example, the code
can verify that an e-mail address has both a @ and a . (period). If the information has
both symbols, it could be considered “valid” (although we still are not sure that the e-mail
address actually exists). If it does not have both symbols, the code is not valid. Information
that is not valid usually will cause the program to display an error message to the user
requesting valid information be reentered.
59Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
The interface must provide code with the ability to react to user interactions (clicking the Submit
button), commonly called user events. Code may also be provided that prepares information provided by the
user for use by other tiers (such as converting text entered by the user into number format for a calculation
in the business rules tier).
Event—Event-driven languages (such as PHP) can execute blocks of code when an event
occurs. Events can be something that the user has done (such as clicking a button). Events
can also be fired by the operating system. Programs provide listener code that “hears” an
event. When an event occurs, the code provides an event method, which then executes.
A program chooses which events to listen for by the presence, or lack of, listener code.
The interface tier should not directly interact with a database management system or a database itself.
By doing so, this would lock the tier into the database location and actual design of the database. The tier
should not manipulate data (except for display purposes). Any accounting, mathematical calculations, or
processing of data related to the application itself should be accomplished in the business rules tier.
Database Management System (DBMS)—A Database Management System is software
that allows a user or an application to create and define a database. It also provides the
ability to insert, update, or delete information in the database.
DoDon’t
Format data for displayAccess data from database
Verify correct information from userCalculate results
Respond to user eventsProcess information
Handle the unexpected (exceptions)Verify user IDs and passwords
Format data for business rules tier
Do It
60
1.Give three examples of items that would be included in the interface tier.
2.Give three examples of items that would not be included in the interface tier.
3.Can some program code exist in the interface tier? If so, what tasks does this
code provide?Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Business Rules Tier
Figure 2-14. Business rules tier
The business rules tier processes all information and data received from the interface tier and the data
tier. This tier will also return information requested by the interface tier (such as returning "Hello World")
and submit information to the data tier for storage. Most of the actual programming code is contained in
this tier.
The business rule tier code usually makes an application truly unique from another application. If an
application is copyrighted, the uniquely creative algorithms are probably hidden in this tier. For example,
many of the differences in web search engines and how the information will ultimately be displayed are
embedded in the business rules tier.
Unlike the interface tier, which may contain code in the browser, all coding in the business tier is
completed using a program(s) (such as PHP) on a server. Scripting and programming code residing on a
server is secured by the server itself and cannot be accessed by the user. Business tier code can also reside on
an application server (as a service) or on a web server (as a web service). Servers ensure that code in this tier
is secure by not allowing direct access by the user.
Server/Application Server/Web Server—A server is connect to a network to provide
services to any node (machine) on the network (or the Internet). A server can provide
more than one service (communication, security, and/or storage) or can provide a specific
service. Application servers house applications that are accessible to users on the network
(or Internet). Web servers host web pages and web applications. They are usually exposed
to access outside a corporation.
Service—Services are applications that reside in the memory of a computer or server
that respond to requests from other applications. Services can be automatically loaded
into memory when the computer or server is booted or they can manually be started and
stopped when required. Services do not have GUI interfaces. The business rules tier can
reside as a service(s) on a computer or server.
If information passed between the tiers of the application can be subject to possible manipulation by
hackers, this tier may contain code, similar to the interface tier, to verify the validly and proper format of the
data received.
61Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Information passed from this tier to other tiers can be format for easy acceptance. For example, a
dataset (similar to a table or spreadsheet) can be returned to the interface tier for display in a table or list box
existing on a web page. A dataset could also be sent to the data tier to be inserted into a database.
Dataset—A dataset is a structure that can hold multiple data tables. A data table is similar
to a table in a database (with rows, columns, and data) or a spreadsheet. Datasets are
commonly used to pass information between tiers and between methods.
The business rules tier returns values to the tiers that request it. The tier does not provide any GUI
interfaces or forms of any kind. Interfaces are not needed because the tier has no direct contact with the
user at any time. All communication to the business rules tier is handled either through the interface tier
or the data tier. Like the interface tier, the business rules tier does not directly update stored information in
databases. All storage updates occur in the data tier.
DoDon’t
Manipulate dataDisplay information
Format dataSave data on secondary device
Store data in memoryDisplay error messages
Raise exceptions
Verify data
Do It
62
1.What tasks can business rule tier code accomplish that is similar to a task
accomplished by code in the interface tier? Why is this code possibility
duplicated in both tiers?
2.How does the business rules tier pass and receive data (information)?
3.Why must the business rules tier talk indirectly through the interface tier to
provide information to the users?Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Data Tier
Figure 2-15. Data tier
The data tier’s main function is to store information on a secondary device or to return data to the
business rules tier. Data can (and usually is) be stored in a database using a Database Management System
(like MySQL). The tier interfaces with the business rules tier, since data may be manipulated before being
displayed, as in the creation of a report. Data is returned from the tier in a format that the business rules tier
(and program languages) can accept. Common formats include JSON, XML, SOAP, and datasets.
JSON—JavaScript Object Notation is a format, similar to XML, to store and exchange
data. JSON can be viewed within an editor or browser. It is most commonly used to pass
data between tiers.
XML—Extensible Markup Language is a markup language, similar to HTML, to store and
describe data. XML can also be used to transmit data between tiers. We will provide an
example of XML in Chapter 3.
SOAP—Simple Object Access Protocol is used to exchange data with a web service. It works
with HTTP (Hypertext Transfer Protocol) and SMTP (Simple Mail Transfer Protocol) to
provide communication between an application and a web service.
Web Service—An application, without an interface, that can be called to process
information. A web service can provide the functionality of the business tier and/or data
tier remotely on a web server. The Web Services Description Language (WSDL) is used to
describe calls to the web service and the format of information accept and returned by the
web service. WSDL is similar to XML.
Validation with the data tier is done in the Database Management System and/or via program code.
Validation in this tier is the last chance to make sure data is reliable and accurate before the database is
updated. It is much easier to catch validation problems before they are stored than after invalid information
has been recorded.
Data storage can be local and/or remote. Mobile devices can restrict storage to local databases
(smart phones), but can also use WSDL (web services) to store and retrieve information remotely on a
server or within a cloud (such as Microsoft Azure). Additionally, many applications save small amounts of
information locally with cookies, or larger amounts of information in remote databases.
Microsoft Azure—Microsoft Azure is a cloud platform that provides data services, app
services, and network services. Visual Studio Applications can be uploaded and secured in
the Microsoft Azure cloud.
63Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
The data tier uses SQL statements (INSERT, DELETE, UPDATE, and SELECT) to retrieve and update
information in a database. However, the actual request for the information to be changed comes from within
the business rules tier. For example, a user requesting an address change in a web application would have
to enter the requested change in the interface tier, format the update request in the business rules tier, and
change the information in the database in the data tier.
DoDon’t
Save data on secondary deviceManipulate data
Update data on secondary deviceDisplay error messages
Raise exceptionsDisplay information
Verify data
Do It
1.Why must the data tier validate information again, before it is placed in a
database?
2.What type of code, if any, can exist in the data tier?
3.What is SQL used for?
Putting It All Together
The Program Development Life Cycle (PDLC) leads us through the overall design and creation process
for application development. The key to application development success is to properly plan the layout of
your system before beginning the coding and development. By doing so, you reduce the amount of errors
and problems that can occur. Many projects can run into a “corner” that the developer cannot get around
because of poor planning up front. Different authors and instructors will vary on their estimates on the time
to spend in the planning process because it is based on the individual. A more skilled, or more experienced
individual may do less planning than someone who is not as confident. However, everyone plans out, at
least, the required modules and the type of data flowing between the modules; even if it is done just on
scratch paper. The key, also, is to revise your plan as you work through the coding and development process.
As you start coding, you will discover “I did not think of that” scenarios. Go back, right then, and adjust your
plan. The more you do so, the less likely that you will hit a “corner” that you cannot find a way to get around.
Always involve the user in your PDLC process, along with as strong a team of experts. Remember you
are developing this project to make your customer happy. You may believe you have the ultimate design and
solution. However, that does not matter if your user does not agree with you. Sometimes you do have to adjust
your thinking to be more in line with the customer. Working in the industry I remember a major change-
management system that was being created within my work group (I was so happy to not be involved in the
project). The designers and coders created a very fancy and expensive, system that, once it was implemented in
the data centers, was hardly used. Why? The data center personnel did not want a fancy system; they wanted a
simple system that could quickly complete the tasks needed. Even though the original project took six months
to complete, a data center employee spent a few weekends of his own time creating another system that
accomplished what they wanted. That system was implemented and used for many years afterward.
Commonly the PDLC is defined with five steps; Planning and Information Gathering, Analysis, Design,
Implementation, and Evaluation. In the planning and information gathering step, all requirements for the
project and the project team are assembled. Initial documents are also created answering the questions “What
are we trying to accomplish?”, “How are we going to accomplish it?”, and “What team are we going to use?” In
64Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
the analysis step, a determination is made as to the feasibility of the project. Documents answer the questions
“Can we accomplish the project with the team and resources available?”, “What additional resources need to be
gathered?”, and “Can the project be accomplished in the timeframe and budget allocated?” If the project makes
it past the analysis step (many projects don’t), then the actual design begins. In the design phase, a top-down
approach begins by first looking at the overall required modules, and the data flow between the modules. More
details are gradually added as the methods required are determined, a platform is decided on, communication
tools come together, and information storage is designed.
After a detailed design has been created, and approved, the project goes into development and testing.
Both unit testing (individual modules) and complete application testing will occur. After successful testing,
the project is ready for the Implementation Step. During implementation decisions have to be made on how
to install the project and when to install it. After implementation, the application is “live”. But still continuous
evaluation should occur to determine efficiently needs, security problems, logical problems, and possible
overall enhancements to the project. Eventually, most projects will then revert back to the first step of the
process for the development of a new version.
This section assumes that the planning and information gathering and analysis steps have been
completed successfully, which would move you into the design step. We will look, in general, at the process of
determining what type of activities should occur in which tiers of an application. We will also look at the type of
data or information that may flow between the tiers. In later chapters we will refine this analysis by determining
the types of methods that would be required and the information and data that must flow into and out of these
methods. We will also look at the actual activities and code that would be created for these methods.
The best way to learn is by doing, so let’s look at a case problem and go from there.
Case Study
Company: Atomic Fish Hatchery, Inc.
Project: Field Sales Ordering and Commission Application
Scope: This application will be accessible from multiple devices (mobile and PC) to allow field sales
agents, managers, and payroll personnel easy access to necessary information. The system will accept
information from the sales agent that will be used to determine purchase costs to the customer, sales
volume for the sales manager, and commissions for the payroll department. Phase one of the project is
the development of the application to accept information from the sales agents, display purchase cost,
determination of commissions, and storage of the information into a MySQL database. After successful
testing the platform, it will be moved and secured in the company’s cloud platform.
Inputs (from Sales Agent): Sales Agent Number, Customer Number, Order Number, Item Number,
Quantity, and Special Needs
Outputs: (Additional information may be determined for future phases)
To database: In addition to the input from the sales agent: commission, sales total
The goal is to determine the types of information and processes that will occur in each tier and the
data flow between the tiers. Once determined, this information could be used to develop a general empty
structure of tiers that would eventually hold the completed project.
Interface Tier
The company has requested access from multiple devices. Thus, we must keep in mind that mobile devices
(tablets and smart phones) will be used to input and output information in addition to laptops and PCs. We
may decide to create multiple interfaces for each type of device. With three-tier design, you could design a
system that shares the business rules tier and data tier contents while allowing this flexibility.
As a designer and/or programmer, you must determine the type of information that will be entered;
several fields (Sales Agent Number, Customer Number, Order Number, Item Number, and Quantity) all
indicate that numbers will be entered. You need to determine the size of these fields and verify that only
65Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
numeric information is entered. The Amount field is the only field that possibly could be used in a future
calculation. Therefore, all other fields can remain in text format. The Amount field would need to be
converted to integer format before passing the information to the business rules tier. The Special Needs field
would be a larger field that can accept alphanumeric characters. The database does not currently exist, so
you would determine field sizes from company policy and/or current paper forms used. Once reviewed, it
has been determined that the customer and sales agent numbers are eight characters. The order number
and item numbers are currently six characters.
After gathering this information, you can now design the top view of the interface tier, as shown in
Figure 2-16.
Figure 2-16. Atomic Fish Hatchery Inc. sales and order application interface
Fields with + may be used more than once to enter in all information by the sales agent. When the
actual datasets and data tables are created, multiple columns must be available for these entries.
An additional form (not pictured) would also exist to display the results of the order. This form would
display a summary of the items purchased and the total cost. All information could be entered by the sales agent,
submitted, and held in the interface tier (a cookie?), until the sales agent indicated that the order is complete.
Then the information could be transferred to the business rules tier for processing. The business rules tier could
then return the information to be displayed in the second form. The second form could include an “approved”
(or cancel) button. Once “approved,” the information could then be passed to the data tier for storage.
66Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Business Rules Tier
The business rules tier would include two processes. One process would accept the complete order
(dataset/data table) and determine the total sales cost after the sales agent clicked a “competed order”
button. It would then return a summary of this information to the second form. The other process would
execute when the agent clicks an “approved” button. The process would then determine the commission
and create a dataset (there are now additional fields) to be passed to the data tier. The information would
then be passed for storage.
Additionally, to make sure order data is valid, methods would be needed to validate the fields received
from the interface. The top view of the Business Rules Tier would the following shown in Figure 2-17.
Figure 2-17. Atomic sales and order application business rules tier
Data Tier
In this case, the data tier is only used to store the information provided by the business rules tier. The tier
would verify the information received and store it into the database, as shown in Figure 2-18.
67Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Figure 2-18. Atomic sales and order application data tier
There are many tools available to help in the design process. The important factor is that the designer
include all the important information in the process. As an alternative to the example, you could remove
the description of the datasets from the tiers and place them in the data flow between the tiers, as shown
in Figure 2-19.
Figure 2-19. Alternate three-tier model
68Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Figure 2-20. Atomic Sales and Order Application Three-Tier Model
Do It
1.When must you convert numbers to numeric form (such as Integer) for storage
within a database?
2.Why use datasets to pass information between tiers?
3.What items have been missed or ignored in the case example?
69Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
MVC and Dependency Injection
MVC (Model-View-Controller) is a design pattern used by software engineers (including PHP application
designers) to communicate between the view and model using a controller. The controller is software that
transfers any user input to the model. MVC design can be considered circular because the model, controller,
and view have the ability to communicate with each other. The standard three-tier model is linear; for the
Interface to receive or pass information to the data tier, it must pass the information through the business
rules tier. There are many tools on the market (such as Ruby on Rails) that can assist software engineers in
designing MVC applications.
Visit thenewboston.com for a generic example of an MVC application:
https://www.thenewboston.com/videos.php?cat=88
MVC and Component Based Design can use Dependency Injection. Dependency Injection allows the
program (client) that will use a block of code (such as a class) while not know the actual implementation of
the block of code. This allows for independent development, updating, testing, and reusability of modules.
This is similar to the ability of the ignition of a car communicating with the starter. The ignition has little
knowledge of the starter component and how it operates. It does not even know the brand of starter.
The ignition merely knows to send a signal (electricity) to the starter to tell it to operate. If the starter is
replaced, the ignition is unaware and unaffected by the change, as long as the starter still operates when it
receives the signal. While MVC and dependency injection are advanced topics, we will explore on example
of dependency injection in Chapter 4.
Chapter Terms
Platform or ContainerGTK SDK
Smart Phone APIFacebook Canvas Platform
Facebook APIFacebook Developer’s Page
AJAXHTTP GET
XMLHttpRequestdocument.getElementById
CSSConditional Statement
If StatementThree-Tier Architecture
Interface TierBusiness Rules Tier
Data TierGraphical User Interface (GUI)
ObjectsVerification Code
EventsDatabase Management System
ServersApplication Servers
Web ServersService
DatasetJSON
XMLSOAP
WSDLSQL
(continued)
70Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
Microsoft AzurePDLC
Planning and Information GatheringAnalysis Step
Design StepImplementation Step
Evaluation StepMVC (Model-View-Controller)
Dependency Injection
Chapter Questions and Projects
Multiple Choice
1.
2.
3.
4.
The interface tier
a.Is the primary storage location for the application, which may include the
use of a database
b.Provides common objects, including textboxes and buttons, that help the
user quickly adapt to new applications
c.Should be used for any accounting, mathematical calculations, or
processing of data related to the application
d.Displays information and provides the user the ability to interact with the
application
A service is an application that
a.Can be manually started and stopped when required
b.Does not have an interface
c.Resides in the memory of a computer
d.All of the above
SOAP stands for
a.Security Object Access Protocol
b.Simple Object Access Process
c.Simple Object Access Protocol
d.None of the above
The five steps of PDLC are
a.Planning and Information Storing, Analysis, Design, Implementation, and
Evaluation
b.Planning and Information Gathering, Analysis, Design, Implementation,
and Evaluation
c.Planning and Information Gathering, Analysis, Data, Implementation, and
Evaluation
d.Planning and Information Gathering, Analysis, Design, Observing, and
Evaluation
71Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
5.
6.
7.
8.
9.
10.
72
The Web Service Description Language is used to
a.Describe calls to the web server and the format of information sent and
returned by the web service
b.Describe calls to the web service and the format of information accepted by
the web service
c.Describe the code being used in HTML documents
d.Describe calls to the web service and discard the information received
CSS stands for
a.Cascading Static Styles
b.Cascading Style Sheets
c.Cascading Script Sheets
d.Cache Style Scripts
What type of code belongs between the <script>……</script> tags?
a.Java
b.HTML
c.Servlets
d.Javascript
What is the three-tier architecture composed of?
a.GUI/tags/validation
b.interface/business/data access
c.Objects/variables/SQL
d.JSPs/servlets/sockets
The best description for the Model View Controller (MVC) is
a.An architectural pattern that divides a given software application into three
interconnected parts.
b.A programming language used to validate and secure information in any
browser.
c.A type of validator mainly used to check if the user entered the information
on the correct format
d.A type of method that is used to convert a harmful code so it cannot be
executed by the compiler.
What is performed in the Analysis step?
a.Determination of the feasibility of the project
b.Creation the code and error correction
c.Determination of the logical data flow of the project
d.Re-evaluation of the implemented application for possible improvementsChapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
11.
12.
13.
14.
15.
16.
Why must you validate your code?
a.To determine the capabilities of the browser you are using
b.To make sure your information is correct and secure
c.To make sure that you have only JavaScript and HTML5 code
d.To check if your browser can run your code
What is the correct HTML syntax for referring to an external cascading
style sheet?
a.<stylesheet>my_style_sheet.css</stylesheet>
b.<link rel="stylesheet" type="text/css" href="my_style_sheet.css">
c.<style src="my_style_sheet.css">
d.None of these
Which tier is used to store and retrieve data?
a.Presentation tier
b.Data tier
c.Application tier
d.None of these
What does SQL stand for?
a.Structured Question Language
b.Structured Query Language
c.Strong Question Language
Which is true about smart phone APIs?
a.The smart phone APIs allow procedural (method) calls to be made to the
phones operating system.
b.The smart phone APIs will allow web applications to make procedural
(method) calls to the phone’s operating system.
c.The smart phone APIs re not needed for applications that use GPS.
d.Not all smart phones come equipped with an API.
A dataset is similar to
a.A paragraph of data
b.Sets of two words together
c.A table or spreadsheet
d.None of these
73
www.allitebooks.comChapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
True/False
1.Facebook Canvas Platform can accept apps written in any code, not just in PHP.
2.WSDL stands for Web Service Definition Language.
3.AJAX is used to create more interactive applications.
4.AJAX provides the ability to dynamically change portions of a web page with
reloading the complete page.
5.When using the HTTP GET function, the URL must be in quotation marks.
6.A service is a function provided by a web server.
7.The design step comes after the analysis steps have been completed successfully.
8.MVC (Model-View-Controller) is a design pattern used by software engineers
(including PHP application designers) to communicate between the view and
model using a controller.
9.Planning and information gathering is part of the PDLC.
10.Dependency Injection allows the program client to enter a block of code to know
the implementation of the block of code it will be using.
11.Objects are blocks of code that have already been compiled for use within an
application.
12.HTML stands for Hypertext Markup Language.
13.Method signature includes the method name, and the number, types, and order
of its parameter.
14.Datasets are not one of the many formats used when sending data between tiers
in a three-tier architecture.
Short Answer/Essay
1.In your own words, briefly describe each of the steps in the PDLC.
2.Why do you think development of PC applications using PHP has decreased?
3.Why do you think some web sites do not allow themselves to be inserted inside
other sites (such as the Facebook Canvas)?
4.What are the advantages of creating web pages that use AJAX?
Projects
1.
74
Using the steps of the PDLC demonstrated in this chapter, design the logic for a
smart phone and mobile device application that allows your water meter reader
to enter the full address and meter readings. The application should validate the
information and send valid information to a MySQL database. If the information
is not valid, a message should be displayed back to the user indicating the
problem.Chapter 2 ■ Interfaces, Platforms, Containers, and Three-Tier Programming
2.Adjust the AJAX example in this chapter (the code is available on the book’s
web site) to display a mini version of your resume.
3.Adjust the Hello World (Example 2-6, callmyself.php) program to display your
college/university name, address, and main phone number.
Term Project
1.
Using the information you have determined from the Chapter 1 Term Project
assignment and the design techniques shown in this chapter, develop a logical
design of the ABC Computer Parts Inventory application. This design should
include all possible programs, interfaces, and data storage. The application
design must be three-tier (interface, business rules, and data). Your final design
should look similar to the examples shown in this chapter.
75Chapter 3
Modular Programming
“Yes, I am a terrible coder, but I am probably still better than you :)”
—Rasmus Lerdorf
Chapter Objectives/Student Learning Outcomes
After completing this chapter, the student will be able to:
•Create an error-free simple objected-oriented (OO) modular PHP program
•Create a PHP class and make an instance of the class (object)
•Create an OO PHP encapsulated program, including GET and SET methods
•Create PHP methods (functions) that accept parameters and return information
•Create PHP public and private properties (variables)
•Import existing PHP code from another file or library into a program
•Validate information received using ternary (conditional) operators
PHP Libraries, Extensions, Classes, and Objects
One of the strengths of PHP is the ability to easily store modules of code in libraries. Once code has been
installed in a library it can easily be reused in other programs. The reuse of code that has already been
well tested and used in “live” environments greatly reduces program errors and increases productivity
because you don’t have to reinvent the wheel. There is no need to recreate code that is already successfully
working. It’s a waste of time and energy and likely to cause unnecessary program errors. The programmer
actually may not know what actual code exists in a module of code (class). However, the programmer knows
what parameters (such as numbers) can be passed into the “black box” and what is returned (sum of the
numbers) from the black box.
It may concern you that the programmer blindly passes information into the black box and blindly
receives information back. However, this is an advantage, not a disadvantage. This allows the creator of the
module to update the code without affecting the way the module is used. As long as the module accepts
the same input and returns the same output, the programmer who is using the module notices no changes.
Updates can occur to the module for better efficiently, better security, or to correct any program code
problems without causing the users to change how they handle the module in their code.
Electronic supplementary material The online version of this chapter (doi:10.1007/978-1-4842-1730-6_3)
contains supplementary material, which is available to authorized users.
© Steve Prettyman 2015
S. Prettyman, Learn PHP 7, DOI 10.1007/978-1-4842-1730-6_3
77Chapter 3 ■ Modular Programming
PHP Extensions
Example 3-1. Extensions in the php.ini file
extension=php_bz2.dll
extension=php_curl.dll
;extension=php_fileinfo.dll
extension=php_gd2.dll
;extension=php_gettext.dll
;extension=php_gmp.dll
;extension=php_intl.dll
;extension=php_imap.dll
;extension=php_interbase.dll
;extension=php_ldap.dll
extension=php_mbstring.dll
;extension=php_exif.dll
extension=php_mysql.dll
extension=php_mysqli.dll
;extension=php_oci8.dll
For a complete list and explanation of PHP extensions, visit:
http://php.net/manual/en/extensions.alphabetical.php.
PHP has a large amount of libraries available with thousands of lines of well tested code. Example 3-1 is
a partial copy of the php.ini file showing several extensions (libraries) that are available to be activated in
PHP. Each of these libraries is C code with a PHP wrapper (for better communication with PHP programs).
The code is already compiled (notice the .dll extensions). A library that exists in the PHP environment
can be activated by removing the comment symbol (;) in front of the extension statement in the php.ini
file. Once the INI file has been saved, PHP and Apache must be reloaded (see Chapter 1 for examples on
the location of the php.ini file and reloading PHP and Apache). This ease of adding libraries is one of the
reasons PHP has become so popular. Additional libraries can be “installed” into PHP using several methods.
One of the more popular methods, Pear (PHP Extension and Application Repository), handles code
distribution and maintenance of third-party libraries.
The use of Pear and other third-party library installation methods is beyond the scope of
this book. However, you can find additional information at the link below.
http://pear.php.net/manual/en/about.pear.php.
In addition, programmers can “install” their own libraries of code (that are not already compiled)
directly into an application via the require or require_once statement. It is common practice in
corporations to include code that may be reused many times (such as accessing a database). By providing
this (well tested) code in a local library, any changes (such as the movement of the database to another
server) can be handled in one location (the local library file), instead of requiring multiple files to be
changed. This also reduces code redundancy and increases its reliability.
While local libraries can contain just methods (functions) of code, it is more common that modules
(classes) exist in these libraries. This allows programmers to code with the “black box” concept previously
mentioned. The three-tier architecture (explained in Chapter 2) is based on this premise. The code classes
can be accessed from the library by referencing the library containing the code (via the require or require_
once statement). Once a reference is made, an instance of the class (object) is then created. Once an instance
has been created, the program code has access to all the functionality of the object.
78Chapter 3 ■ Modular Programming
Classes and Objects
A class is similar to a blueprint of a house. The blueprint contains a description (characteristics) of all the
elements needed to construct the house. However, the blueprint is not the actual house itself. It describes
what is possible if we hire a crew and construct the house. The blueprint is not considered to exist (as a
house would exist). However, it describes the items needed to build the house (nails, drywall, and wood)
and the process to build the house.
A class describes the characteristics (properties) of the module of code and the actions (methods
or functions) that can occur in that code. However, it does not physically exist (within memory) until
an instance of the class (called an object) is created. Once an instance is created, the characteristics
and methods can be accessed. Classes and objects (when created properly) protect the characteristics
(properties) from direct access. This provides the object the opportunity to verify that any request to change
a value in a property is valid before the change occurs. This is commonly called encapsulation. To protect
properties from direct access to the outside world, they should be declared using the private access type.
Private access will only allow methods within the class the ability to change the values in the properties. Set
methods (discussed later in this chapter) are used to change properties. Get methods (also discussed later
in this chapter) are normally used to retrieve property values.
Creating a PHP Class
Let’s begin by creating a basic structure for a class. You will create a dog class which will allow you to set
some characters of the dog (size, breed, color, and name) and you will provide the ability for the dog to speak
and to display the values saved in each property. You will create the dog class in a separate file (library) that
can be loaded into the program (or any other program) when needed.
To create a PHP class, you use the class keyword and encapsulate all code within the class in {}.
Example 3-2. Basic class structure in the dog.php file
<?php
class Dog
{
// all code is placed here
}
?>
As seen in Example 3-2, the class keyword is lowercase. However, the name of the class, Dog, begins
with an uppercase letter. PHP will allow you to create a class with a lowercase first letter. However, it is
common practice to easily identify classes by the use of the uppercase first letter. The actual file name
containing your class (dog.php) should also match the class name (Dog).
For more information on classes, methods, and properties visit php.net at:
http://php.net/manual/en/classobj.examples.php.
For videos, visit "the new boston" at:
https://www.thenewboston.com/videos.php?cat=11&video=17175.
Class names cannot include spaces. You should also avoid using special characters. However,
the _ is permitted and commonly used to connect two words together (set_name). You many notice that
some class names include two underscores (__) before the actual class name (__Myclass). However, this is
not a recommended technique due to the existence of “magical” classes (we will look at two of these classes
later in this chapter) that use this format.
79Chapter 3 ■ Modular Programming
As mentioned previously, a class contains properties. Properties are also called variables. Properties
include characteristics of the class. When an instance of a class is created, the properties are unique for
that object. The operating system reserves a space in memory to hold the properties. The operating system
handles memory management for us, including cleaning up properties that are no longer needed. In PHP,
anytime a closing bracket (}) is reached, properties that have been created are scheduled for removal by the
garbage collector of the operating system. The program can no longer access the property at that point.
Properties can hold many different types of data. In most languages, when a property is created you
must also include a data type to describe the kind of data being stored (such as string). However, PHP does
not require the defining of a data type. PHP determines the type of data to be stored in a property the first
time data is placed in the property. Properties are created with an initial $ and the name of the property.
Property names can include alphabetic characters, numbers, and the _. The _ can be used at the beginning
of the property (after the $) or between words. No spaces are allowed. Properties are commonly created
with lowercase letters. However, PHP does allow uppercase letters. PHP is case-sensitive and will consider a
lowercase property (speak) and an uppercase property (Speak) two different properties.
Example 3-3. Basic class structure with properties in dog.php file
<?php
class Dog
{
private $dog_size = 0;
private $dog_breed = "no breed";
private $dog_color = "no color";
private $dog_name = "no name";
}
?>
Program design recommendation—Properties are created on the fly in PHP. Properties are
created the first time you use them. This can both be a help and a pain. If you misspell a
property name, PHP will not produce an error. Instead it will create a new property with
the misspelled name. It is recommended (when possible) that properties be created with
initial values at the top of your program (or method, or class) to more easily determine
what your property name is and whether it has been created.
As seen in Example 3-3, each of the properties (except $dog_size) for the Dog class has been declared
private and initially set with a string (text). The $dog_size property has been set to the number zero
(we know it is a number and not a string because there are no "" around the zero). The operating system
will store the strings values in the properties ($dog_breed, $dog_color, and $dog_name) in ASCII format
(combinations of zeros and ones to represent each character) and will store the value in the $dog_size
property in a numerical format in memory. The operating system creates memory tables to look up the
actual memory address of the value in a variable when it is used in a program.
■■Note The format of the code must also include a semicolon at the end of the code statements (all code
lines that are executed must include semicolons).
As you may note, at this point the example is not very useful. Even if you were to create an instance
of the class, you could not access anything in the class or display the values in the properties. Let’s add a
method to the class to allow you to display what is contained in the class. To do so, you need to create a
method to display the values using the print statement. You can also take this opportunity to build one
single string of output using string concatenation.
80Chapter 3 ■ Modular Programming
String concatenation can be done in several ways in PHP. In many languages, building strings with
properties require continuously opening and closing a string (using "").
print "Dog_weight is " . $this->dog_weight
color is " . $this->dog_color;
. ". Dog breed is " . $this->dog_breed . "Dog
The print code line above is valid in PHP. However, as you can see, you have a lot of quotes and many
periods. It can be difficult to get everything matched up correctly. The period is a string concatenation
character in PHP and would be required, if you choose to use this technique (you would have to use a similar
madness in many languages). However, PHP is much friendlier than this.
This pointer—The $this pointer is used to gain access to properties contained in an object.
this indicates that the code wants to retrieve the value contained in a property that exists
in the particular object (instance of the class). Soon we will be creating an instance of the
class named $lab. When the code that will exist in the $lab instance is executed, the $this
pointer will tell the operating system that it wants the value in the property (such as dog_
weight) that exists in the $lab instance only. Note that the format of the statement includes
a $ sign for the $this pointer but not for the variable ($this->dog_weight).
You might ask, why do we need the $this pointer? The simple answer is that you can create
a property that exists for every instance of the class (called a static property). If this type of
property changed, it would change for all the instances of the class. Our private properties
only change for the particular instance ($lab) of the class in which it was referenced.
print "Dog weight is $this->dog_weight. Dog breed is $this->dog_breed. Dog color is
$this->dog_color.";
PHP allows you to place properties within strings (quotes). This allows you to use fewer periods and
quotes (and maybe reduce pulling too many hairs from your head).
For examples of the $this pointer, visit:
http://php.net/manual/en/language.oop5.basic.php
For videos of the $this pointer, visit:
https://www.thenewboston.com/videos.php?cat=11&video=17177
Now that you have the code needed to produce an output, you need to add a method in the class to
execute the print line. All “actions” that take place in a class must be included in a method. Methods are
created in a similar style as classes (except they are actually contained within the classes). Methods are
declared using the keyword function followed by a method name and (). It is common practice for method
names to be lowercase, although PHP will accept uppercase characters. The _ can also be included at the
beginning or within the method name. All code with a method is contained within {}.
Example 3-4. Basic class structure with properties and a method in dog.php file
<?php
class Dog
{
private $dog_weight = 0;
private $dog_breed = "no breed";
private $dog_color = "no color";
private $dog_name = "no name";
81Chapter 3 ■ Modular Programming
function display_properties()
{
print "Dog weight is $this->dog_weight. Dog breed is $this->dog_breed. Dog color is
$this->dog_color.";
}
}
?>
Program design recommendation—As seen in Example 3-4, it becomes much more
important to be aware of the proper use of the opening and closing brackets ({ and }). For
every open bracket, there must be a closing bracket. It can become difficult to determine if
you are missing something. Editors (discussed in Chapter 1) can help color code everything
to make it easier to see. Also, indenting (as seen in Example 3-4) can help visually line up
the brackets. The PHP engine ignores extra spacing (called whitespace). So the programmer
can make the code more visually pleasing and easier to debug.
This class now has the ability to perform an action (via the display_properties method). So you can
finally test its functionality. In order to do so, the code from Example 3-4 must be placed in the dog.php file
(same as the class name) in the same location as the program that will use it.
We now need to create a program that will pull in this library (via the require_once statement). The
program will then need to make an instance of the class (Dog). Finally, the program will need to call the
method (display_properties) to display the contents of the properties.
Program design recommendation—PHP will allow the include, include_once, require,
and require_once statements to be used anywhere in your program code. This could cause
potential issues if it’s used in the incorrect location or used more than once. It is strongly
recommended that these statements be include together as close to the top of your code as
possible for easy review to determine if libraries have already been installed.
Security and reliability—PHP has several methods available to pull libraries into PHP
programs. The include method will attempt to pull in a library. However, if the library
does not exist, the program will continue to run (or crash). The include method also does
not concern itself with possibility that the library might already have been attached to
the code. It is possible that a large program might accidentally try to pull in the same
library more than once (which would crash the program due to duplicate method and/
or class names). The include_once method eliminates the possibility of attempting to pull
in a library more than once. If the library has already been included, the statement will
not execute. The require method does not allow the program to continue running if the
library cannot be found. However, like the include method, it could attempt to pull in the
same library more than once. The require_once method solves these potential problems by
shutting the program down if the library cannot be found and by only installing the library
if it has not already been installed.
The format of the require_once statement is simple. The keyword require_once is followed with the
library name (dog.php). The statement should be included near the top of your code and before you make
an actual instance of the class (Dog).
require_once("dog.php");
82Chapter 3 ■ Modular Programming
You can include path names within a require_once statement. However, it is recommended
that you do not include absolute paths. For more information visit:
http://php.net/manual/en/function.require-once.php
For Examples visit:
https://www.thenewboston.com/videos.php?cat=11&video=17028
For videos visit:
https://www.thenewboston.com/videos.php?cat=11&video=17029.
To create an instance of a class, a property is created that “points” to the instance of the class in
memory. The new keyword is included to inform the operating system that an instance of the class should be
created in memory (and the constructor method should execute, as mentioned later). The actual class name
is included to determine which class is to be built into an object.
$lab = new Dog;
This code would create an instance of the Dog class and refer to it with the $lab property (pointer).
Actual individual copies of each of the properties ($dog_size, $dog_breed, $dog_color, and $dog_name)
are created for each instance of a class. This allows you to change what is in the properties for that instance
($lab) without changing the properties for other.
$lab->display_properties();
Once the instance is created, you can then access any methods by using the object name ($lab) and the
method name (display_properties).
Example 3-5. Basic program structure including a library, object, and method call in lab.php
<?php
require_once('dog.php');
$lab = new Dog;
$lab->display_properties();
?>
Figure 3-1 shows the successful output of the lab.php program, which includes the Dog class contained
in the dog.php file.
Figure 3-1. Output of lab.php
For more examples on creating an object (instance of a class), visit:
Examples: http://php.net/manual/en/language.oop5.basic.php
Videos: https://www.thenewboston.com/videos.php?cat=11&video=17181.
83Chapter 3 ■ Modular Programming
Do It
1.Add a speak method to the Dog class to give each instance the ability to “bark”.
Hint: Include a print (or echo) statement in your method. Add a call to your speak
method after the call to the display_properties method in the lab.php file.
2.Create a second object from the Dog class in the lab.php file called $chow. Call
the speak method (#1) to make him “bark”.
3.Create a new library file that contains a class of another animal of your choice.
Within that class, create four properties that provide characteristics of that animal.
Include a method that will print each of these characteristics. Also include a
method that will cause the animal to speak. Create another file that will use this
library file to create an instance of the class. The program should also call the
method to display the properties and the method to cause the animal to speak.
Program errors—If you encountered errors when trying this example, check the following:
1.	Did you name the class (Dog) and the file name (dog.php) the same? Make sure the file
ending is .php and not .txt for both the dog.php and lab.php files.
2.	In the require_once statement in the lab.php file, is the file name exactly the same as the
dog.php file?
3. Are the dog.php and lab.php files in the same folder?
4.	Did you include the same amount of opening ({) and closing (}) brackets in both
programs?
5.	Did you forget any semicolons (;)?
6.	For each $this statement, make sure the $ is part of this and not of the property
($this->dog_weight).
7.	For any other errors, copy and paste your error into a search engine to find possible
solutions. Remember, the error may be in either the Apache or PHP error logs (see Chapter
1 for details).
Return Method
In Chapter 2, the business rules tier was defined to contain modules of code that return information
requested, but do not provide an interface or format for displaying the data returned. In the previous
example, the Dog class violates this requirement. However, you can fix this problem with just a few code
changes to the dog.php and lab.php files.
The print statement in the Dog class should be replaced. However, you want to pass multiple values
(dog_weight, dog_color, dog_breed, and dog_name) back to the program that has called it. There are many
ways that you can accomplish this task. However, since you are just starting programming, let’s keep it
simple. We can create a comma-delimitated string easily by reformatting the original string. You can replace
the print statement with
Return "$this->dog_weight, $this->dog_breed, $this->dog_color.";
The new Dog class would now contain what’s shown in Example 3-6.
84Chapter 3 ■ Modular Programming
Example 3-6. Basic Dog class with return statement—dog.php
<?php
class Dog
{
private $dog_weight = 0;
private $dog_breed = "no breed";
private $dog_color = "no color";
private $dog_name = "no name";
function get_properties()
{
return "$this->dog_weight,$this->dog_breed,$this->dog_color.";
}
}
?>
■■Note In PHP 7, you can enable Scalar Type Hints. PHP 7 provides the developer the ability to declare the
data type that is expected to be returned. The function in Example 3-6 could be coded as follows.
declare(strict_types=1);
function get_properties() : string
{
return "$this->dog_weight,$this->dog_breed,$this->dog_color.";
}
If the declare statement is not included or strict_types=0, the data type will not be enforced. The current
valid data types that can be used are string, int, float, and bool.
Since Scalar Type Hints are not backward compatable, they are not used in the examples in this book.
You now need to adjust the lab.php file to be able to accept what has been passed back from the
get_properties method (display_properties is renamed get_properties to reflect that it no longer
displays the properties; it now returns them). You can accomplish this by creating a property in the lab.php
file to receive what has been passed back from the get_properties method.
$dog_properties = $lab->get_properties();
If you were to use the print function to display $dog_properties at this point, you would display:
no weight, no breed, no color
However, we intended to produce a similar result as was shown previously. You can do this, but you
need to be able to break the string into three pieces based on the “,” delimiter. Luckily there are PHP methods
available that can easily accomplish this task. The explode method will break a string based on a delimiter.
85Chapter 3 ■ Modular Programming
The substrings (pieces of the string) can then be dropped into individual properties using a list object. For
our needs, you can split the $dog_properties string as follows.
list($dog_weight, $dog_breed, $dog_color) = explode(',', $dog_properties);
For more information on the explode function, visit:
http://php.net/manual/en/function.explode.php
This will drop no weight into $dog_weight, no breed into $dog_breed, and no color into $dog_color.
These three properties are also being created inside the lab.php program in this same line of code. I happen
to give them the same names as their counterparts in the Dog class. However, remember if you had not
created the Dog class, you would not know the original variable names. It would not matter, because you can
call them anything you want and accomplish the same task.
Now that you have the variables containing the information, you can recreate the original print
statement in the lab.php program instead of in the dog.php library.
print "Dog weight is $dog_weight. Dog breed is $dog_breed. Dog color is $dog_color.";
Notice that you did not include the $this pointer. You are not executing this statement within a class.
You don’t create instances of the lab.php program. There is only one instance of the program (because it is
not a class and cannot have multiple instances). So the $this pointer is unnecessary.
The new lab.php program would now look like Example 3-7.
Example 3-7. The lab.php program with print statement
<?php
require_once("dog.php");
$lab = new Dog;
$dog_properties = $lab->get_properties();
list($dog_weight, $dog_breed, $dog_color) = explode(',', $dog_properties);
print "Dog weight is $dog_weight. Dog breed is $dog_breed. Dog color is $dog_color.";
?>
Assuming there are no errors in your program, the output will be the same as Figure 3-1, unchanged
from the previous version of the program. However, the Dog class now meets one of the standards of the
business rules tier by returning information to the program that calls it without attempting to format the
output. The lab.php program now handles formatting the output.
Do It
1.
Adjust the speak method in the dog.php file to return the bark string but not
print it. Also adjust the call to the method in the lab.php file to display the
output of the string. You can accept the string from the method and print the
string in one line of code using syntax similar to the following:
print $lab->speak();
86
2.Adjust the $chow object in the lab.php file to properly handle the return of the
properties string and the speak string.
3.Adjust the animal class to return any strings instead of printing them. Adjust the
program that makes an instance of the animal class to accept and display the
strings that are returned.Chapter 3 ■ Modular Programming
Set Methods
This example is still very limited because you can’t currently adjust the values in the properties to relate to
the actual objects you created (such as $lab). In order to adjust these properties, you must have some ability
to access the properties from the program that uses the object (lab.php). However, because of encapsulation
and security concerns, you do not want to expose the properties to be directly manipulated by the calling
program. Object-oriented programming standards require that you create your properties as “private”
(as you have done already) and then use actual methods in the class to change any values.
Security and reliability—Creating set methods in classes provides the ability for the class to
verify that the information that is to be placed in a property is valid before the property is
updated. If this verification is not done before changing the value in a property corruption
of data could take place. After the fact, it may be impossible or very difficult to correct
invalid data that has been accepted. Set methods can reject invalid data and return error
messages to the calling program.
A set method allows values to be passed into the method. These values can then be verified
before updating the properties in the object. Parameters (values) are passed into a method between the
parentheses () in the method call.
$dog_error_message = $lab->set_dog_name('Fred');
If the set_dog_name method exists within the Dog class and accepts a string representing the name of
the dog, you could use a method call similar to the previous code. This call would pass the string "Fred" into
the set_dog_name method. It also provides the ability for the set method to return a value into the property
$dog_error_message to indicate if the property was updated properly. You can simply pass a ‘TRUE' or
‘FALSE’ Boolean value back from the method to indicate the status of the update. The calling program then
can determine how to handle the status of the update.
If you simply pass back a ‘TRUE' or ‘FALSE' you can use a simplified version of the PHP conditional
statement, called the ternary operator to check $dog_error_message.
print $dog_error_message == TRUE ? 'Name update successful<br/>' : 'Name update not
successful<br/>';
For more information on the ternary conditional operator, visit
http://php.net/manual/en/language.operators.comparison.php
Security and performance—Use caution when display error messages to actual live users of
your applications. You can provide too much information and expose your program code
unnecessarily. Displaying a generic error message to the user may be a safer option. In live
applications, log files should be created to record errors and access to the application itself.
With this format, the calling program (lab.php) can easily determine the status of the update and
display a corresponding message. The message between the ? and the : (“Name update successful”) will
display if the string in $dog_error_message is ‘TRUE'. If the value in $dog_error_message is ‘FALSE' the
string between the : and the ; (“Name update not successful”) will display.
87Chapter 3 ■ Modular Programming
Example 3-8. The lab.php file with set methods and error checking
<?php
require_once("dog.php");
$lab = new Dog;
// -------------------Set Properties--------------------------
$dog_error_message = $lab->set_dog_name('Fred');
print $dog_error_message == TRUE ? 'Name update successful<br/>' : 'Name update not
successful<br/>';
$dog_error_message = $lab->set_dog_weight(50);
print $dog_error_message == TRUE ? 'Weight update successful<br />' : 'Weight update not
successful<br />';
$dog_error_message = $lab->set_dog_breed('Lab');
print $dog_error_message == TRUE ? 'Breed update successful<br />' : 'Breed update not
successful<br />';
$dog_error_message = $lab->set_dog_color('Yellow');
print $dog_error_message == TRUE ? 'Color update successful<br />' : 'Color update not
successful<br />';
//-----------------------------Get Properties---------------------------
$dog_properties = $lab->get_properties();
list($dog_weight, $dog_breed, $dog_color) = explode(',', $dog_properties);
print "Dog weight is $dog_weight. Dog breed is $dog_breed. Dog color is $dog_color.";
?>
In Example 3-8, lab.php now has the ability to pass information into the properties in the $lab object
of the Dog class. It also determines if the update for each property was successful and responds accordingly.
There are opportunities in this example to be more efficient with the amount of code that you have created.
However, we will hold off on efficiency until you have gathered a few more skills.
The lab.php code now calls a set method for each property to be updated (set_dog_name,
set_dog_breed, set_dog_weight, and set_dog_color) and passes information into each method.
Notice that strings are passed into each method, except for the set_dog_weight method, which accepts an
integer (whole number) value.
You now need to create set methods within the Dog class. Each method now accepts a parameter (string
or integer) and returns a ‘TRUE' or ‘FALSE' value. The method is created in a style similar to the previous
get_properties method that you created. Let’s keep the validation process simple for now and you’ll learn
how to improve it in later chapters.
function set_dog_name($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) < 21) ? $this->dog_name = $value : $error_message = FALSE;
return $error_message;
}
The set_dog_name method will accept a string into the $value property (parameter) defined in the
function header (function set_dog_name($value)). Next, the method creates a property $error_message
and provides an initial value of TRUE. This property (along with the $value property) will only exist while
the method is executing. As soon as the execution hits the } closing bracket, these properties will no longer
be available.
88Chapter 3 ■ Modular Programming
Programming note—TRUE and FALSE are constants that are included as part of the PHP
language. Constants cannot be changed and are in all caps. TRUE is actually represented
internally as a 1 and FALSE is represented internally as a 0.
■■Note
In PHP 7, Scalar Type Hints can be used to enforce the data type being passed and returned.
declare(strict_types = 1);
function set_dog_name(string $value) : string
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) < 21) ? $this->dog_name = $value : $error_message = FALSE;
return $error_message;
}
If the declare line is not included or strict_types = 0, the data type will not be enforced. To allow for
backward compatability, the examples in this textbook will not show the use of Scalar Type Hints.
Programming note—&& is an AND operator. In order for the (ctype_alpha($value) &&
strlen($value) < 21) statement to be TRUE, $value must include only alphabetic characters
and must be fewer than 21 characters.
A ternary operator looks at the two possible statuses of the $value property (which contains whatever
was passed into the method).
1.The ctype method is used to determine if the characters in $value are alphabetic
(ctype_alpha($value)).
2.The strlen method is used to determine if the length of the string in $value is
less than 21 characters (strlen($value) < 21).
To learn about additional ctype functions, visit:
http://php.net/manual/en/book.ctype.php.
If the $value property contains alphabetic characters only and is less than 21 characters, the $dog_name
property is updated with the value that has been passed. If there are non-alphabetic characters or the length of
the string is more than 20 characters, the $error_message is updated with a FALSE value (indicating the update
did not occur). Finally, the value in $error_message (either TRUE or FALSE) is returned to the calling program.
Security and performance—This process may be a bit confusing now. However, it is important
to create secure programs. Whenever an application or object accepts information from an
outside source (such as another program or user) the information must be validated. This
validation should include limitations on the size of the information accepted, along with
other restrictions. Data that has been passed across the Internet (such as from the user’s
browser to a web server) can be intercepted and changed. It is vital that the information
be verified within the application on the server before it is used. Validation may be done in
the browser (via JavaScript) to ensure the user has entered correct information. However,
as stated, packet stiffing programs can intercept that information and change it before it is
received by an application on a web server.
89Chapter 3 ■ Modular Programming
One final note before you look at the code changes. PHP provides several operations to compare two values.
The following table provides a summary of these operators, including the new PHP 7 Spaceship Operator.
Operation
Result – returns TRUE if...
$a == $b
$a and $b are equal ignoring cases
$a === $b
$a and $b equal if case is the same
$a != $b, $a <> $b
$a and $b are not equal ignoring cases
$a !== $b
$a and $b are not equal or not same case
$a < $b
$a is less than $b
$a <= $b
$a is less than or equal to $b
$a > $b
$a is greater than $b
$a >= $b
$a is greater than or equal to $b
------------------------------------------------------
(Available with PHP 7) $a <=> $b
returns -1 if $a < b, returns 0 if $a equals $b
returns 1 if $a > $b
In addition, the Null Coalesce Operator can be used to check if a value is ‘set’ (contains something)
before it is used in a ternary operation.
$dog_name = $_POST['value'] ?? 'No Name';
In this example, if something exists in value, it is placed in $dog_name. If value is not set, No Name is
placed in $dog_name. This operator is available in PHP 7. To allow for backward capability, the examples in
this book will not demonstrate this operator.
Let’s update the Dog class to include all the set methods needed.
<?php
class Dog
{
// ------------------------------------ Properties -----------------------------------------
private $dog_weight = 0;
private $dog_breed = "no breed";
private $dog_color = "no color";
private $dog_name = "no name";
}
Example 3-9. Dog class with set methods in dog.php
// ------------------------------ Set Methods ----------------------------------------------
function set_dog_name($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 20) ? $this->dog_name = $value : $error_message = FALSE;
return $error_message;
}
function set_dog_weight($value)
{
$error_message = TRUE;
(ctype_digit($value) && ($value > 0 && $value <= 120)) ? $this->dog_weight = $value :
$error_message = FALSE;
return $error_message;
}
90Chapter 3 ■ Modular Programming
function set_dog_breed($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 35) ? $this->dog_breed = $value : $error_message = FALSE;
return $error_message;
}
function set_dog_color($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 15) ? $this->dog_color = $value : $error_message = FALSE;
return $error_message;
}
}
function get_properties()
{
return "$this->dog_weight,$this->dog_breed,$this->dog_color.";
}
}
?>
Program design recommendation—When coding and testing your programs, code just
one set method. Then test the method to correct errors. After you have one successful set
method, copy and paste it in your code and make the necessary changes. Do not attempt
to completely code a program before testing it. Program piece by piece, then test. Although
you may think that this slows down your coding, actually this is not true. By catching errors
with each small addition to your program it will be easier to find them. If you attempt to
code a complete program you may have lots of errors and could spend a lot of time trying
to hunt down each error. If you are having difficulty finding an error, comment out (using
//) the new lines of code in your program and retest. If all is okay, then gradually (just a
few lines at a time) remove the comment lines (//) from your code lines and retest. This
process should help you to find the lines of code that might be causing problems.
Security and performance—In a live environment the programmer should not display
details to the users as to what caused an update to be unsuccessful. Providing too much
information can inform hackers on what can be changed to successfully update properties
with invalid information. Pass the details of what caused the unsuccessful update to a
secure log file on a server.
The code is starting to get lengthy. However, each of the set functions is very similar. As you code
the set functions, you will find that this is a common occurrence. It also allows you to quickly create
set methods once you have a working error free example by copying and pasting working methods and
making simple changes. In Example 3-9 different string lengths are determined depending on the type of
information being updated. Also, the $set_dog_weight method checks for numeric values in the string
passed, instead of alphabetic characters. Otherwise, the methods are almost identical.
Figure 3-2 demonstrates the output when valid information is passed into each property. The
‘successful’ messages display. Also note that the get_properties method displays the new updated values
for each property. In a live environment you might consider not displaying the successful messages and only
displaying the not successful messages.
91Chapter 3 ■ Modular Programming
Figure 3-2. Output of successful update via set methods in Dog class—dog.php and lab.php
Figure 3-3 tests the output generated when invalid information has been passed to the set methods.
Note that the default values are still in the properties that did not get updated. This stresses the need to
include default values in case some properties do not get updated. In PHP, properties that are displayed and
are NULL (have no value) do normally display a blank space for output. For example, if $dog_weight did not
have a default value, the output would display "Dog weight is .".
Figure 3-3. Output with invalid weight (1000) and invalid breed (‘Lab12’) in Dog class—dog.php and lab.php
Program design recommendation—Although PHP is friendly and will attempt to change
NULL values to spaces when displayed, it is not good programming to assume this will
occur. Many program languages will not do this conversion for you and will display
error messages when attempting to display properties with NULL values. Also, when using
properties to do mathematical calculations, it is very important to set default values. PHP
will, again, attempt to convert NULL values to zeros for calculations. However, in some cases
this will not occur and an error message will display. In many program languages, error
messages will occur when attempting to do a calculation with NULL values. Establishing
programming habits that work for all languages will help you quickly develop skills for
multiple languages.
92Chapter 3 ■ Modular Programming
Do It
1.
Create an additional property ($dog_gender) in the Dog class. Create a set
method (set_dog_gender). Determine if a valid value (Male, Female) has been
passed into the set method. You can use the following code or develop your own
version to check for valid information.
($value == 'Male' || $value == 'Female') ? $this->dog_gender =
$value : $error_message = FALSE;
2.
Go to php.net and search for a method that will allow the checking of any case
of “Male” or “Female” from #1. Update the conditional statement to allow any
version (Male, MALE, male, Female, FEMALE, female, and so on). Hint: The
characters in $value can be changed to all uppercase or all lowercase using the
strtoupper or strtolower methods. Then check the string as all uppercase
(MALE, FEMALE) or all lowercase (male, female) characters.
Get Methods
In our previous examples, you created a get_properties method that returned multiple properties at the
same time. This is a valid and useful method. However, it is common to have a get method to match each
set method. This provides both write (set method) and read (get method) capabilities for the properties in
a method. In some situations you may want to only provide a get method without a set method (making the
property read-only). We could (although rarely done) provide a set method without a get method (making
the property write-only).
Get methods are actually much easier to code than set methods. No verification of data is necessary
because you are reading the data and not updating it.
function get_dog_name()
{
return $this->dog_name;
}
All that is necessary in the get method is the return statement, which returns the value in the property
without the user of the object having direct access to the property.
Example 3-10. Dog class with set and get methods—dog.php
<?php
class Dog
{
// ----------------------------------------- Properties ------------------------------------
private $dog_weight = 0;
private $dog_breed = "no breed";
private $dog_color = "no color";
private $dog_name = "no name";
}
93Chapter 3 ■ Modular Programming
// ---------------------------------- Set Methods ------------------------------------------
function set_dog_name($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 20) ? $this->dog_name = $value : $error_message = FALSE;
return $error_message;
}
function set_dog_weight($value)
{
$error_message = TRUE;
(ctype_digit($value) && ($value > 0 && $value <= 120)) ? $this->dog_weight = $value :
$error_message = FALSE;
return $error_message;
}
function set_dog_breed($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 35) ? $this->dog_breed = $value : $error_message = FALSE;
return $error_message;
}
function set_dog_color($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 15) ? $this->dog_color = $value : $error_message = FALSE;
return $error_message;
}
// ----------------------------------------- Get Methods -----------------------------------
function get_dog_name()
{
return $this->dog_name;
}
function get_dog_weight()
{
return $this->dog_weight;
}
function get_dog_breed()
{
return $this->dog_breed;
}
function get_dog_color()
{
return $this->dog_color;
}
function get_properties()
{
return "$this->dog_weight,$this->dog_breed,$this->dog_color.";
}
}
?>
94Chapter 3 ■ Modular Programming
The code is lengthy. However, as pointed out previously, like the set methods, the get methods are very
similar to each other. Once you have created one successful get method, you can copy and paste it to create
the other methods. All that needs to change for each get method is the name of the method and the property
being returned.
Example 3-11. The lab.php program using set and get methods
<?php
require_once("dog.php");
$lab = new Dog;
// ------------------------------Set Properties--------------------------
$dog_error_message = $lab->set_dog_name('Fred');
print $dog_error_message == TRUE ? 'Name update successful<br/>' : 'Name update not
successful<br/>';
$dog_error_message = $lab->set_dog_weight(50);
print $dog_error_message == TRUE ? 'Weight update successful<br />' : 'Weight update not
successful<br />';
$dog_error_message = $lab->set_dog_breed('Lab');
print $dog_error_message == TRUE ? 'Breed update successful<br />' : 'Breed update not
successful<br />';
$dog_error_message = $lab->set_dog_color('Yellow');
print $dog_error_message == TRUE ? 'Color update successful<br />' : 'Color update not
successful<br />';
// ------------------------------Get Properties--------------------------
print $lab->get_dog_name() . "<br/>";
print $lab->get_dog_weight() . "<br />";
print $lab->get_dog_breed() . "<br />";
print $lab->get_dog_color() . "<br />";
$dog_properties = $lab->get_properties();
list($dog_weight, $dog_breed, $dog_color) = explode(',', $dog_properties);
print "Dog weight is $dog_weight. Dog breed is $dog_breed. Dog color is $dog_color.";
?>
When viewing the code in Example 3-11, note that the print statements call the get methods (print
$lab->get_dog_name() . "<br/>";). The order of operations, which will be discussed in more detail in a
later chapter, causes the method (get_dog_name()) to be executed first, even though normally a line of code
would execute from left to right. The method returns the value in dog_name (the string "Fred"). The string is
placed in the same location in which the method call was located. After the get method executes, the code
line is now
print "Fred" . "<br/>";
Then the code line executes from left to right, producing the output
Fred <br/>
Programming note—Unlike properties, methods must NOT be included in quotes ("" or '').
The string must be broken apart and concatenated using the '.', as shown in the example.
If a method is included IN quotes, PHP will display an error message.
95Chapter 3 ■ Modular Programming
As you can see from Figure 3-4, the get methods successfully display the updated values in the
properties. If any properties were not updated, the get methods would display the default values.
Program design recommendation—While in coding and testing phase it is a good idea to
display the values in your properties often to ensure that they are updated at the proper
times. However, when you move a program from testing mode to production you should
reduce the amount of display shown to the users. It probably is not necessary to show the
users the update values in properties. It is usually best to just indicate to the users that the
update was successful. You can simply comment out your unneeded print code lines before
production. This then could help to quickly debug future upgrades to the application by
simply removing comments from those lines.
Figure 3-4. Dog class output with set and get methods
Do It
1.
In addition to creating an additional property ($dog_gender) and set method in
the Dog class, create a get method to display the updated values. Also update the
lab.php file to include a print statement (similar to the examples in this section)
to call the get methods.
Constructor Method
One difficulty with the previous examples is the amount of calls to set routines that would be required if you
are initially creating an object and populating the properties of the object with values. The Dog class requires
that you call four set methods (set_dog_name, set_dog_breed, set_dog_color, and set_dog_weight) in
order to place values in all the properties. You can use a much more efficient way of updating all these
properties at once. This could reduce the code in the lab.php file. You could then use the set routines in the
Dog class to make any changes (maybe the dog gained some weight) after you have provided initial values.
The initial values are not default values. You still need default values in case the initial values are invalid.
When an instance of a class (object) is created in memory, the operating system executes a constructor
method that builds the object with any properties and methods. The system also builds tables in memory
to keep track of the location of the object and the values that exist in the properties of the object. When
the object is no longer needed, the operating system’s garbage collector will call by the object’s destructor
method, which will remove it from memory.
96Chapter 3 ■ Modular Programming
You can also include a constructor method that will automatically be called when the object is placed
in memory. When the code line that creates the object ($lab = new Dog;) is executed, it looks for a
constructor method in the object. If it exists, the method is executed. You can pass all the initial values for
the properties into this constructor method via same line that creates the object.
$lab = new Dog('Fred', 'Lab', 'Yellow', 50);
This becomes a much more efficient way of providing the initial values from within the lab.php program.
The constructor method is a generic format with a function name __construct (note there are two
underscores before the word construct).
<?php
class Dog
{
function __construct($value1, $value2, $value3, $value4)
{
// code to update properties
}
// other methods
}
?>
You can use the existing set methods in the constructor to update the properties. You will need to
collect any messages (TRUE/FALSE) and return them to the calling program (lab.php). You can use a similar
procedure as you initially coded with the handling of the get_properties method.
Example 3-12. Dog class with constructor—dog.php
<?php
class Dog
{
// ----------------------------------------- Properties ------------------------------------
private $dog_weight = 0;
private $dog_breed = "no breed";
private $dog_color = "no color";
private $dog_name = "no name";
private $error_message = "??";
// ---------------------------------- Constructor ------------------------------------------
function __construct($value1, $value2, $value3, $value4)
{
$name_error = $this->set_dog_name($value1) == TRUE ? 'TRUE,' : 'FALSE,';
$breed_error = $this->set_dog_breed($value2) == TRUE ? 'TRUE,' : 'FALSE,';
$color_error = $this->set_dog_color($value3) == TRUE ? 'TRUE,' : 'FALSE,';
$weight_error= $this->set_dog_weight($value4) == TRUE ? 'TRUE' : 'FALSE';
$this->error_message = $name_error . $breed_error . $color_error . $weight_error;
}
//------------------------------------toString----------------------------------------------
public function __toString()
{
return $this->error_message;
}
//... There are no other code changes to dog.php below this line.
97Chapter 3 ■ Modular Programming
For more information about the __construct method, visit:
Examples: http://php.net/manual/en/language.oop5.decon.php
Videos: https://www.thenewboston.com/videos.php?cat=11&video=17181
First, let’s discuss the use of the special method called __toString (note the two underscores) in
Example 3-12. Constructor methods are not allowed to return information (by default). The return
statement cannot be used within the constructor. In order to return error messages created in the
constructor to the calling program (lab.php), you must trick the program. The __toString method allows
the programmer to decide what will occur if an attempt is made to use the print (or echo) method with
the object name (print $lab;). Normally an error message would occur claiming the object cannot be
converted to a string (print and echo can only display strings). This can be overridden by including a
__toString method with a statement that returns a string. You can overcome this problem of being able to
return the error messages by allowing the value in the $error_message property to be returned if the print
$lab; statement is executed.
For more information on the __toString method and other magic methods visit
http://php.net/manual/en/language.oop5.magic.php.
The TRUE and FALSE constants that are returned by the set methods also cause a problem because they
are constants and not strings. If you attempt to convert these constants to a string using a method (such as
strval(TRUE);), the values that they represent (1 for TRUE, 0 for FALSE) would become a string instead of
‘TRUE' or ‘FALSE'. Therefore, they cannot be returned via the __toString method. To overcome this problem
we create the following code in the constructor to do a conversion from TRUE to ‘TRUE' or FALSE to ‘FALSE'.
$name_error = $this->set_dog_name($value1) == TRUE ? 'TRUE,' : 'FALSE,';
The order of operations will cause the set_dog_name method to execute before any of part of this code.
The set_dog_name method returns TRUE or FALSE (constants). Assuming that the method returns a TRUE after
the execution, the code line would now be
$name_error = TRUE == TRUE ? 'TRUE,' : 'FALSE,';
The order of operations then requires that the comparison (TRUE == TRUE) be evaluated. Of course, this
evaluates to TRUE. The statements between the ? and the : are used.
$name_error = 'TRUE,';
Thus $name_error is set to the string "TRUE,", which is now a string, not a constant.
Also note that a ‘,’ has been added in preparation for the next ‘TRUE' or ‘FALSE' value. Each value passed
(except the last value) must be separated by a ‘,’ to allows the string to be separated later.
The other three similar lines are evaluated and also place a ‘TRUE,’ or ‘FALSE,’ in the error message
properties (the weight error evaluation does not include a comma at the end of the string since it is the last
one evaluated).
The last line of code in the constructor is evaluated.
$this->error_message = $name_error . $breed_error . $color_error . $weight_error;
98Chapter 3 ■ Modular Programming
This line places the values of each error property into the error_message property. If all the updates
were successful, the $error_message property would contain
"TRUE,TRUE,TRUE,TRUE"
Notice that each item passed includes a “,’ for separation except the last item. This is necessary to break
apart the results of the string.
Example 3-13. The lab.php file calling a constructor
<?php
require_once("dog.php");
$lab = new Dog('Fred','Lab','Yellow','100');
list($name_error, $breed_error, $color_error, $weight_error) = explode(',', $lab);
print $name_error == 'TRUE' ? 'Name update successful<br/>' : 'Name update not
successful<br/>';
print $breed_error == 'TRUE' ? 'Breed update successful<br/>' : 'Breed update not
successful<br/>';
print $color_error == 'TRUE' ? 'Color update successful<br/>' : 'Color update not
successful<br/>';
print $weight_error == 'TRUE' ? 'Weight update successful<br/>' : 'Weight update not
successful<br/>';
// ------------------------------Set Properties--------------------------
...There are no other changes to lab.php below this line.
There is a slight change to the creation of the object on the third line of Example 3-13.
$lab = new Dog('Fred','Lab','Yellow','100');
You are now passing the initial values (Fred, Lab, Yellow,and 100) into the object via the constructor.
Otherwise, you would have to make four calls to set methods (set_dog_name, set_dog_breed, set_dog_
color, and set_dog_weight) to accomplish the same thing. This allows you to use the set methods for
updates that are needed after you have initially set up the object ($lab).
In order to determine if the updates to the four properties were successful, you must retrieve your
values (TRUE, TRUE, TRUE,TRUE) from the $error_message property in the object. The __toString method in
the Dog class allows you to do this by treating $lab as if it were a string. This allows you to use the explode
method in a similar process as the output to the get_properties method.
list($name_error, $breed_error, $color_error, $weight_error) = explode(',', $lab);
This line of code will break the contents of $lab (TRUE, TRUE, TRUE,TRUE) by the commas and place each
part into the properties $name_error, $breed_error, $color_error, and $weight_error. Each of these
properties will now contain the string 'TRUE'. You can then evaluate your messages to see if the updates
were successful in a very similar technique that evaluated the results of the set methods.
print $name_error == 'TRUE' ? 'Name update successful<br/>' : 'Name update not
successful<br/>';
There are only a few minor differences between this format and the similar statements to evaluate
the results of the set methods. Each of these code lines uses a different error message for evaluation
($name_error, $breed_error, $color_error, and $weight_error). Previously you used the same property
($error_message) for all the results from the set methods. You are now evaluating the string 'TRUE' instead
of the constant TRUE (the only difference in the code is the actual quotes).
99Chapter 3 ■ Modular Programming
In Figure 3-5, the first four lines of output are produced from passing values into the constructor to
provide initial settings for each property. The next four lines of output are produced when the set methods
are used to change the values in the properties. The final four lines are produced from execution of the
get methods (showing the contents of each property). The last line of output was produced by the
get_properties method. Although the initial values (Fred, Lab, Yellow, and 100) are passed into the
constructor successfully, the values in each property were the changed using the set methods (passing
Sally, Labrador, Brown, and 5).
Figure 3-5. Output from dog.php and lab.php with the constructor, set, and get methods
Security and performance—Some would argue that it’s overkill to check for errors every
single time an update occurs. However, in the current environment with constant attempts
to corrupt data, it is necessary to be as careful as possible when doing updates. No program
is 100% protected from data corruption. Hopefully, you have noticed that once you develop
a routine of checking data, your data checking code lines become very similar each time.
Thus, by copying and pasting (with minor changes) code lines that successfully verify data,
you can greatly increase your security without adding a lot of extra coding time.
100Chapter 3 ■ Modular Programming
Do It
1.
This chapter has covered a lot of PHP examples and terms. To help clarify any
difficulties you might currently be experiencing in understanding the PHP
language, visit this web site for additional tutorials:
http://www.w3schools.com/php/default.asp
2.
Update the constructor in the Dog class to also allow the passing of the
dog_gender value (Male or Female). Update the lab.php program to pass the
gender through the constructor. Also update lab.php to explode the $lab
string into five parts (one more for the dog_gender). Then evaluate the results
('TRUE' or 'FALSE') returned from the gender_error to display "Gender update
successful" or "Gender update not successful".
Chapter Terms
PHP ExtensionsPear
requirerequire_once
ClassProperties
VariablesMethods
FunctionsObject
EncapsulationPrivate
set Methodget Method
$this PointerString Concatenation
Includeinclude_once
new Keywordreturn
Comma-Delimitated Stringexplode Method
Substringsset Method
Boolean ValueConditional Statement
Ternary OperatorInteger
ParameterNull Coalesce Operator
&&, Andctype_alpha
strlenctype_digit
||, OrSpaceship Operator
NULLOrder of Operations
Constructor MethodDestructor method
__toStringList object
101Chapter 3 ■ Modular Programming
Chapter Questions and Projects
Multiple Choice
1.
2.
3.
4.
5.
102
PHP variables begin with which symbol?
a.?
b.!
c.$
d.&
A valid function name can start with which of the following?
a.A letter
b.An underscore
c.A number
d.Both A and B
Which conditional statement syntax is valid for PHP?
a.IF (condition) { execution };
b.IF (condition) { execution }
c.if (condition) { execution };
d.if (condition) {execution}
Which of the following includes properties and actions (methods or functions)
that can occur in an application?
a.Class
b.set method
c.get method
d.for loop
Which basic function does a constructor method perform?
a.Defines properties
b.Defines methods
c.Places an instance of a class into memory
d.A and BChapter 3 ■ Modular Programming
6.
7.
8.
9.
10.
11.
The && symbol and/or the word AND
a.Are relational operators, when used, and require all statements checked to
be true for the complete if statement to be considered true
b.Are conjunctions used in PHP to connect programs
c.Are relational operators, when used, and require that only one statement
checked to be true for the complete if statement to be considered true
d.Are relational operators and conjunctions used in PHP to connect programs
An integer is which of the following?
a.A string or text value
b.A floating-point number
c.A whole number
d.A fraction
A ternary operator is which of the following?
a.An alternative to setting a variable
b.An alternative to using an if-else conditional statement
c.An alternative to using an embedded if-else conditional statement
d.B and C
How does one create an instance of the class fred and execute the constructor
method in PHP?
a.$this->fred
b.$variable = new fred
c.$load_class = fred
d.$fred
What purpose does the method ctype_digit serve?
a.Randomly generates an integer value
b.Determines whether characters inputted are numeric
c.Determines whether a class output is numeric
d.Converts a string value to an integer
Pear is an acronym for
a.PHP Extends and Applies Registry
b.PHP Excellence in Applied Requirements
c.PHP Extension and Application Repository
d.Properties of Extension and Application Registry
103Chapter 3 ■ Modular Programming
12.
13.
14.
15.
16.
17.
104
Creating set methods inside classes
a.Allows properties to be changed automatically
b.Should not be done as it corrupts data
c.Provides the ability for the class to verify information before the property is
updated
d.Provides the ability for the class to verify information after the property is
updated
if statements
a.Are also called conditional statements
b.Can compare two values to determine if they are the same or different
c.Use comparison operators (==, <, >, <=, >=) to determine if the
statement is true or false
d.All of the above
$x && $y condition is TRUE if
a.Both $x and $y are true
b.$x or $y are true
c.Both $x and $y are false
d.$x or $y are false
Select the statement about Boolean values that is false.
a.Boolean is a data type having two possible values—TRUE and FALSE
b.Boolean values represent the truth values of logic
c.Boolean values are only associated with conditional statements
d.In PHP Boolean literals, TRUE and FALSE are case-sensitive
Which one of these numbers is an example of an integer?
a.1.01
b.2f
c.423
d..002
Protecting an object's data from code outside the class is called what?
a.Inheritance
b.Encapsulation
c.Classification
d.BlockingChapter 3 ■ Modular Programming
18.
19.
20.
21.
22.
Which kind of methods are easier to code than set methods and are known as
read only methods since they do not change any property values?
a.explode methods
b.get methods
c.constructor methods
d.match methods
Why would you include objects in your program?
a.To make notes in your code
b.To make mini mobile programs
c.To make your code more complex
d.To protect your code from direct access
How do you call a function named myFunction?
a.call myFunction();
b.myFunction();
c.call function myFunction;
d.call.myFunction();
A class can contain all of the following except
a.Properties
b.Methods or functions
c.Conditional statements
d.Machine code
When working with a comma-delimited string, which character is used to
separate the data in the string?
a.Space
b.Semicolon
c.Asterisk
d.Comma
105Chapter 3 ■ Modular Programming
True/False
1.Methods are functions that belong to a class.
2.You would use the symbol || or the word or when you want both conditions to
be true.
3.When a function is private, it can only be used inside the class in which it exists.
4.The explode method can be used to separate a string at the specified delimiter.
5.The new keyword tells the operating system that an instance of that class should
be created in memory.
6.The function Ctype_alpha will return true when a number is passed into it.
7.require_once will not execute if the file has already been attached to the
program.
8.The ctype_digit function determines if the characters passed are alphabetic.
9.The ctype_alpha function determines if the characters passed are alphabetic.
10.A PHP constructor has the same name as the class.
11.A ternary operator is shorthand for a while loop.
12.If a file has already been included in a program, the require_once function will
generate only a warning and allow the program to continue.
13.Destructor methods are called when there are no remaining references to an
object or when that object has been explicitly destroyed.
14.Objects are blocks of code that have already been compiled for use in an
application.
15.The else statement extends an if statement by allowing code to execute when
the if statement evaluates to FALSE.
16.include or require statements can only be placed at the top of an PHP program.
17.Programmers can pull their own libraries of code into an application via the
require or require_once statement.
Short Answer/Essay
106
1.Explain the meaning of encapsulation and how classes are encapsulated.
2.Why should a programmer use set and get methods?
3.Why should every entry on a web page from a user be validated?Chapter 3 ■ Modular Programming
Projects
1.Create a PHP program with a class (Student) with the following properties:
student_id, student_name, student_address, student_state,
student_zip, and student_age. The program includes get and set methods
for each property. Validate the proper type and size of data passed into each
property. The program also includes the ability for each property to use the
constructor to set values. Create an instance of the class passing properties
through the constructor. Change two of the properties using set methods.
Display the properties using get methods.
2.Create a PHP program to keep track of inventory within a grocery store. Each
item (class) includes an item number, description, size, self, isle, amount,
and price. Each field must be verified for proper information before the entries
are accepted. Item numbers range from 00000 to 99999. The store has 16 isles
(00-15). No price in the store is greater than $1000. All entries are coded via a
constructor or set methods. After all entries have correctly been accepted, the
program will generate a report of the entries (using get methods).
Term Project
1.
Using the design from the Chapter 2 Term Project, create a PHP program that
will provide the interface for entering in the ABC Computer Parts Corporation
inventory items for the warehouse. The PHP class must verify the contents of
the information passed from each field (via the set methods) to ensure that
no corruption has taken place. Set and Get methods for each property must
exist in the class. The constructor should use the set methods to populate the
properties. Also create an interface program that will make an instance of the
class and test the ability to populate the properties. The test program should
generate a report of the item placed in inventory (similar to the output shown in
this chapter). The files created should use logic similar to what was shown in the
examples in this chapter.
107Chapter 4
Secured User Interfaces
“All great ideas look like bad ideas to people who are losers. It's always good to
test a new idea with known losers to make sure they don't like it.” —Dilbert 11/18/97
(http://dilbert.com/strips/comic/1997-11-18/)
Chapter Objectives/Student Learning Outcomes
After completing this chapter, the student will be able to:
•Explain why user input must be validated in the interface and business rules tiers
•Explain why user input must be filtered in the business rules tier
•Use HTML5 code to validate user input
•Use JavaScript code to validate user input
•Use PHP if statements (conditional statements) to validate and filter input
•Use the foreach loop to dynamically create an HTML select box from an XML file
•Use simple arrays for filtering and validation
•Pass simple arrays into methods (functions)
•Understand how to use dependency injection to control code version changes
Electronic supplementary material The online version of this chapter (doi:10.1007/978-1-4842-1730-6_4)
contains supplementary material, which is available to authorized users.
© Steve Prettyman 2015
S. Prettyman, Learn PHP 7, DOI 10.1007/978-1-4842-1730-6_4
109Chapter 4 ■ Secured User Interfaces
Secured User Interaction
In Chapter 2, the Hello World examples included user interaction (clicking a Submit button) to call a PHP
program. This chapter will use the HTML web form to accept information from the user and then pass this
information to a PHP program.
Do not trust your users! You must be prepared for any type of information your users will enter into a
web form. You must also make sure that you validate and secure information every time before accepting it
into your programs. You must remember that users may elect to not allow JavaScript to run in their browsers.
Therefore, your program cannot be dependent on JavaScript code for verification of input. You must be able
to handle these three scenarios:
1.If the user is using an HTML5 capable browser, you can verify all input using
HTML5 before sending it to the PHP program on the web server.
2.If the user is using a browser that does not have HTML5 (or complete HTML5)
capability, you can verify all (or some) input using JavaScript. Then you can send
the validated information to the PHP program on the web server.
3.If the user is using a browser that does not have HTML5 capability and has
JavaScript disabled, the user input can still be verified by the PHP program on the
web server.
It is preferable to handle the initial verification using either of the first two methods. This would verify
the correct information before sending it to the server. Method #3 will cause more server calls because the
information must be sent to the server for verification, and then any error messages must be sent back to the
browser for the user to correct.
Even if you verify the information using method #1 or #2, when the PHP programs receives the
information on the web server, you will again evaluate that you have received valid information. Even
though the user may have sent valid information, packet sniffing programs can change valid information
into harmful information.
HTML5 Form Validation
When building an HTML5 form, you can validate information entered into text boxes. However, browsers that
have not implemented the HTML5 techniques (or all of HTML5) will treat the objects (such as text boxes)
as if they were normal non-validation objects. The information in the boxes will be accepted without any
verification. Therefore, you must also include a JavaScript routine to catch anything not validated by HTML5.
Security and performance —Secure programming is just part of the complete process of
protecting your information. The files, directories, servers, networks, and databases must
also be properly secured. In addition, any highly important information (such as credit
card numbers) must be sent across a secure channel (HTTPS) to additionally protect the
information. User IDs and passwords should be encrypted to make it difficult for packet
sniffing software.
You will continue with the example from Chapter 3 by updating the Dog class example to accept
information from the user for your properties. The Dog class already has security in place, so you will not
need to make any additional security updates to the class.
110Chapter 4 ■ Secured User Interfaces
Example 4-1. The lab.html file with some validation
<!DOCTYPE html>
<html lan="en">
<head>
<title>Dog Object</title>
<script src="validator.js"></script>
<style type="text/css">
#JS { display:none; }
</style>
<script>
function checkJS() {
document.getElementById('JS').style.display = "inline";
}
</script>
</head>
<body onload="checkJS();">
<h1>Dog Object Creater</h1>
<div id="JS">
<form method="post" action="lab.php" onSubmit="return validate_input(this)">
<h2>Please complete ALL fields. Please note the required format of information.</h2>
Your Dog's Name (max 20 characters, alphabetic) <input type="text" pattern="[a-zA-Z ]*"
title="Up to 20 Alphabetic Characters" maxlength="20" name="dog_name" id="dog_name" /><br />
Your Dog's Breed (max 35 characters, alphabetic) <input type="text" pattern="[a-zA-Z ]*"
title="Up to 35 Alphabetic Characters" maxlength="35" name="dog_breed" id="dog_breed" /><br />
Your Dog's Color (max 15 characters, alphabetic) <input type="text" pattern="[a-zA-Z]*"
title="Up to 15 Alphabetic Characters" maxlength="15" name="dog_color" id="dog_color" /><br />
Your Dog's Weight (numeric only) <input type="number" min="1" max="120" name="dog_weight"
id="dog_weight" /><br />
<input type="submit" value="Click to create your dog" />
</form>
</div>
<noscript>
<div id="noJS">
<form method="post" action="lab.php">
<h2>Please complete ALL fields. Please note the required format of information.</h2>
Your Dog's Name (max 20 characters, alphabetic) <input type="text" pattern="[a-zA-Z ]*"
title="Up to 20 Alphabetic Characters" maxlength="20" name="dog_name" id="dog_name" /><br />
Your Dog's Breed (max 35 characters, alphabetic) <input type="text" pattern="[a-zA-Z ]*"
title="Up to 35 Alphabetic Characters" maxlength="35" name="dog_breed" id="dog_breed" /><br />
Your Dog's Color (max 15 characters, alphabetic) <input type="text" pattern="[a-zA-Z]*"
title="Up to 15 Alphabetic Characters" maxlength="15" name="dog_color" id="dog_color" /><br />
Your Dog's Weight (numeric only) <input type="number" min="1" max="120" name="dog_weight"
id="dog_weight" /><br />
<input type="submit" value="Click to create your dog" />
</form>
</div>
</noscript>
</body>
</html>
111Chapter 4 ■ Secured User Interfaces
In the head section of Example 4-1, after the validator.js file has been inserted into the program,
some CSS has been included that hides (display:none) a division (div) tag with an ID of JS. Just below the
CSS code is a small amount of JavaScript code. This code switches the JS division to be visible ($("#JS").
show()) and hides the noJS division. There is only one slight difference between the forms in the JS and noJS
divisions. You should notice that the noJS form does not call the validate_input JavaScript function.
Why is this?
The answer is simple. If the browser does not have JavaScript enabled, the short JavaScript routine to
hide and show the divisions will not run. Thus, the JS division will not be displayed in the browser (because
the CSS at the top of the code set its display to none). The noJS division will be visible instead. This allows
a browser that does not have JavaScript to send the information entered by the user directly to the PHP
program on the web server. Hopefully, the user has an HTML5 browser that will still validate the information
before it is sent to the server (#1 in this scenario). However, even if they don’t, the information will be
validated on the server (#3 in this scenario, as you will see later in the chapter.
If JavaScript is enabled in the browser, the hide-show routine will “hide” the noJS division and show
the JS division. The form that submits the information to the validate_input function will display in the
browser. This will allow browsers that have JavaScript enabled to validate information entered by using the
validate_input JavaScript function. If the user has an HTML5 browser (#1 in this scenario), this might be
overkill, since HTML5 can validate the information. However, you must be prepared for users who have not
upgraded their browsers (#2 in this scenario).
Figure 4-1. The lab.html file
In Example 4-1, the dog_name, dog_breed, and dog_color text boxes set field lengths to the same
maximum values that were validated in the Dog class in Chapter 3. They also use the HTML5 pattern
property ([a-zA-Z]) to only allow alphabetic characters. The title property is used to display an error to
the user if incorrect information is entered. The dog_weight text box uses an input type of number, which
automatically restricts the input. The min and max parameters are also set to restrict the dog’s weight
between 1 and 120 lbs. As mentioned, the browser might not interpret these restrictions if it has not fully
implemented HTML5 standards. Therefore, you still must also validate the data using the JavaScript
validate_input method to be sure that all validation has been completed.
112Chapter 4 ■ Secured User Interfaces
HTML5 capable browsers will validate the information before it is sent to the validate_input
function. Thus, if the browser is completely HTML5, all the information will also pass the validation from
the JavaScript method. You could check the browser version to determine if the browser is 100% HTML5.
However, that would take more JavaScript coding and is unnecessary since the application accomplishes its
task without more code.
It is important that all validations are consistent throughout the process of accepting information from
the user and passing that information to the application. HTML and JavaScript code are easily viewable
by the user (you can “View Source” from within a browser to see the code). Validation of any highly secure
format should be done from within a program language that is compiled and secured on a server.
Security and performance —You may be wondering why you should even bother to
validate on the user side. Why not just pass all the information to the program on the server
and let that program tell you if you need to fix anything? Some programmers actually
do this. However, the goal is to have an efficient program. By attempting to validate the
information in the user’s browser, you reduce the number of calls to/from the server. This
improves the application and web server performance and efficiency. In addition, as you
will see, by validating in the browser, the contents in the text boxes will still be available
to the user to adjust. If validation is done on the web server, information in the HTML
form will be lost because the web page will be reloaded each time you send and receive
information from the web server.
The goal of validation in the browser is to make sure that the user provides information that meets the
requirements of the program on the server. You may initially cringe that this example displays the format of
required information to the user. However, the goal is not to secure the data; the goal is to make sure the data
is valid. It is not a security breach to inform the user of the data format requested.
<form method="post" action="lab.php" onSubmit="return validate_input(this)">
The form uses the parameter onSubmit to pass all information that has been entered to the JavaScript
method (validate_input). The this keyword indicates that all information from this object (which is the
form itself and all the text boxes) is passed to the method. The return keyword indicates that the method
will return a TRUE or FALSE status. The HTML code will submit the form to the PHP program (lab.php) on
the server if a TRUE status has been returned from the validate_input method.
Do It
1.
Adjust Example 4-1 to include gender information from the Do It in Chapter 3.
Use a text box to receive the information from the user. Try to use HTML5 to
restrict the type of information the user can enter in the text box. Test your code.
113Chapter 4 ■ Secured User Interfaces
JavaScript Validation
Although this is not a JavaScript book, it will take a brief look at form validation used in the JavaScript
method validate_input.
Example 4-2. Form validation via JavaScript—validator.js
function allalphabetic(the_string)
{
var letters = /^[a-zA-Z ]+$/;
if (the_string.match(letters))
{
return true;
}
else
{
return false;
}
}
// -------------------------------------------------------------------------------------------
function validate_dog_name(the_string)
{
if ((the_string.length > 0) && (allalphabetic(the_string)) && (the_string.length < 21))
{
return true;
}
else
{
return false;
}
}
// -------------------------------------------------------------------------------------------
function validate_dog_breed_color(the_string)
{
if ((the_string.length > 0) && (allalphabetic(the_string)) && (the_string.length < 35))
{
return true;
}
else
{
return false;
}
}
function validate_dog_weight(the_string)
{
if ((the_string > 0 && this_string <= 120) && (!isNaN(the_string)))
{
return true;
}
114Chapter 4 ■ Secured User Interfaces
else
{
return false;
}
}
// -----------------------------------------------------------------------------------------
function validate_input(form)
{
var error_message = "";
if (!validate_dog_name(form.dog_name.value))
{
error_message += "Invalid dog name. ";
}
if (!validate_dog_breed_color(form.dog_breed.value))
{
error_message += "Invalid dog breed. ";
}
if (!validate_dog_breed_color(form.dog_color.value))
{
error_message += "Invalid dog color. ";
}
if (!validate_dog_weight(form.dog_weight.value))
{
error_message += "Invalid dog weight. ";
}
if (error_message.length > 0)
{
alert(error_message);
return false;
}
else
{
return true;
}
}
if (!validate_dog_breed_color(form.dog_color.value))
{
error_message += "Invalid dog color. ";
}
if (!validate_dog_weight(form.dog_weight.value))
{
error_message += "Invalid dog weight. ";
}
if (error_message.length > 0)
{
alert(error_message);
return false;
}
115Chapter 4 ■ Secured User Interfaces
else
{
return true;
}
}
<script src="validator.js"></script>
In Example 4-1, the JavaScript file validator.js is attached to the lab.html file in the head section via
an HTML script tag. By placing the JavaScript validation in a separate file, you have simplified the HTML
file. The JavaScript file is dependent on the HTML file for display. Error messages are passed to an alert box
(alert(error_message);) near the bottom of the method.
Programming suggestion—By passing only a status (error message) back to a calling
program, you allow for flexibility. The calling program can then determine how to display
the information. This also allows you to easily reuse the method for other HTML forms.
Let’s work backward in reviewing the JavaScript code (Example 4-2). In the HTML file, the onSubmit
parameter of the form tag calls the validate_input JavaScript method. This method controls all the
validation of each text box on the form. The method uses a series of if statements to call methods that will
validate the different types of text boxes. The format of each if statement is very similar.
if (!validate_dog_name(form.dog_name.value))
Each method called will return a true response if the validation passes and a false response if the
validation fails. (In JavaScript, the constants true and false are lowercase. In PHP they are uppercase.)
By passing form into the validate_input function, all the parameters and values in the HTML form are
passed at the same time. You can select which parameter to use by using dot notation.
In the previous example, form.dog_name.value will pull the value that was entered in the dog_name text
box. The value that the user entered in this text box is passed into the validate_dog_name method.
if (!validate_dog_name(form.dog_name.value))
{
error_message += "Invalid dog name. ";
}
The ! symbol in front of the function name means not. An if statement normally executes if the
response from a method (or comparison) is true. However, you want to save an error message in the
error_message property if the response returned from the method (validate_dog_name) is false (it did not
validated correctly). The ! symbol causes the if statement to do the reverse of what’s normal and execute if
the function returns a false value.
Each of the other validation methods works in similar ways. The methods check to see if the
information entered was in the correct format. If the information was correct, the method returns true. If the
information was not correct, the method returns false.
For more information on the JavaScript if conditional statement, visit
https://www.thenewboston.com/videos.php?cat=10&video=16960
For more information on JavaScript functions (methods), visit
https://www.thenewboston.com/videos.php?cat=10&video=16952
116Chapter 4 ■ Secured User Interfaces
function validate_dog_name(the_string)
{
if ((the_string.length > 0) && (allalphabetic(the_string)) && (the_string.length <= 20))
{
return true;
}
else
{
return false;
}
}
Each method accepts the value from the particular text box by passing it into the the_string property
(function validate_dog_name(the_string)). The if statement in each method does most of the work. In
the validate_dog_name method, the if statement attempts to check three requirements for the dog name.
The first part of the statement uses the length method to make sure the length of the string is greater than
zero. If the length of the string is not greater than zero, the user did not enter anything in the text box. Next,
the if statement passes the_string to an allalphabetic method to determine if the text box contains only
alphabetic characters (you will look at the function shortly). Finally the if statement checks the string length
again to make sure it has not exceeded 20 characters. The && symbol is an AND symbol that requires that all
three of these checks be true for the complete if statement to be considered true. If all three are true, the if
statement returns true to the validate_input method. If any of the three are false, the if statement returns
false to the validate_input method.
Programming note—JavaScript strings include built-in methods that automatically exist
once a variable has been created and set with a string value. In the examples in this chapter,
you use both the length method and the match method. The length method returns the
length of the string. The match method determines if the string contains a set of characters
that has been passed into the method (see the next example).
dog_name, dog_breed, and dog_color all require that only alphabetic characters be allowed. So you
created the allalphabetic method that can be called by each validation method instead of repeating the
same code.
function allalphabetic(the_string)
{
var letters = /^[a-zA-Z ]+$/;
if (the_string.match(letters))
{
return true;
}
else
{
return false;
}
}
117Chapter 4 ■ Secured User Interfaces
The allaphabetic method uses a regular expression to check for alphabetic characters. Most program
languages (including PHP) enable the programmer to create a regular expression that will check a string for
a required format.
var letters = /^[a-zA-Z ]+$/;
This line sets up the expression to determine if the string only has lowercase and/or uppercase
alphabetic characters (a though z, A through Z). You will work more in detail with regular expressions within
PHP in a later chapter.
For more information on JavaScript regular expressions, visit
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
For more information on the JavaScript match method, visit
http://www.w3schools.com/jsref/jsref_match.asp
One of the methods that exists in all JavaScript strings is the match method. This method compares the
contents of the string (the_string) to the regular expression (alphabetic characters in this example). If the
string meets the requirements of the expression (only contains alphabetic characters), then the method will
return true. Otherwise, it will return false. In this example, if the string is alphabetic, true is returned to the
if statement in the validate_dog_name (or validate_dog_color or validate_dog_breed) method. If any
part of the string contains something other than alphabetic characters, a false is returned to the if statement
(which in turn will make the results of the if statement false even if the string size is correct).
Going back to the bottom of the JavaScript code, you determine what to return to the HTML program
(lab.html).
if (!validate_dog_weight(form.dog_weight.value))
{
error_message += "Invalid dog weight. ";
}
if (error_message.length > 0)
{
alert(error_message);
return false;
}
else
{
return true;
}
Each if statement at the bottom of the validate_input method will build an error message (such as
"Invalid dog weight.") and place it in the error_message property if the validation fails (If a false is
returned from the if statement). The += symbol concatenates what is currently in the property with what is
being placed into the property (so you don’t overwrite any messages that are already there).
The last if statement (if (error_message.length > 0) checks the length of the error_message
property. If it is greater than zero (error messages have been passed into the property), the program will
display the messages in an alert box and return false to the HTML program (lab.html). If the length is zero,
there were no error messages; true is passed back to the HTML program.
<form method="post" action="lab.php" onSubmit="return validate_input(this)">
118Chapter 4 ■ Secured User Interfaces
In Example 4-1, the format of the form tag will automatically cause a response if a true or false is
returned from the validate_input method. If true is returned (there were no validation problems), the
HTML program will send the form properties and values to the lab.php program on the web server. If false
is returned (there was at least one validation problem), the HTML program will not pass the information and
will stay visible in the browser. The alert box will display for the user to see what errors have occurred. When
the user closes the alert box, they will still be on the HTML page (with the information they had previously
entered). They can correct any incorrect information and click the Submit button (again) to revalidate the
information they have entered.
Figure 4-2. The lab.html file with incorrect entries
Figure 4-3. The lab.html file after failing JavaScript verification
119Chapter 4 ■ Secured User Interfaces
■■Note Different browsers react in different ways to JavaScript code. Internet Explorer tries to block
JavaScript code by default. If you see no results and are sure your code is correct, yet are receiving error
messages about missing methods (such as validate_input) it may be that your browser’s ability to execute
JavaScript is turned off. Either turn it on in the settings of the browser or try a different browser that allows
JavaScript to run.
Security and performance—Although you have verified input on the HTML page, the data
could still cause harm to the system. The user could try to send HTML, JavaScript, and
even PHP code that could to cause harm. This could occur from bad information entered
in the HTML page, a packet sniffing program intercepting the data transferring to the PHP
page, or a program trying to bypass the HTML page altogether. No matter which of these
activities produced the harmful information, the PHP program will need to detect it and
handle the problem. Therefore, the receiving program (lab.php) must try to filter (clean
and remove harmful code) the data.
Do It
1.
Adjust Example 4-2 to validate the gender text box from the first Do It. Make sure
to include an error message to indicate the problem(s). Also make sure the error
message is added to the $error_message property to be displayed with all other
error messages. Make sure to test your code for all possible problems with the
user entering data. Don’t forget to test if they do not enter any data.
PHP Filtering
It’s time to look at the changes required to the php file (lab.php). You need to be able to accept in the
properties and values (dog_name, dog_breed, dog_color, and dog_weight) from the HTML program.
However, you need to be concerned that someone might try to send information that could affect the
operation of the program or even crash the system in which it is operating.
This section takes two approaches to help reduce the possibility of harmful data. First, you will
determine if you have received all required information. If not, you will ask the user to return to the HTML
page (lab.html) to enter the information. This will, at least, make sure that you have all data and it meets the
validation provided by the HTML5 page and/or JavaScript program (validator.js). Second, you will use
some existing PHP methods to filter out HTML, JavaScript, and PHP syntax from the data received. This will
reduce the chance that an executable statement will be passed into the program.
Example 4-3. Partial listing of the top of lab.php with the clean_input method
<?php
require_once("dog.php");
function clean_input($value)
{
$bad_chars = array("{", "}", "(", ")", ";", ":", "<", ">", "/", "$");
$value = str_ireplace($bad_chars,"",$value);
// This part below is really overkill because the string replace above removed special characters
$value = htmlentities($value); // Removes any html from the string and turns it into &lt; format
120Chapter 4 ■ Secured User Interfaces
$value = strip_tags($value); // Strips html and PHP tags
if (get_magic_quotes_gpc())
{
$value = stripslashes($value); // Gets rid of unwanted quotes
}
return $value;
}
if ((isset($_POST['dog_name'])) && (isset($_POST['dog_breed'])) && (isset($_POST['dog_
color'])) && (isset($_POST['dog_weight'])))
{
$dog_name = clean_input($_POST['dog_name']);
$dog_breed = clean_input($_POST['dog_breed']);
$dog_color = clean_input($_POST['dog_color']);
$dog_weight = clean_input($_POST['dog_weight']);
$lab = new Dog($dog_name,$dog_breed,$dog_color,$dog_weight);
list($name_error, $breed_error, $color_error, $weight_error) = explode(',', $lab);
...
For more information on the PHP function isset, visit
Examples: http://php.net/manual/en/function.isset.php
Videos: https://www.thenewboston.com/videos.php?cat=11&video=17087
For more information on $_POST, visit
Examples: http://php.net/manual/en/reserved.variables.post.php
Videos: https://www.thenewboston.com/videos.php?cat=11&video=17087
At the top of lab.php, you are adding several items to provide more secure code.
if ((isset($_POST['dog_name'])) && (isset($_POST['dog_breed'])) &&
(isset($_POST['dog_color'])) && (isset($_POST['dog_weight'])))
This if statement uses the isset method and $_POST to verify that all four properties (dog_name,
dog_breed, dog_color, and dog_weight) have been passed into the program with the POST method. If all
items have been passed, you then will filter (clean) those items. If any of them have not been passed, an else
statement (that you will look at later) will request the user go back to the lab.html page to enter all needed
information.
$dog_name = clean_input($_POST['dog_name']);
Each property is passed to the clean_input method (after it has been retrieved using the
$_POST method) to remove harmful tags. In this example, the $dog_name property (on the left
side of the = sign) will receive the cleaned information.
function clean_input($value)
{
$bad_chars = array("{", "}", "(", ")", ";", ":", "<", ">", "/", "$");
$value = str_ireplace($bad_chars,"",$value);
$value = strip_tags($value); // Strips html and PHP tags
$value = htmlentities($value); // Removes any html from the string and turns it into &lt; format
121Chapter 4 ■ Secured User Interfaces
if (get_magic_quotes_gpc())
{
$value = stripslashes($value); // Gets rid of unwanted quotes
}
return $value;
}
■■Note set_magic_quotes_runtime and magic_quotes_runtime has been removed since PHP 5.4. Magic
quotes (since PHP 5.4) can no longer be set at runtime.
For more information on the str_ireplace method, visit
http://php.net/manual/en/function.str-ireplace.php
The clean_input method creates an array $bad_chars that contains a list of all special characters
you want to remove from the string (you will look at arrays in more detail later in this chapter and future
chapters). The str_ireplace method ($value = str_ireplace($bad_chars,"",$value);) will replace
all these characters with "" (nothing, it removes them) from the $value property and place what is left into
$value. There may be occasions that you do want some of these special characters (for example in an SQL
statement). However, you do not need any of these for the input in this example, so you can remove them.
■■Note It would be effective and efficient for this example to just remove the characters that are not valid. In
a real-world situation, you would not need to also include the stripslashes, htmlentities, and string_tags
methods (shown in the method). They are included here to demonstrate their use and why, in other situations,
you might use them.
The three PHP methods (stripslashes, htmlentities, and strip_tags) are used to convert harmful
code so it cannot be executed. The stripslashes method removes backslashes from quotes (which actually
can also done by the str_ireplace method). The htmlentities method converts HTML characters to their
equivalent HTML entity (for example a is converted to &#039;). The strip_tags method removes any PHP
or HTML tags. If you were using SQL to update a database, you need to add additional functions to disable
any harmful SQL statements.
For more information on stripslashes, htmlentities, and strip_tags, visit
Examples – stripslashes: http://php.net/manual/en/function.stripslashes.php
Examples – htmlentities: http://php.net/manual/en/function.htmlentities.php
Examples – strip-tags: http://php.net/manual/en/function.strip-tags.php
Video – magic quotes and stripslashes: https://www.youtube.com/watch?v=NUqkUjbGuPY
Video – htmlentities: https://www.thenewboston.com/videos.php?cat=11&video=17058
Video – strip_tags: https://www.youtube.com/watch?v=rn_dnQFLt3U
122Chapter 4 ■ Secured User Interfaces
Security and performance—It is extremely important that the program filter out any
possible harmful information received from outside the application. It is much easier to
remove the harmful data initially, or reject the data initially, before it has been used or
saved. With major breaches in security today, this is an absolute MUST DO.
You could have also restricted which programs called the PHP program. The $__SERVER global variable
can assist you.
if($__SERVER['HTTP_REFERER'] == 'http://www.mysite.com/lab.html')
{ // code executed if valid location }
else {exit;}
For more information on the $__SERVER array, visit
Examples: http://php.net/manual/en/reserved.variables.server.php
Video: https://www.thenewboston.com/videos.php?cat=11&video=17047
This example code would reject any program that calls the lab.php program (except for the lab.html
program that is located at the site). The exit; command closes the program if it is not called from the
correct HTML page.
The filter methods demonstrated will not keep someone from entering “asabsbabsa” as a dog name.
However, these methods will keep any entry from being harmful.Example 4-4. Partial list of the bottom of
lab.php with the clean_input method
else
{
print "<p>Missing or invalid parameters. Please go back to the lab.html page to enter valid
information.<br />";
print "<a href='lab.html'>Dog Creation Page</a>";
}
The true part of the if statement mentioned includes all the active code in the lab.php file. If one or
more parameters is missing, the else section (at the bottom of the lab.php file) will request that the user go
back to the lab.html page to properly enter the information.
Do It
Adjust the code in the new lab.php file (download it from the book’s web site). Add code to filter for bad
gender code and make sure that gender information has been received from the HTML file. Make sure to
pass your property through the clean_input method to remove any harmful data.
Additional HTML Input Security
As you can see from all the code you have seen in this chapter so far, whenever a text box is used on an
HTML form, additional code in several areas must be included to validate what the user has typed. Text
boxes are necessary when you need to allow the user flexibility in what they can enter (such as a form that
includes name and address). However, you can use other form objects when you want to limit the user’s
response to a particular list of possible values (such as two-letter abbreviations for states). This would
provide more valid data because the user won’t be able to enter a typo or enter invalid data.
123Chapter 4 ■ Secured User Interfaces
HTML5 Select List Box and Radio Buttons
One item that you can change from the original HTML file is the entry of the dog breed. The American
Kennel Club currently has over 150 breeds listed on its web site. You can type an option value line for each
breed in the HTML file. However, this would be time consuming. Also, if a breed changed, you will have to
go back and adjust the list. A better option is to place the breeds in a file and then use that file to populate a
select list. If a breed changes or is added, you simply update the one file in one place and all programs that
use it will access the new list automatically. If this file is hosted on the web server, you can also use the same
file in the dog.php code to verify that a correct breed has been passed to the web server from the user.
Example 4-5. The breeds.xml file
<?xml version="1.0" encoding="UTF-8"?>
<breeds>
<breed>Affenpinscher</breed>
<breed>Afghan Hound</breed>
<breed>Airedale Terrier</breed>
<breed>Akita</breed>
<breed>Alaskan Malamute</breed>
<breed>American English Coonhound</breed>
<breed>American Eskimo Dog</breed>
<breed>American Foxhound</breed>
<breed>American Staffordshire Terrier</breed>
...
</breeds>
Security and performance—Providing the user a list of possible values to choose from on an
HTML form provides more validity and security than using text boxes. If the user can only
pick from a list, they cannot choose incorrectly, nor enter invalid or harmful information.
The breeds.xml file contains simple XML code (two tags—breeds and breed) listing all breeds. If you
were creating a true dog breed site, you probably would want to include more information in this file. You
could add more information later without it affecting this program.
You now want to use the XML file (from Example 4-5) to populate a select list box. Since this file will
reside on the server, you need to create a program on the server to call and retrieve the information. You will
assume that this file has been secured on the server for read-only access. You will not attempt to update or
delete any information in the file itself.
You can create a PHP program that will retrieve the information you need with just a few lines of code.
Security and performance—Remember, security is a team effort. Not only does the program
need to be secured, but the web server and its file structure must also be properly secured.
Example 4-6. The getbreeds.php file
<?php
$breed_file = simplexml:load_file("breeds.xml");
$xmlText = $breed_file->asXML();
print "<select name='dog_breed' id='dog_breed'>";
print "<option>Select a dog breed</option>";
124Chapter 4 ■ Secured User Interfaces
foreach ($breed_file->children() as $name => $value)
{
print "<option value='$value'>$value</option>";
}
print "</select>";
?>
PHP can complete many powerful tasks with just a few lines of code. The first line of Example 4-6 opens
the breeds.xml file, places the contents into a property ($breed_file), and then closes the breeds.xml file.
Skipping to the foreach statement:
foreach ($breed_file->children() as $name => $value)
XML data is treated with a parent-child relationship. The parent can contain children (and the children
can have children). In the XML file, the initial parent is breeds. The children that exist under breeds all have
the label breed.
<breed>Affenpinscher</breed>
The value in each breed (child) in this example is the text that exists between the breed tags (for
example, Affenpinscher).
$breed_file->children() directs the foreach statement to loop through each child (breed in this file).
The as $name=> $value part of the statement tells the system to place each child label name (in this
example it is always breed, but you can have different children) in $name. It also directs the system to place
the value contained in the child (Affenpinscher) in $value.
print "<option value='$value'>$value</option>";
Inside the foreach loop, the print statement places the contents of $value in two places—the value
parameter of the option tag and between the option tags. For the first child, it would produce
Option value='Affenpinscher'>Affenpinscher</option>
The foreach loop automatically loops through the file until there are no more records in the file. Similar
lines would be created for each of the breeds in the file. These lines, with the other print lines in the file,
create an HTML select box dynamically from the contents of the XML file.
For more information on the foreach loop, visit
Examples: http://php.net/manual/en/control-structures.foreach.php
Video: https://www.thenewboston.com/videos.php?cat=11&video=17027
For more information on reading XML files, visit
Video: https://www.thenewboston.com/videos.php?cat=11&video=17090
You need to now call this program from within the HTML file. You can do this using the example
JavaScript file from Chapter 2, which uses AJAX. This will allow you to retrieve the select box by only
updating the section of the page that will display the box. The only line that needs to be changed from the
Chapter 2 example is the line that calls the PHP program.
xmlHttp.open("GET", "get_breeds.php", true);
125Chapter 4 ■ Secured User Interfaces
You simply replace the existing file name with the program that retrieves the select box (get_breeds.php).
You can then rename the file (get_breeds.js).You could also pass the name of the program you want to run
into the JavaScript method (you will do that later in this chapter).
You now need to make a few changes to the HTML file to use get_breeds.js and to create a div tag for
the area that will hold the select box.
Example 4-7. The lab.html file with a dynamic select box
<!DOCTYPE html>
<html lan="en">
<head>
<title>Dog Object</title>
<script src="get_breeds.js"></script>
<script src="validator.js"></script>
<style type="text/css">
#JS { display:none; }
</style>
<script>
function checkJS() {
document.getElementById('JS').style.display = "inline";
}
</script>
</head>
  
<body onload="checkJS();">
<h1>Dog Object Creater</h1>
<div id="JS">
<form method="post" action="lab.php" onSubmit="return validate_input(this)">
<h2>Please complete ALL fields. Please note the required format of information.</h2>
Enter Your Dog's Name (max 20 characters, alphabetic) <input type="text" pattern="[a-zA-Z]*"
title="Up to 20 Alphabetic Characters" maxlength="20" name="dog_name" id="dog_name" /><br
/><br />
Select Your Dog's Color:<br />
<input type="radio" name="dog_color" id="dog_color" value="Brown">Brown<br />
<input type="radio" name="dog_color" id="dog_color" value="Black">Black<br />
<input type="radio" name="dog_color" id="dog_color" value="Yellow">Yellow<br />
<input type="radio" name="dog_color" id="dog_color" value="White">White<br />
<input type="radio" name="dog_color" id="dog_color" value="Mixed">Mixed<br /><br />
Enter Your Dog's Weight (numeric only) <input type="number" min="1" max="120"
name="dog_weight" id="dog_weight" /><br /><br />
<script>
AjaxRequest();
</script>
<div id="AjaxResponse"></div><br />
<input type="submit" value="Click to create your dog" />
</form>
</div>
<noscript>
<div id="noJS">
<form method="post" action="lab.php">
<h2>Please complete ALL fields. Please note the required format of information.</h2>
126Chapter 4 ■ Secured User Interfaces
Enter Your Dog's Name (max 20 characters, alphabetic) <input type="text" pattern="[a-zA-Z
]*" title="Up to 20 Alphabetic Characters" maxlength="20" name="dog_name" id="dog_name"
/><br /><br />
Select Your Dog's Color:<br />
<input type="radio" name="dog_color" id="dog_color" value="Brown">Brown<br />
<input type="radio" name="dog_color" id="dog_color" value="Black">Black<br />
<input type="radio" name="dog_color" id="dog_color" value="Yellow">Yellow<br />
<input type="radio" name="dog_color" id="dog_color" value="White">White<br />
<input type="radio" name="dog_color" id="dog_color" value="Mixed">Mixed<br /><br />
Enter Your Dog's Weight (numeric only) <input type="number" min="1" max="120"
name="dog_weight" id="dog_weight" /><br /><br />
Enter Your Dog's Breed (max 35 characters, alphabetic) <input type="text" pattern="[a-zA-Z
]*" title="Up to 15 Alphabetic Characters" maxlength="35" name="dog_breed" id="dog_breed"
/><br />
<input type="submit" value="Click to create your dog" />
</form>
</div>
</noscript>
</body>
</html>
The only true changes related to creating the dynamic select box are highlighted in bold in Example 4-7.
<script src="get_breeds.js"></script>
The script tag is added near the top of the code to pull in the JavaScript file that contains AJAX to call
the PHP program (get_breeds.php) that will display the select box.
<script>
AjaxRequest();
</script>
<div id="AjaxResponse"></div><br />
A script area has been placed in the JS section of the code (the section that will execute if JavaScript
is enabled in the browser.) It includes just one line (AjaxRequest();) to execute the AJAX JavaScript code
(from the get_breeds.js file). <div id="AjaxResponse"></div> is placed below the closing script tag.
This line should look familiar. It is the same line that was included in the Chapter 2 AJAX example. The output
of the AjaxRequest() method places the response that is returned from the web server between the div tags
with the ID of AjaxResponse. In this example, the dynamically created select box is placed in that location.
127Chapter 4 ■ Secured User Interfaces
Figure 4-4. The lab.html file with dynamic select box and radio buttons
You have also replaced the color text box with a static selection of radio buttons. There are just a few
possible color combinations for dogs (OK, pretend I am right), and these color combinations are not likely to
change, so you don’t need a dynamic list. It makes sense to just hard code the selections in the HTML file.
If the user does not have JavaScript enabled, the original dog breed text box will be displayed (from
the NJ section of the code). However, since you did not use JavaScript to create the radio buttons, you
include the radio buttons in both sections to provide some better secure coding for non-enabled JavaScript
browsers.
The Interface of the program (lab.html) now greatly reduces the possibility of invalid data being
entered by reducing the number of text boxes used. The users (assuming they have JavaScript enabled) have
no choice but to pick a breed from the select box and to pick a color from the radio buttons.
You can also now use the same XML file to validate that you have received a valid breed name from the
users on the server side.
Do It
Adjust the lab.html file from Example 4-7 to include radio buttons (instead of a text box) to accept the
gender from the users. Make sure the new lab.html file works with your lab.php file from the previous Do It.
Validating Input with an XML File
You can add just a few lines of code in the dog.php file to validate that the user has not only sent a correctly
formatted string, but has also sent a breed listed by the AKC.
128Chapter 4 ■ Secured User Interfaces
Example 4-8. The validator_breed function (in dog.php)
private function validator_breed($value)
{
$breed_file = simplexml:load_file("breeds.xml");
$xmlText = $breed_file->asXML();
if(stristr($xmlText, $value) === FALSE)
{
return FALSE;
}
else
{
return TRUE;
}
}
You can create a private function (only to be used inside the class) to check on the proper breed. This
function will accept a value passed into the $value property. The function will then use $breed_file =
simplexml:load_file("breeds.xml"); to dump the contents of the XML file into $breed_file. The next line
($xmlText = $breed_file->asXML();) converts the contents of $breed_file into a well formatted string.
if(stristr($xmlText, $value) === FALSE)
The stristr method compares the contents of its second parameter (in this case $value) to see if it
exists in the string in the first parameter ($xmlText). If it does not exist, it returns FALSE. If it does exist, it
returns the location of the string. For your needs you just need to know if it exists. If it does not, you return
FALSE. If it does, you return TRUE.
For more information on the stristr method, visit
http://php.net/manual/en/function.stristr.php
Example 4-9. The complete dog class with validation
<?php
class Dog
{
// ----------------------------------------- Properties ------------------------------------
private $dog_weight = 0;
private $dog_breed = "no breed";
private $dog_color = "no color";
private $dog_name = "no name";
private $error_message = "??";
// ---------------------------------- Constructor -----------------------------------------
function __construct($value1, $value2, $value3, $value4)
{
if (method_exists('dog_container', 'create_dog_app')) {
$name_error = $this->set_dog_name($value1) == TRUE ? 'TRUE,' : 'FALSE,';
$breed_error = $this->set_dog_breed($value2) == TRUE ? 'TRUE,' : 'FALSE,';
$color_error = $this->set_dog_color($value3) == TRUE ? 'TRUE,' : 'FALSE,';
$weight_error= $this->set_dog_weight($value4) == TRUE ? 'TRUE' : 'FALSE';
129Chapter 4 ■ Secured User Interfaces
$this->error_message = $name_error . $breed_error . $color_error . $weight_error;
}
else
{
exit;
}
}
//------------------------------------toString---------------------------------------------
public function __toString()
{
return $this->error_message;
}
  
// ---------------------------------- Set Methods -----------------------------------------
function set_dog_name($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 20) ? $this->dog_name = $value :
$this->error_message = FALSE;
return $this->error_message;
}
function set_dog_weight($value)
{
$error_message = TRUE;
(ctype_digit($value) && ($value > 0 && $value <= 120)) ? $this->dog_weight = $value :
$this->error_message = FALSE;
return $this->error_message;
}
function set_dog_breed($value)
{
$error_message = TRUE;
((preg_match("/[a-zA-Z ]+$/", $value)) && ($this->validator_breed($value) === TRUE) &&
strlen($value) <= 35) ? $this->dog_breed = $value : $this->error_message = FALSE;
return $this->error_message;
}
function set_dog_color($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 15) ? $this->dog_color = $value : $this->error_
message = FALSE;
return $this->error_message;
}
// ----------------------------------------- Get Methods ----------------------------------
function get_dog_name()
{
return $this->dog_name;
}
function get_dog_weight()
{
return $this->dog_weight;
}
130Chapter 4 ■ Secured User Interfaces
function get_dog_breed()
{
return $this->dog_breed;
}
function get_dog_color()
{
return $this->dog_color;
}
function get_properties()
{
return "$this->dog_weight,$this->dog_breed,$this->dog_color.";
}
// ------------------------------General Method---------------------------------------------
private function validator_breed($value)
{
$breed_file = simplexml:load_file("breeds.xml");
$xmlText = $breed_file->asXML();
if(stristr($xmlText, $value) === FALSE)
{
return FALSE;
}
else
{
return TRUE;
}
}
}
?>
//------------------------------------toString----------------------------------------------
public function __toString()
{
return $this->error_message;
}
// ---------------------------------- Set Methods ------------------------------------------
function set_dog_name($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 20) ? $this->dog_name = $value :
$error_message = FALSE;
return $error_message;
}
function set_dog_weight($value)
{
131Chapter 4 ■ Secured User Interfaces
$error_message = TRUE;
(ctype_digit($value) && ($value > 0 && $value <= 120)) ? $this->dog_weight =
$value : $error_message = FALSE;
return $error_message;
}
function set_dog_breed($value)
{
$error_message = TRUE;
((ctype_alpha($value)) && ($this->validator_breed($value) === TRUE) && strlen($value) <= 35)
? $this->dog_breed = $value : $error_message = FALSE;
return $error_message;
}
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 15) ? $this->dog_color = $value : $error_message = FALSE;
return $error_message;
}
// ----------------------------------------- Get Methods ----------------------------------
function get_dog_name()
{
return $this->dog_name;
}
function get_dog_weight()
{
return $this->dog_weight;
}
function get_dog_breed()
{
return $this->dog_breed;
}
function get_dog_color()
{
return $this->dog_color;
}
function get_properties()
{
return "$this->dog_weight,$this->dog_breed,$this->dog_color.";
}
// ------------------------------General Method---------------------------------------------
private function validator_breed($value)
{
$breed_file = simplexml:load_file("breeds.xml");
$xmlText = $breed_file->asXML();
if(stristr($xmlText, $value) === FALSE)
{
return FALSE;
}
132Chapter 4 ■ Secured User Interfaces
else
{
return TRUE;
}
}
}
?>
function set_dog_color($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 15) ? $this->dog_color = $value : $error_message =
FALSE;
return $error_message;
}
// ----------------------------------------- Get Methods ----------------------------------
function get_dog_name()
{
return $this->dog_name;
}
function get_dog_weight()
{
return $this->dog_weight;
}
function get_dog_breed()
{
return $this->dog_breed;
}
function get_dog_color()
{
return $this->dog_color;
}
function get_properties()
{
return "$this->dog_weight,$this->dog_breed,$this->dog_color.";
}
// ------------------------------General Method---------------------------------------------
private function validator_breed($value)
{
$breed_file = simplexml:load_file("breeds.xml");
$xmlText = $breed_file->asXML();
if(stristr($xmlText, $value) === FALSE)
{
return FALSE;
}
else
{
return TRUE;
}
133Chapter 4 ■ Secured User Interfaces
}
}
?>
/ -------------------------------General Method---------------------------------------------
private function validator_breed($value)
{
$breed_file = simplexml:load_file("breeds.xml");
$xmlText = $breed_file->asXML();
if(stristr($xmlText, $value) === FALSE)
{
return FALSE;
}
else
{
return TRUE;
}
}
}
?>
You can now make a slight change to the code line that checks the validity of the dog_breed value
(see the bold highlighted line in Example 4-9).
((ctype_alpha($value)) && ($this->validator_breed($value) === TRUE) && strlen($value) <= 35)
? $this->dog_breed = $value : $error_message = FALSE;
The statement passes $value into validator_breed ($this->validator_breed($value)). If a TRUE
is returned then that part of the if statement would be true. Otherwise it would be false. If the complete if
statement is TRUE then the dog_breed property is set to the breed found in the XML file ($this->dog_breed
= $value). If it is false, then FALSE is passed into the $error_message property ($error_message = FALSE).
Programming note—When you call a function in the same object, you must use the $this
pointer ($this->validator_breed($value) === TRUE)).
You have now completed a program that much more secure. Users cannot enter any invalid
information. The only field they can attempt to do so is in the dog_name field. However, even if they try to
enter program code, or other code, the server-side program will strip out the special characters so the code
becomes harmless. If a packet sniffing program tries to change the data before it is received by the server-
side program, the validation and/or filtering methods will either cause the data to be rejected or will, again,
make the data harmless.
This program is efficient as it tries to validate the information before it is sent to the server. It reduces
the amount of communication back and forth between the server and the user. The completed program has
two tiers (interface, business rules) and can be expanded to include a third tier (data) without major changes
to the current code.
Programming recommendation—For small web applications that are used infrequently
it is not necessary to break the program apart, as is done in this example. However, as
mentioned, if it is an application that might expand in the future, or might gain significant
users in the future, the program should initially be created with this in mind, by breaking
the program into tiers.
134Chapter 4 ■ Secured User Interfaces
Do It
Go to the book’s web site and run the example program. See if you can “break” the security built into the
program. Remember, you can only attempt to be as secure as possible, nothing is 100% secure. Were you
able to send harmful information to the program that affected the program? If so, what did you do? What
might be missing from the program that allowed this to happen? If not, what stopped your harmful data from
corrupting the program? What changes might you make to this program that would require you to include a
data tier? What inefficiencies still exist in the program? What can you do to fix them?
Dependency Injection
As you have seen, when programs are created, a developer goes through many iterations before the final
application has been completed. Along the way, experience programmers will keep different versions of
their programs. This allows the programmers to back up to a previous version, quickly, if the version they
are working on has too many significant problems. Otherwise, they would have to attempt to strip out the
“bad” code without doing harm to the good code. Applications have many files (HTML, JavaScript, CSS, PHP
classes, and PHP libraries). Keeping track of which version works with which, or easily changing one part of
the program to use a new version of another part, can become confusing. Especially when the file names and
class names are coded in the code of the program itself.
Chapter 2 briefly discussed dependency injection. It allows the program (client) that will use a block of
code (such as a class) to not know the actual implementation of the block of code it will be using. The client
program does not know the actual class name.
You can use this idea to help the development process. The example you are about to look at is not
for large-scale applications. However, it does give you a chance to look at the benefits of dependency
injection. Large-scale applications should use a MVC (Model-View-Control) model or an established tier (or
component) system that provides more efficient communication between components.
Security and performance—Many times there is a trade-off between being as secure as
possible and having a program that has the best performance possible. The example that
follows will make multiple system calls when it checks to see if a program exists and then
uses require_once to load the program. The check for file existence allows the program to
handle missing files rather than the program just crashing. In a later chapter, you will look
at using try/catch blocks to allow the program to capture any problems without crashing
the program. This would reduce the number of system calls (you would no longer need to
check for the existence of the files), giving the program better performance.
The dog application uses classes and methods contained in different files. This requires the code to also
include require_once statements to pull the files into the program. The current design places the actual
file name in the require_once statement. This does not allow you to change different versions of the files,
unless you change the code. You will now remove these dependencies to provide more flexibility for future
development of the application.
Before you get too bogged down with the code, Figure 4-5 shows the flow of the relationship with the
programs.
135
www.allitebooks.comChapter 4 ■ Secured User Interfaces
Figure 4-5. Data flow for the dog application
The dog_interface.php program will provide the interface for all parts of the dog application. In
addition it provides security and filtering as you have already designed in the previous examples. Along
with these other activities, dog_interface creates and uses the dog_container object to contain, create,
and pass any other objects needed (without knowing the name of the objects). The dog_container object
uses an XML file (not shown) to discover the location and name of files containing the classes it will create
(providing dependency injection).
The application will always use the dog_interface program to access the other classes. The dog_interface
program will determine what classes are needed to accomplish a particular task. Whenever a class is needed,
the dog_interface will use the dog_container to determine the name and location of the class (via the XML
file), and to create an instance of the class (object). By using an XML file to list the class file names and locations,
changes can be made without causing any code changes to programs in the application.
When the breed select box is requested from the lab.html page, the dog_interface program is called.
It will create a dog_container object. The dog_container object will discover the location and file name of
the get_breeds class file and the breeds XML file. Once it is discovered, the dog_container object will create
a get_breeds object. The get_breeds object will then build the code for the select box; eventually returning
the code to the form in lab.html for display to the user. All objects (dog_container and get_breeds) are
then destroyed (removed from memory).
When the Submit button is clicked on the lab.html form (assuming all validation is passed), it will call
the dog_interface program. This program will create the dog_container object. The dog_container object
will then discover the location and file name of the dog.php class file. Once discovered, the dog_container
object will create the dog object. The dog object will behave exactly as it has in previous examples (validating
properties and displaying properties). Once the dog object has completed, the objects (dog_container
and dog) are destroyed (removed from memory). This design allows complete independence of the objects
providing both two-tier design (interface and business rules) and dependency injection.
Example 4-10. The dog_applications.xml file
<?xml version="1.0" encoding="UTF-8"?>
<dog_applications>
<application>
<type ID="dog">
<location>dog3.php</location>
</type>
</application>
<application>
<type ID="selectbox">
<location>get_breeds2.php</location>
</type>
</application>
136Chapter 4 ■ Secured User Interfaces
<application>
<type ID="breeds">
<location>breeds.xml</location>
</type>
</application>
</dog_applications>
In Example 4-10, you have created a simple XML file that will be used for version changes of the
significant files in the PHP application. Each application tag identifies the type of file (dog, select box,
breeds). Each location tag within the application tag provides the file name and location (although in
this example you have all files in the same location). Once you adjust the program to use this file, you will
have the flexibility to change the file names (such as the example using dog3.php instead of dog.php) and
the location without having to change any program code. This can help you to swap versions in/out of the
application during the development process.
You will now create a Dog_container class that will contain two methods. get_dog_application will be
used to “fetch” the name and location of any of the files listed in the XML file. The create_object method will
create an instance of either the dog class or the get_breeds class.
Example 4-11. The dog_container.php file
<?php
class Dog_container
{
private $app;
private $dog_location;
function __construct($value)
{
if (function_exists('clean_input'))
{
$this->app = $value;
}
else
{
exit;
} }
public function set_app($value)
{
$this->app = $value;
}
public function get_dog_application()
{
$xmlDoc = new DOMDocument();
if ( file_exists("dog_applications.xml") )
{
$xmlDoc->load( 'dog_applications.xml' );
$searchNode = $xmlDoc->getElementsByTagName( "type" );
foreach( $searchNode as $searchNode )
{
$valueID = $searchNode->getAttribute('ID');
if($valueID == $this->app)
137Chapter 4 ■ Secured User Interfaces
{
$xmlLocation = $searchNode->getElementsByTagName( "location" );
return $xmlLocation->item(0)->nodeValue;
break;
}
}
}
return FALSE;
}
function create_object($properties_array)
{
$dog_loc = $this->get_dog_application();
if(($dog_loc == FALSE) || (!file_exists($dog_loc)))
{
return FALSE;
}
else
{
require_once($dog_loc);
$class_array = get_declared_classes();
$last_position = count($class_array) - 1;
$class_name = $class_array[$last_position];
$dog_object = new $class_name($properties_array);
return $dog_object;
}
}
}
?>
First, at the top of the class (dog_container), you declare two private properties—$app and
$dog_location. These properties are declared as private, instead of public, to keep their values only
known within this class.
In the constructor, $value accepts a name of an application type that you want to find in the XML
file (such as selectbox). Later in the code, you will compare $value to the type ID in the XML file to see if
you can find the application type and a file associated with it. The constructor places $value into the $app
property. However, the method also includes an if statement that uses the method function_exists to
determine if the clean_input function exists.
Why? At the beginning of the chapter, you briefly looked at code that allowed you to restrict the use of a
program to a specific application that has called it. In this example, you look at another technique to restrict
which programs can use this class. The if statement demands that any program that makes an instance of
this class must also have a clean_input method. If someone tries to make an instance of the program using
another program that does not already contain a clean_input method, the else part of the statement will
execute, which will cause the object not to be created and will close the program.
Security and performance—Any time a program is accepting information from the
Internet, or across a network, it is a good idea to determine the source of the information.
In addition to determining application and function names, PHP programs can also look
at the source IP addresses.
138Chapter 4 ■ Secured User Interfaces
public function get_dog_application()
{
$xmlDoc = new DOMDocument();
if ( file_exists("dog_applications.xml") )
{
$xmlDoc->load( 'dog_applications.xml' );
$searchNode = $xmlDoc->getElementsByTagName( "type" );
The first part of the get_dog_application method should look familiar. This code opens the
dog_applications.xml file (after making sure it exists). Then it loads the contents into $xmlDoc. The last line
calls the PHP method getElementsByTagName. This method searches for all occurrences of “type” in $xmlDoc
and places each occurrence in $searchNode.
foreach( $searchNode as $searchNode )
{
$valueID = $searchNode->getAttribute('ID');
if($valueID == $this->app)
{
$xmlLocation = $searchNode->getElementsByTagName( "location" );
return $xmlLocation->item(0)->nodeValue;
break;
}
}
The foreach loop looks at each line contained in $searchNode. It uses the PHP method getAttribute
to place the next line with an ID XML attribute into the property $valueID. Once it is placed in $valueID, the
value in this property (dog, selectbox, or breeds) is compared to $this->app. (The property app was loaded
with a value in the constructor.) If the ID is found in the XML file, getElementsByTagName will search for the
next line that contains a location XML tag. The return line then takes the value in the location tag (the file
name and its location) and returns it to the program that called this method. The break statement is used to
break out of the loop early because you have already returned the value needed in the previous line of code.
The else part of the method (shown in Example 4-11) will return FALSE if the XML file does not exist.
function create_object($properties_array)
The create_object method is used to create the dog and get_breeds objects. The dog object
constructor was expecting four values (dog_name, dog_weight, dog_breed, and dog_color) in its
constructor. The get_breeds app was not accepting any values in its constructor. In order to provide more
efficient code in dog_container, you change the signature of the constructor (the top line of the function) of
each class to accept an array, instead of individual values. This will allow you to pass any number of items
into either constructor.
function __construct($properties_array)
{ // dog class constructor
if (method_exists('dog_container', 'create_object')) {
$name_error = $this->set_dog_name($properties_array[0]) == TRUE ? 'TRUE,' : 'FALSE,';
$breed_error = $this->set_dog_breed($properties_array[1]) == TRUE ? 'TRUE,' : 'FALSE,';
$color_error = $this->set_dog_color($properties_array[2]) == TRUE ? 'TRUE,' : 'FALSE,';
$weight_error= $this->set_dog_weight($properties_array[3]) == TRUE ? 'TRUE' : 'FALSE';
139Chapter 4 ■ Secured User Interfaces
This requires changing these lines in the dog.php file to accept an array and then use the values in the
array to set each property.
Notice that $properties_array in the first line does not have anything that declares it as an array
(except the name). Remember that PHP properties determine what data type they are by what is passed in
the property. The same is true with arrays. If an array is passed into $properties_array, it becomes an array.
The address of the array is passed into the method. The property that accepts the address
($properties_array) actually points to the location of the array in memory. This is very efficient. If you
needed to pass 50 items into a method, you could pass them all one at a time with different properties
declared in the methods signature for each of these 50 items. However, instead, you can create an array
that holds the 50 items and pass the array. You are only passing one value using this approach, which is the
address of the array in memory. Also, as noted with this example, using an array allows you to be flexible in
the amount of items you want to pass into a method signature.
$name_error = $this->set_dog_name($properties_array[0]) == TRUE ? 'TRUE,' : 'FALSE,';
To copy an item from an array, you refer to the item using the array’s name ($properties_array) and
the position that the item exists in the array ([0]). Notice that you use [] brackets for declaring the position.
The position is commonly called the subscript. Arrays subscripts begin with position 0, not position 1.
class GetBreeds {
function __construct($properties_array)
{ //get_breeds constructor
if (!(method_exists('dog_container', 'create_object')))
{
exit;
}
}
You must adjust the get_breeds program. GetBreeds is now a class. You also create the signature of the
GetBreeds constructor to accept an array. However, as you can see from this code, you actually will ignore
anything that is passed into the array. This allows you to use the same method in dog_container to create
an object of either class (or actually of any class that accepts an array). All you need to find is the name of the
class (dog or GetBreeds) so you can make an instance of it.
function create_object($properties_array)
{
$dog_loc = $this->get_dog_application();
if(($dog_loc == FALSE) || (!file_exists($dog_loc)))
{
return FALSE;
}
The create_object method then calls the get_dog_application method and places the value returned
(the location of the file and file name) into $dog_loc. If the value in $dog_loc is FALSE or is not an existing
file, the method returns FALSE to the program that called it.
else
{
require_once($dog_loc);
$class_array = get_declared_classes();
$last_position = count($class_array) - 1;
140Chapter 4 ■ Secured User Interfaces
$class_name = $class_array[$last_position];
$dog_object = new $class_name($properties_array);
return $dog_object;
} } }
?>
If the path and file name are valid, the else portion of the code will execute. The value in $dog_loc is
used in the require_once statement (which pulls the contents of the file into this method).
You must now determine the name of the class that exists in the file (dependence injection requires you
to not only discover the file names and file path, but also the class names).
The PHP method get_declared_classes returns an array of all the classes that currently exist in the
program. The classes are in order from first to last. Thus, since you just included the file with a class (either
the dog or get_breeds class), you can hunt for the last entry in the array created. You have placed the array
created by get_declared_classes in $class_array. You can now determine the size of the array. The PHP
method count will return the size of an array. Remember the size of an array is the number of items in the
array not the last position. If an array has a size of ten, the actual subscripts are 0 through 9, not 1 through 10.
$last_position = count($class_array) - 1;
For more information on get_declared_classes, visit
http://php.net/manual/en/function.get-declared-classes.php
With this in mind, this statement determines the size of $class_array and then subtracts 1 from the
size and places that value in $last_position. Thus, if the array had a size of 10, the number 9 would be
stored in $last_position (since the array subscripts would be 0 through 9, not 10).
$class_name = $class_array[$last_position];
You can then use the value in $last_position to pull the last class created from the array and place
it into $class_name. As you can see, you can actually pass the property $last_position between the []
subscript brackets to indicate to the program you want the value of whatever is in the position located in
$last_position. This allows you to be able to pull the information from the last position in any size array
(since you have no idea of the size of the $class_array).
You can now create an instance of the class, because you have the class name in $class_name.
$dog_object = new $class_name($properties_array);
This line of code will now create an instance of any class (that accepts an array into the constructor) that
has just been included (require_once) in the program. The method will create an instance of either the dog
class or getBreeds class.
return $dog_object;
Finally, the object (which is either a dog object or a getBreeds object) is returned to the program that
called the method. By returning the object, the calling program has complete access to the object and its
properties and methods, even though it did not actually create the object (dog_interface can use the object
even though dog_container created it).
141Chapter 4 ■ Secured User Interfaces
The object’s location in memory is returned in a similar way as the array’s location was passed into the
constructor in the previous example. You can think of it as the new object is temporarily “contained” within
the dog_container object. However, the object is returned (to dog_interface).
Programming note—What? What really happens is that the address in memory of the
$dog_object is passed to the calling program (dog_interface). This allows the calling
program to have access to the object, along with the $dog_container object. Thus, there is only
one copy of the $dog_object in memory but two different program blocks can use it. If one of
the blocks (dog_container or dog_interface) closes, the other object still has access to it, until
it also closes. Then the garbage collector will remove the $dog_object from memory.
Example 4-12. The get_breeds class
<?php
class GetBreeds {
function __construct($properties_array)
{ //get_breeds constructor
if (!(method_exists('dog_container', 'create_object')))
{ exit;}}
private $result = "??";
public function get_select($dog_app)
{ if (($dog_app != FALSE) && ( file_exists($dog_app))) {
$breed_file = simplexml:load_file($dog_app);
$xmlText = $breed_file->asXML();
$this->result = "<select name='dog_breed' id='dog_breed'>";
$this->result = $this->result . "<option value='-1' selected>Select a dog breed</option>";
foreach ($breed_file->children() as $name => $value)
{
$this->result = $this->result . "<option value='$value'>$value</option>"; }
$this->result = $this->result . "</select>";
return $this->result;
} else {
return FALSE;
}
}
}
?>
As you can see from Example 4-12, only minor changes were needed. As mentioned, a class was
declared and a constructor was added. The constructor verifies that this class was created from a program
that contains both the dog_container and create_breed_app methods. This security attempts to keep
other programs from knowing that the file names and locations for the Dog application that reside in the
dog_application.xml file.
Example 4-13. The dog_interface.php file
<?php
function clean_input($value) {
$bad_chars = array( "{", "}", "(", ")", ";", ":", "<", ">", "/", "$" );
$value = str_ireplace($bad_chars,"",$value);
$value = htmlentities($value);
$value = strip_tags($value);
142Chapter 4 ■ Secured User Interfaces
if (get_magic_quotes_gpc())
{ $value = stripslashes($value); }
$value = htmlentities($value);
return $value;
}
function error_check_dog_app($lab) {
list($name_error, $breed_error, $color_error, $weight_error) = explode(',', $lab);
print $name_error == 'TRUE' ? 'Name update successful<br/>' : 'Name update not successful<br/>';
print $breed_error == 'TRUE' ? 'Breed update successful<br/>' : 'Breed update not successful<br/>';
print $color_error == 'TRUE' ? 'Color update successful<br/>' : 'Color update not successful<br/>';
print $weight_error == 'TRUE' ? 'Weight update successful<br/>' : 'Weight update not successful<br/>';
}
function get_dog_app_properties($lab) {
print "Your dog's name is " . $lab->get_dog_name() . "<br/>";
print "Your dog weights " . $lab->get_dog_weight() . " lbs. <br />";
print "Your dog's breed is " . $lab->get_dog_breed() . "<br />";
print "Your dog's color is " . $lab->get_dog_color() . "<br />";
}
//----------------Main Section-------------------------------------
if ( file_exists("dog_container.php"))
{ require_once("dog_container.php"); }
else { print "System Error #1"; exit; }
if (isset($_POST['dog_app']))
{
if ((isset($_POST['dog_name'])) && (isset($_POST['dog_breed'])) && (isset($_POST['dog_
color'])) && (isset($_POST['dog_weight'])))
{
$container = new dog_container(clean_input($_POST['dog_app']));
$dog_name = clean_input(filter_input(INPUT_POST, "dog_name"));
$dog_breed = clean_input($_POST['dog_breed']);
$dog_color = clean_input($_POST['dog_color']);
$dog_weight = clean_input($_POST['dog_weight']);
$properties_array = array($dog_name,$dog_breed,$dog_color,$dog_weight);
$lab = $container->create_object($properties_array);
if ($lab != FALSE) {
error_check_dog_app($lab);
get_dog_app_properties($lab); }
else { print "System Error #2"; }
}
else {
print "<p>Missing or invalid parameters. Please go back to the dog.html page to enter valid
information.<br />";
print "<a href='dog.html'>Dog Creation Page</a>";
}
}
else
{
$container = new dog_container("selectbox");
$lab = $container->create_breed_app();
143Chapter 4 ■ Secured User Interfaces
if ($lab != FALSE) {
$container = new dog_container("selectbox");
$properties_array = array("selectbox");
$lab = $container->create_object($properties_array);
if ($lab != FALSE) {
$container->set_app("breeds");
$dog_app = $container->get_dog_application();
$method_array = get_class_methods($dog_data);
$last_position = count($method_array) - 1;
$method_name = $method_array[$last_position];
$result = $dog_data->$method_name($dog_app);
if ( $result == FALSE) {
print "System Error #3"; //select box not created
}
else
{
print $result; //pass back select box
}
}
else
{
print "System Error #4";
}
}
?>
The dog_interface program is actually the lab.php program with code changes in the main section.
None of the methods from lab.php have changed.
if ( file_exists("dog_container.php"))
{ require_once("dog_container.php"); }
else { print "System Error #1"; exit; }
if (isset($_POST['dog_app']))
First the program determines if the dog_container exists by using the PHP file_exists method. If it
does, it pulls the code into the program using require_once. If dog_container does not exist, the program
prints an error message ("System Error #1") and then closes (exit;).
Next, the program uses isset to determine if a value for $dog_app has been provided by the calling
program. If this value has been passed, it is an indication that the calling program wants to create a Dog object.
$container = new dog_container(clean_input($_POST['dog_app']));
$dog_name = clean_input(filter_input(INPUT_POST, "dog_name"));
$dog_breed = clean_input($_POST['dog_breed']);
$dog_color = clean_input($_POST['dog_color']);
$dog_weight = clean_input($_POST['dog_weight']);
$properties_array = array($dog_name,$dog_breed,$dog_color,$dog_weight);
$lab = $container->create_object($properties_array);
if ($lab != FALSE)
{
error_check_dog_app($lab);
get_dog_app_properties($lab);
144Chapter 4 ■ Secured User Interfaces
} else {
print "System Error #2";
} else {
print "<p>Missing or invalid parameters. Please go back to the lab.html page to enter valid
information.<br />";
print "<a href='lab.html'>Dog Creation Page</a>";
} }
The program then creates an instance of dog_container ($container) that passes the value in $dog_app
into the $container object. Each of the properties of the Dog object are filtered using the clean_input
method. Then the properties are passed into the $properties_array array. The array is then passed
into the create_object method of the dog_container object ($container). If the Dog object ($lab) is
created successfully then the error_check_dog_app method is called to verify that each property has valid
information. The get_dog_app_properties method is called to display each property.
If any of the properties needed for the Dog object are missing, the user is requested to return to the
lab.html page to re-enter the required information.
else
{ //get breeds
$container = new dog_container("selectbox");
$properties_array = array("selectbox");
$lab = $container->create_object($properties_array);
if ($lab != FALSE)
{
$container->set_app("breeds");
$dog_app = $container->get_dog_application();
$method_array = get_class_methods($lab);
$last_position = count($method_array) - 1;
$method_name = $method_array[$last_position];
$result = $lab->$method_name($dog_app);
if ( $result == FALSE) // select box not created
{
print "System Error #3";
}
else
{
print $result; // select box created!
}
}
else
{
print "System Error #4";
}
If the $dog_app value is not passed in to the class, the else statement is executed. It is assumed that
the user wants to create a getBreeds object. An instance of the dog_container is created ($container) and
it passes the value selectbox. (If the object can’t be created, "System Error #4" will display). The words
“selectbox” are passed into the array $properties_array (Note: The array keyword must be used or you
would be creating a property not an array.) The container object ($container) will then call the create_object
(passing the $properties_array to create an instance of the getBreeds class ($lab). If the getBreeds object
is successfully created ($lab !=FALSE) you then need to find the location of the get_breeds.xml file (which
145Chapter 4 ■ Secured User Interfaces
contains the list of breeds). So you reset the app property (by calling set_app) in the container to “breeds”.
This tells the container program you are a getBreeds object, not a dog object. You then use the
get_dog_application method of the container to find the location of the breeds XML file.
For more information on arrays, visit
Examples: http://php.net/manual/en/function.array.php
Videos: https://www.thenewboston.com/videos.php?cat=11&video=17024
The PHP method get_class_methods is used to create an array of methods contained in getBreeds.
Since the get_select method is the only method (besides the constructor), it is also the last method in the
array. Its name is pulled from the array and then it is called using the property $method_name ($result =
$dog_data->$method_name($dog_app) ). This allows the getBreed class to be completely independent of the
dog_interface. The developer can change the name of the get_select method and everything would still
work (as long as it’s the last method in the class). This provides a complete split between the interface tier
and the business rules tier.
The location of the XML file is passed into the get_select method of the getBreeds object ($lab),
which uses the XML file for the data to create the select list box. The code for the select list box is dropped
into $result. If the code did get dropped into $result, the code is displayed (print $result) back into the
HTML form for the user to select a breed. If the file name was not valid, an error message (print "System
Error #3") will display instead of the select box.
The only other changes required are two slight changes to the lab.html and get_breeds.js files.
function AjaxRequest($value)
In the get_breed.js file, the function header for the AjaxRequest method has been changed to pass
the actual file being called (this was not a requirement of this design, but it allows this file to be used for any
program that is called via AJAX).
xmlHttp.open("GET", $value, true);
In addition, the open statement has been adjusted to use $value instead of a file name.
In the lab.html program, there are a couple of additional changes.
AjaxRequest('dog_interface.php');
The call to the JavaScript function now passes the file name, which has also been changed to the
dog_interface.php file.
<form method="post" action="dog_interface.php" onSubmit="return validate_input(this)">
Finally, the action tag (in both form tag locations) for the HTML form has been changed to call the
dog_interface.php program.
Notice that now, whenever you want to use the Dog application you call the interface first. Then the
interface determines what you want to accomplish (get the breeds select box or process the properties for
the dog you are creating).
You must communicate to all of your classes through the interface. The interface, in turn must create
any required objects by using the container (except, of course, for the container itself ). This follows the
concepts of tier design.
146Chapter 4 ■ Secured User Interfaces
You will not see any different output than previously seen (unless you have some system errors).
However, now you can easily change file names and locations (via the XML file) in the application without
changing any program code!
Do It
1.
Download the files for this section from the book’s web site. Change the file
names for the get_breeds.xml file, the get_breeds.php file, and the dog.php file.
Try to run the program via the lab.html file. The select box will not display and
the program will not run. Now go to the dog_applications.xml file and change
the data in the XML file to the new file names you just created. Go back to your
lab.html file (reload it). You should now see the select box. Fill in and select the
information and click the Submit button. The application should now work.
Chapter Terms
Validatevalidator Method
JavaScript Hide/ShowHTML onSubmit
Form ValidationJavaScript Alert Box
HTML Passing “Form”JavaScript Dot Notation
JavaScript if StatementsJavaScript length Method
&& AND|| OR
Regular ExpressionJavaScript match Method
Filter/Filteringisset
$_POSTstr_ireplace
Stripslasheshtmlentities
strip_tags$__SERVER
exitelse
HTML Select ListXML
XML Data formatXML Parent-Child
foreach LoopHTML Radio Buttons
private Functionstristr
Dependency Injectionfunction_exists
break Statementmethod Signature
getElementsByTagNamegetAttribute
arrayarray subscript
get_declared_classesCount
Size of an ArrayLast Position of an Array
array KeywordPassing Objects
get_class_methods
147Chapter 4 ■ Secured User Interfaces
Chapter Questions and Projects
Multiple Choice
1.
2.
3.
4.
5.
6.
148
When using form validation, which of the following is true?
a.The server automatically successfully processes input values with no errors.
b.A required field is checked to make sure it has content.
c.A dynamic web page is updated.
d.All information is sent to the server.
Which of the following can be verified with a validator?
a.E-mails
b.IP addresses
c.Integers
d.All of the above
Why must you validate your code?
a.To see if your browser can complete a task.
b.To make sure your information is correct and secure.
c.To make sure that your browser can run JavaScript and HTML5.
d.To verify that your computer can run the latest version of PHP.
The verification code in a PHP file does which of the following?
a.Compares the information received to an expected standard format
b.Verifies user program interaction
c.Checks and eradicates harmful data being entered by the user
d.Checks for incorrect PHP functions being used
stripslashes do which of the following?
a.Remove backslashes from quotes.
b.Convert HTML characters to their equivalent HTML entity.
c.Remove any PHP or HTML tags.
d.All of the above.
If the size of an array is 29, what is the subscript range?
a.1 through 30
b.1 through 29
c.0 through 29
d.None of the aboveChapter 4 ■ Secured User Interfaces
7.
8.
9.
10.
11.
12.
in_array does which of the following?
a.Searches for the number of empty spaces in an array.
b.Searches for the number of characters in an array.
c.Searches for a value in an array.
d.None of the above.
The PHP method count will return which of the following of an array?
a.last_position
b.subscript
c.size
d.None of these
Which method will produce a variable that you can use to refer to the last
position of the array?
a.$last_position=count($class_array) - 1;
b.$class_array=$last_position(count - 1);
c.$count=$last_position - 1($class_array);
d.$last_position=$class_array -1 (count);
The exit command does which of the following?
a.Automatically directs the user to a new page.
b.Closes the program if it is not called from the correct HTML page.
c.Turns off your computer.
d.None of the above.
What is not true in relation to the foreach command?
a.Works only with arrays and objects.
b.Used to parse through each key/value pair in an array.
c.Can be iterated by reference.
d.The equivalent to an if/then statement.
The break statement does which of the following?
a.Ends execution of the for, foreach, do-while, and/or switch structure(s).
b.Executes the for, foreach, do-while, and/or switch structure(s).
c.Ensures the execution of for, foreach, do-while, and/or switch
structure(s).
d.Breaks the for, foreach, do-while, and/or switch structure(s) before they
are executed.
149Chapter 4 ■ Secured User Interfaces
13.
14.
15.
Using the getAttribute will do which of the following?
a.Return the value of the attribute.
b.Print a list of data.
c.Load a new HTML page.
d.None of these.
Which function converts HTML tags into their entities versions?
a.strlen
b.htmlentities
c.explode
d.getAttribute
Which is a commonly used function to find the length of a string?
a.strlen
b.getLength
c.String concatenation
d.__toString
True/False
150
1.The count function returns the number of elements in an array.
2.When using an array, the index must not exceed the size of the array.
3.A subscript is the name given to position where the item currently exists in the
array and is usually contained in [].
4.A private function is an event in PHP to network for a job.
5.One purpose of exit is to end the program.
6.The getElementsByTagName searches for occurrences that correspond to a
specific XML tag.
7.get_declared_classes returns an array of all classes that currently exist in a
program in order from first to last.
8.Dependency injection allows the program client to enter a block of code to know
the implementation of the block of code it will be using.Chapter 4 ■ Secured User Interfaces
Short Answer/Essay
1.Why should you validate user input both within the interface tier and business
rules tier?
2.Why should input received in the business rules tier be filtered? What are the
different ways you can filter the information?
3.Explain how you can reduce errors from user input by the type of HTML objects
(such as radio buttons) used to accept information.
4.What causes the example code shown in the dependency injection section of this
chapter inefficient? How does this code help a developer with version changes to
the application?
Projects
1.Create an application that registers a runner for the local 5K road race. The
interface should accept all necessary personal information (name, address,
gender, age, and T-shirt size). Whenever possible, use HTML objects that restrict
input (such a select object for T-shirt size and state). Validate all information
in the interface tier using both HTML5 and JavaScript. If the information is
valid, pass the information to the business rules tier. The business rules tier will
validate the information received and filter out any harmful information. Once
all information has been accepted, the program will display the cost of entering
the race ($25). Any shirts over XL will add an additional charge of $2. Any runner
65 or older will be charged $5 less.
2.Develop the application described in #1 to use dependency injection to allow the
developer to change file name and locations without requiring code changes to
the application itself.
Term Project
1.
Update the Chapter 3 Term Project to validate all information as it is entered into
an HTML form (via HTML and JavaScript as shown in Chapter 4) in the interface
tier. After the information is validated it is passed to the business rules tier.
The business rules tier will validate the information received and filter out any
harmful information. Once the information is accepted (and stored in
the properties) the application will display all fields of the product stored in the
warehouse of the ABC Computer Parts Company. The interface tier and the
business rules tier must be separated using dependency injection (via an XML
file), as shown. Your completed project should use logic similar to the examples
shown in this chapter.
151Chapter 5
Handling and Logging Exceptions
“The education of a man is never completed until he dies.” —Robert E. Lee (As quoted in
Peter's Quotations: Ideas for Our Time (1977) by Laurence J. Peter, p. 175)
Chapter Objectives/Student Learning Outcomes
After completing this chapter, the student will be able to:
•Explain the difference between errors and exceptions
•Create a PHP program that can handle general exceptions
•Create a PHP program that can create, raise, and handle user exceptions
•Explain and use a switch and/or embedded if/else statement
•Create a PHP program that uses the while loop and/or for loop
•Create a program that reads/updates a text file using a two-dimensional array
•Create a PHP program that logs exceptions and e-mails support personnel
Handling Exceptions
As a programmer, you want to do everything possible to ensure that your program will not crash. Anyone
using your application will get a bad taste in their mouths if they have to deal with system crashes. You have
probably dealt with this situation too. As a user, you may have chosen one application over another because
of bad reviews. Once an application has been determined to be “buggy,” it’s difficult to convince customers
to use the product, even if newer versions have corrected some or all of the problems. An application must
be created to handle every possible unanticipated event.
A program must look at each scenario and decide if it can continue or if it must shut down. There will
always be a possibility that the application cannot continue to operate due to an unexpected event. Properly
developed programs will let the user know that there is a problem without the program crashing. Users are
more likely to understand when an application asks them to “try again later” (assuming the problem is fixed
before they return to the web site).
Electronic supplementary material The online version of this chapter (doi:10.1007/978-1-4842-1730-6_5)
contains supplementary material, which is available to authorized users.
© Steve Prettyman 2015
S. Prettyman, Learn PHP 7, DOI 10.1007/978-1-4842-1730-6_5
153Chapter 5 ■ Handling and Logging Exceptions
Errors are program events that are handled by the system that cause the program to shut down. In some
cases, the system can shut down the program and display an error message. Some errors immediately cause
the program to crash (such as the server itself crashing). Errors are usually events beyond the control of the
program and not directly caused by code (or lack of code) in the program. For example, insufficient memory
will cause application errors.
Exceptions are events that are not part of the normal flow of the program logic. All exceptions should be
handled by the program. Exceptions can be “raised” when the application anticipates a problem (a missing
file) or when the user does something out of the ordinary (tries to enter invalid information). The program
should “catch” all the exceptions. It can then examine the exception and determine if it can be corrected,
ignored, or if the application must shut down. If a program does not catch exceptions, the system will display
the exception message and then shut down the application.
PHP produces a mixture of errors and exceptions depending on the circumstances. Before PHP 5,
exception handling did not exist. Thus, some older PHP commands produced errors (which shut down the
program) instead of exceptions. In PHP 7 exception handling is the “rule”. PHP 7 Errors can be handled with
exception handling techniques. If exceptions are not handled with program code, the program will halt as if
it were a fatal error.
Any time an application is dependent on something external, it is probable that at some point that action
will not take place. For example, in the Dog application, the user is expected to enter the proper information.
The application must anticipate that not all users will enter correct information. The application is also
dependent on several files existing on server (dog_interface, dog_container, dog_applications, and
get_breeds). If any of these files are missing, the application cannot continue to function properly.
Most object-oriented programming languages use a standard format for handing exceptions. The
current version of PHP also uses this approach. As you explore PHP examples on the Internet, you will
discover existing PHP code that does not use this standard format. While this code will still execute in the
current version of PHP, it is recommend that the standard techniques be used. The standard approach uses
the try-catch block.
try {
// code that might cause an exception
}
catch(Exception $e) {
// code that executes if there is an exception
}
catch(Error $e) {
// PHP 7+ capture and handle errors
}
Any code that could cause an exception should be included in the try block. In addition, you may also
want to consider placing other conditions (such as math calculations) in the try block.
try {
$result = $firstNumber / $secondNumber;
}
catch(Exception $e) {
// code that executes if there is an exception
}
catch(Error $e) {
// PHP 7+ capture and handle errors
}
154Chapter 5 ■ Handling and Logging Exceptions
This example might produce an exceptiwon if $secondNumber contains a zero (dividing by zero). If the
exception occurs, the code would jump to the catch block. Any code in the block will then be executed.
The statement $e->getMessage(); will display any system message related to the exception (in this case a
message about the attempt to divide by zero). However, you do not have to use the system message; you can
use echo or print to display messages to the users.
try {
$result = $firstNumber /$secondNumber;
}
catch(Exception $e) {
echo "You entered zero for the second number. Your entry must be greater than zero";
}
However, there is a problem with these examples. If you were trying to catch more than one type of
exception in the try block, all exceptions would go into the one catch block. Any exception would display
the same message. There are a couple of different ways you can handle this.
One way is by throwing your own exception instead of having the system throw it.
try {
if ($secondNumber == 0)
{ throw new Exception("Zero Exception"); }
else { $result = $firstnumber / $secondnumber; }
// other code with exceptions }
catch(Exception $e) {
switch ($e->getMessage()) {
case "Zero Exception":
echo "The value of second number must be greater than zero";
break;
case "Some other exception":
echo "You did something else wrong";
break;
default:
echo $e->getMessage();
}
Programming note—In addition to getMessage method, the Exception and Error objects
include:
getCode()—Displays the code causing the exception
getFile()—Displays the file name containing code that threw the exception
getLine()—Displays the line number that threw the exception
getTrace() and getTraceAsString()—Displays backtrace (exception flow through the
program) information
In some circumstances it might be appropriate to display the Exception or Error message
to the users. However, the other methods should only be used for debugging or log entries.
Providing code information to the users is usually unnecessary and is a breach of security.
155Chapter 5 ■ Handling and Logging Exceptions
In this example, a switch statement was used in the catch block to look at all possible exception
messages. A switch statement accomplishes the same task as an embedded if statement. You could have
used:
If($e->getMessage == "Zero Exception")
{ echo "The value of second number must be greater than zero"; }
else if($e->getMessage == "Some other exception")
{ echo "You did something else wrong"; }
else
{ echo $e->getMessage(); }
For some, the switch statement is easier to understand when looking at multiple possible values for the
same property (variable) or the result of executing a method (as in this example). The default section of the
switch statement (or the last else statement in the embedded if statement) catches anything you did not
anticipate. In this example, you simply display the exception message for other exceptions.
As stated earlier, it’s very important that you handle all exceptions and errors. By including the default
code you are able to handle exceptions and errors you may have never anticipated. Notice that each case
section must include a break as the last statement. This keeps the code from following through into the next
case statement.
Catch(Exception $e) {
switch($e->getMessage()) {
case "Zero Exception":
echo "The value of second number must be greater than zero";
case "Some other exception":
echo "You did something else wrong";
break;
default:
echo $e->getMessage():
}
In this example, if the Zero Exception occurred, both of the messages ("The value of the second
number must be greater than zero" and "You did something else wrong") would be displayed. The
use of the switch statement is very common in catch blocks. However, as stated earlier, you can use the
embedded if statement if you prefer.
Another way you can handle multiple exceptions is to create your own exceptions, throw them, and
then catch them. You will need to create a class for your own exception.
class zeroException extends Exception {
public function errorMessage() {
$errorMessage = "Second Number cannot be " . $this->getMessage();
return $errorMessage;
}
}
try {
if ($secondNumber == 0)
{ throw new zeroException("Zero"); }
else
156Chapter 5 ■ Handling and Logging Exceptions
{ $result = $firstnumber / $secondnumber; }
// other code with exceptions }
catch(zeroException $e) {
echo $e->errorMessage();
}
catch(Exception $e) {
Echo $e->getMessage();
}
The zeroException class extends the class Exception. The extends keyword is used to inherit all of the
functionality of the Exception class. Inheritance is another key component of object-oriented programming
(along with encapsulation and polymorphism). A child class (like zeroException) can inherit all the
properties and methods of its parent class (Exception). The child class then can add methods (such as the
function errorMessage) specific to the class. Since zeroException inherited Exception, it is treated the
same as any other exception. The zeroException can be thrown (throw new zeroException("Zero")) and
it can be caught (catch(zeroException $e)).
Program note—Programmer-created exception classes inherit from Exception. Thus, all
the functionality of the Exception class is available from within any new exception class.
Class zeroException extends Exception { }
The previous code creates a valid new zeroException class with no new methods.
catch(zeroException $e) { echo $e->getMessage(); }
This catch block will be called by the new exception and display the exception message
generated by the Exception class.
For each exception or error class that is created and thrown, there must be a catch block to catch the
exception or error. In the example, there are two catch blocks; one catches the zeroException and the other
catches any other exceptions that might occur. Just like the previous example using a switch default or if
else statement, you should always have the last catch blocks handle any remaining exceptions or errors. If
the generic catch block is listed first, all exceptions would be caught by that block and not the specific block
for the exception.
As stated, the developer should make every attempt to keep the application from crashing. Errors,
however, are designed to display messages and shut down programs with an error code (what you consider
to be “crashing” the program). Before PHP 7, in some cases, you could override this functionality by creating
a method that will handle errors.
function errorHandler($severity, $message, $file, $line) {
throw new errorException($message, 0, $severity, $file, $line); }
set_error_handler('errorHandler');
// set_error_handler() doesn't work with all fatal errors, some can’t be thrown as Exceptions.
try { trigger_error( "User Error", E_USER_ERROR);
}
catch(errorException $e)
{ echo $e->getMessage(); }
catch(Exception $e)
{ echo $e->getMessage(); }
// Code placed here would execute after an error with this handler. It would not execute if
// there was not a handler.
157Chapter 5 ■ Handling and Logging Exceptions
In this example, the set_error_handler method redirects all errors (that can be redirected) to the
method errorHandler. When the method trigger_error causes E_USER_ERROR to occur, the handling of the
error is redirected to the errorHandler method. This method then gathers the information from the error
to throw an exception (errorException). The exception is captured by the catch(errorException $e)
method, which causes the message "User Error" to be displayed.
In PHP 7, the Error object captures potential system errors as exceptions.
try {
call_method(null); // no such method!
} catch (Error $e)
{ echo $e->getMessage; }
Previously, the call to a non-existent function would cause a fatal error. Using the EngineException
object allows the programmer to handle the error. The example shown previously (before PHP 7) would
only capture some errors; this new technique is designed to allow the programmer much more control over
errors. If this catch block is not included, any “error” would cause the program to crash with the "Fatal
error: Uncaught exception" message.
If you have PHP 7 installed, use the new Error object along with the Exception object to avoid fatal
errors whenever possible.
Security and performance—Usually the use of throwing and catching exceptions can reduce the
amount of code needed in a program. However, there is a trade-off. Several studies of different
object-oriented program languages have concluded that exception handling is less efficient
(performance) than using developer created routines. The developer should use exceptions
as true “exceptions” to the normal flow of the application. For more frequently occurring
situations, the developer should create situation handling routines in the application.
Figure 5-1. Data flow for the dog application
In the Dog application, the information flows between many different programs. Each of these programs
must be able to handle exceptions properly. However, message handling should all occur in the interface.
Any objects that are part of the business rules tier (dog_container, dog, and get_breeds) should pass any
exception messages to the interface to handle. At first this may sound like a complex and confusing task.
However, the hierarchy of exception handling will greatly simplify this task. As you are about to see, using
exception handling will reduce the amount of code necessary.
When exceptions are thrown, the environment will look in the program (or class) itself to determine if
there is a catch block that can handle the exception. If there is not a catch block, it will go up one level in
the hierarchy and check any calling program (or program that has made an instance of the class) for a catch
158Chapter 5 ■ Handling and Logging Exceptions
block. This process will continue until either a catch block has been discovered or it has been determined
that the environment itself must handle the exception.
Using this process, you can throw exceptions in the dog_container, dog, and get_breeds modules
without using catches. In the dog_interface, you can create a try block around calls to these files. Multiple
catch blocks (or one with a switch statement) could be created in the interface to handle the exceptions
from both the interface and all the other modules. This satisfies one of the requirements of three-tier
programming. The business rules tier (and data tier) pass messages to the interface tier. The interface tier
then determines how to handle those messages. It could display them to the users, place them in a log file
(which you will look at later in this chapter), or ignore them (if it does not adversely affect the operation of
the application).
Before you change the Dog application code, let’s look at an example of exceptions being handled by
the hierarchy.
Example 5-1. testerror.php with error and exception-producing methods
<?php
class testerror {
function produceerror() {
trigger_error( "User Error", E_USER_ERROR);
echo "This line will not display"; }
function throwexception() {
throw new userException("User Exception");
echo "This line will not display"; } }
?>
Example 5-2. The handleerror.php file captures error or exception
<?php
function errorHandler($severity, $message, $file, $line) {
throw new errorException($message, 0, $severity, $file, $line);
}
class userException extends Exception { }
Set_error_handler(‘errorHandler’);
try {
require_once(“testerror.php”);
$tester = new testerror();
$tester->produceerror();
echo “This line does not display”;
$tester->throwexception(); // will not execute if produceerror() is executed
echo “This line does not display”; }
catch (errorException $e ){
echo $e->getMessage(); }
catch (userException $e) {
echo $e->getMessage(); }
catch (Exception $e) {
echo $e->getMessage(); }
echo “This line will display”;
?>
159Chapter 5 ■ Handling and Logging Exceptions
The testerror class (in Example 5-1) includes a method to cause an error (produceerror) and a
method that throws an exception (throwexception). However, the class does not have try or catch blocks.
It does not have the ability to react to any exceptions or errors that might occur.
The handleerror program (in Example 5-2) includes a method that will handle user errors
(errorHandler), along with the set_error_handler command to redirect errors to this method. It also
includes a class (userException) that can react when the userException exception is thrown in the try
block. The require_once statement is included in the try block in an attempt to capture the error if the file
is missing. However, this happens to be a system error (not a user error) which cannot be redirected. To
capture system errors in PHP 7, the Error class must be used within a catch block as previously shown.
After the require_once statement, an instance of class testerror is created. If this class is missing, the
system will also error with a fatal message. The block calls the produceerror method, which causes a user
error. This error is redirected to the errorHandler, which throws an exception (errorException). The catch
block receives the exception and displays the error message. Since exceptions do not shut down the program
(like fatal errors), the flow of the program jumps to the first line after all the catch blocks and executes the
echo statement (echo "This line will display";). The reaction to the error will cause the program to skip
any remaining code in the try block. In this example, the throwexception method call would be ignored.
If the $tester->produceerror() line is commented out, the throwexception method call can take
place. The userException is thrown in the method. The userException class inherits the Exception class.
No special methods have been included in userException. The flow of the program will jump to the catch
block for userException. This block uses the Exception class getMessage method to display the message.
The logic then jumps to the first line of code after the catch blocks and executes the echo "This line will
display" statement.
Program note—try/catch can also include a finally block after all catch blocks. The
finally block will execute for all caught exceptions after the associated catch block has
executed. PHP allows the finally block to exist without any catch blocks (but the try block
must still exist). One of the most common uses of the finally block is to close files and/or
databases when an exception has occurred. A program should not close before files and
databases have been properly closed. If not closed properly, the data may become corrupt
and not be accessible.
Do It
1.
Go to the book’s web site and download the files for Examples 5-1 and 5-2.
Adjust the testerror program to only create an error. Create an additional
testexception program (with a testexception class) to throw an exception.
Now adjust the handleerror program to create an instance of both programs.
The handleerror program should now be able to handle errors or exceptions
from either program (class).
Exception and Error Handling vs. If/Else Conditions
A programmer can always choose to handle exceptions and errors using If/else conditional statements as
shown in the dog application files from Chapter 4. It is not any less efficient to handle errors in this way (it
might even be more efficient). However, as you are about to discover, the attitude of the code in the business
rules tier (and data tier) changes if you use exception handling. When you use if/else statements, the flow
of the program spends a lot of time being pessimistic by preparing for the worst (errors and/or exceptions).
In many cases, by using exception handling, the coding for most of the business rules tier (and data tier)
becomes optimistic including code which handles the normal operation of the program. The application
relies on the interface tier to handle any problems.
160Chapter 5 ■ Handling and Logging Exceptions
Example 5-3. The dog.class with exception handling
<?php
class Dog
{
// ------------------------------------ Properties -----------------------------------------
private $dog_weight = 0;
private $dog_breed = "no breed";
private $dog_color = "no color";
private $dog_name = "no name";
private $error_message = "??";
private $breedxml = "";
// ------------------------------------ Constructor ----------------------------------------
function __construct($properties_array)
{
if (method_exists('dog_container', 'create_object')) {
$this->breedxml = $properties_array[4];
$name_error = $this->set_dog_name($properties_array[0]) == TRUE ? 'TRUE,' : 'FALSE,';
$color_error = $this->set_dog_color($properties_array[2]) == TRUE ? 'TRUE,' : 'FALSE,';
$weight_error= $this->set_dog_weight($properties_array[3]) == TRUE ? 'TRUE' : 'FALSE';
$breed_error = $this->set_dog_breed($properties_array[1]) == TRUE ? 'TRUE,' : 'FALSE,';
$this->error_message = $name_error . $breed_error . $color_error . $weight_error;
if(stristr($this->error_message, 'FALSE'))
{
throw new setException($this->error_message);
}
}
else { exit; }
}
function set_dog_name($value) {
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 20) ? $this->dog_name = $value : $this->error_
message = FALSE;
return $this->error_message; }
function set_dog_weight($value) {
$error_message = TRUE;
(ctype_digit($value) && ($value > 0 && $value <= 120)) ? $this->dog_weight = $value :
$this->error_message = FALSE;
return $this->error_message; }
function set_dog_breed($value) {
$error_message = TRUE;
($this->validator_breed($value) === TRUE) ? $this->dog_breed = $value : $this->error_
message = FALSE;
return $this->error_message; }
function set_dog_color($value) {
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 15) ? $this->dog_color = $value : $this->error_
message = FALSE;
return $this->error_message; }
161Chapter 5 ■ Handling and Logging Exceptions
// ----------------------------------Get Methods--------------------------------------------
function get_dog_name() {
return $this->dog_name; }
function get_dog_weight() {
return $this->dog_weight; }
function get_dog_breed() {
return $this->dog_breed; }
function get_dog_color() {
return $this->dog_color; }
function get_properties() {
return "$this->dog_name,$this->dog_weight,$this->dog_breed,$this->dog_color."; }
// ----------------------------------General Method-----------------------------------------
private function validator_breed($value)
{
$breed_file = simplexml:load_file($this->breedxml);
$xmlText = $breed_file->asXML();
if(stristr($xmlText, $value) === FALSE)
{
return FALSE;
}
else
{
return TRUE;
}
}
}
?>
Comparing Example 4-8 to Example 5-3, you will notice only a couple of slight changes to the code.
The __toString method has been removed and replaced by an if statement that checks to see if FALSE
exists anywhere in the error_message string. If it does exist, a setException message is raised, passing
the error_message string to the exception handler. This causes a logical change in the flow of the overall
application. Instead of the dog_interface program (in Example 4-12) checking for user entry errors by
calling the __toString method, the Dog class notifies the dog_interface (via a thrown exception) when
user errors occur. Previously the interface had to pull the errors from the Dog class. In this example, the Dog
class pushes the errors to the interface class. As you will see, this will eliminate code from the dog_interface
program, since it no longer has to ask if there are any errors.
Security and performance—The __toString method “exposes” whatever it returns to any
program that makes an instance of the class in which it exists. Using this method to pass
error messages might allow a hacker to determine what incorrect information they are
sending into a program. In the dog.class example from Chapter 4, __toString passes back
the error_message string containing 'TRUE' or 'FALSE' responses. This is more secure than
returning error messages. However, by replacing the __toString method with throwing a
special exception, you provide even better security. Hackers must now not only know what
the error_message means, but they must also know the name of the exception (setException)
in order to capture it in their own programs.
162Chapter 5 ■ Handling and Logging Exceptions
Example 5-4. The getbreeds.class with exception handling
<?php
class GetBreeds {
function __construct($properties_array) {
if (!(method_exists('dog_container', 'create_object')))
{ exit; }
}
private $result = "??";
public function get_select($dog_app)
{
if (($dog_app != FALSE) && ( file_exists($dog_app)))
{
$breed_file = simplexml:load_file($dog_app);
$xmlText = $breed_file->asXML();
$this->result = "<select name='dog_breed' id='dog_breed'>";
$this->result = $this->result . "<option value='-1' selected>Select a dog
breed</option>";
foreach ($breed_file->children() as $name => $value)
{
$this->result = $this->result . "<option value='$value'>$value</option>";
}
$this->result = $this->result . "</select>";
return $this->result;
}
else
{
throw new Exception("Breed xml file missing or corrupt");
}
}
}
?>
Comparing the previous GetBreeds class (in Example 4-11) with Example 5-4 shows only one change.
It returns 'FALSE' and throws a general exception indicating that the breed.xml file is missing or corrupt.
Again, the GetBreeds class pushes any exceptions to the interface. The interface no longer has to determine
if there are any exceptions. Even though missing file errors cannot be redirected to be handled as exceptions,
the code uses file_exists to throw an exception if the file is missing.
Example 5-5. The dog_container.php file with exception handling
<?php
class dog_container
{
private $app;
private $dog_location;
function __construct($value) {
if (function_exists('clean_input')) {
$this->app = $value;
} else { exit; }
}
163Chapter 5 ■ Handling and Logging Exceptions
public function set_app($value) {
$this->app = $value; }
public function get_dog_application($search_value) {
$xmlDoc = new DOMDocument();
if ( file_exists("e5dog_applications.xml") ) {
$xmlDoc->load( 'e5dog_applications.xml' );
$searchNode = $xmlDoc->getElementsByTagName( "type" );
foreach( $searchNode as $searchNode ) {
$valueID = $searchNode->getAttribute('ID');
if($valueID == $search_value)
{
$xmlLocation = $searchNode->getElementsByTagName( "location" );
return $xmlLocation->item(0)->nodeValue;
break;
}
} }
throw new Exception("Dog applications xml file missing or corrupt"); }
function create_object($properties_array) {
$dog_loc = $this->get_dog_application($this->app);
if(($dog_loc == FALSE) || (!file_exists($dog_loc))) {
throw new Exception("File $dog_loc missing or corrupt."); }
else
{
require_once($dog_loc);
$class_array = get_declared_classes();
$last_position = count($class_array) - 1;
$class_name = $class_array[$last_position];
$dog_object = new $class_name($properties_array);
return $dog_object;
}
}
}
?>
The dog_container in Example 5-5 replaces returning 'FALSE' from Example 4-10 when the
dog_application.xml file, dog.class file, and/or the get_breeds file is missing. Instead, an exception is
thrown indicating which file is missing.
Example 5-6. The dog_interface.php file with exception handling
<?php
function clean_input($value)
{
$value = htmlentities($value);
$value = strip_tags($value);
if (get_magic_quotes_gpc())
{
$value = stripslashes($value);
}
$value = htmlentities($value);
$bad_chars = array( "{", "}", "(", ")", ";", ":", "<", ">", "/", "$" );
$value = str_ireplace($bad_chars,"",$value);
return $value;
}
164Chapter 5 ■ Handling and Logging Exceptions
class setException extends Exception {
public function errorMessage() {
list($name_error, $breed_error, $color_error, $weight_error) = explode(',',
$this->getMessage());
$name_error == 'TRUE' ? $eMessage = '' : $eMessage = 'Name update not successful<br/>';
$breed_error == 'TRUE' ? $eMessage .= '' : $eMessage .= 'Breed update not successful<br/>';
$color_error == 'TRUE' ? $eMessage .= '' : $eMessage .= 'Color update not successful<br/>';
$weight_error == 'TRUE' ? $eMessage .= '' : $eMessage .= 'Weight update not successful<br/>';
return $eMessage;
}
}
function get_dog_app_properties($lab)
{
print "Your dog's name is " . $lab->get_dog_name() . "<br/>";
print "Your dog weights " . $lab->get_dog_weight() . " lbs. <br />";
print "Your dog's breed is " . $lab->get_dog_breed() . "<br />";
print "Your dog's color is " . $lab->get_dog_color() . "<br />";
}
//----------------Main Section-------------------------------------
try {
if ( file_exists("e5dog_container.php"))
{
Require_once("e5dog_container.php"); }
else
{
throw new Exception("Dog container file missing or corrupt"); }
if (isset($_POST['dog_app'])) {
if ((isset($_POST['dog_name'])) && (isset($_POST['dog_breed'])) && (isset($_POST['dog_
color'])) && (isset($_POST['dog_weight'])))
{
$container = new dog_container(clean_input($_POST['dog_app']));
$dog_name = clean_input(filter_input(INPUT_POST, "dog_name"));
$dog_breed = clean_input($_POST['dog_breed']);
$dog_color = clean_input($_POST['dog_color']);
$dog_weight = clean_input($_POST['dog_weight']);
$breedxml = $container->get_dog_application("breeds");
$properties_array = array($dog_name,$dog_breed,$dog_color,
$dog_weight,$breedxml);
$lab = $container->create_object($properties_array);
print "Updates successful<br />";
get_dog_app_properties($lab); }
else {
print "<p>Missing or invalid parameters. Please go back to the lab.html page to
enter valid information.<br />";
print "<a href='dog.html'>Dog Creation Page</a>";
}
} else // select box {
$container = new dog_container("selectbox");
$properties_array = array("selectbox");
$lab = $container->create_object($properties_array);
$container->set_app("breeds");
$dog_app = $container->get_dog_application("breeds");
165Chapter 5 ■ Handling and Logging Exceptions
$result = $lab->get_select($dog_app);
print $result;
}
} // try
catch(setException $e)
{
echo $e->errorMessage();
}
catch(Exception $e)
{
echo $e->getMessage();
}
catch(Error $e) // PHP 7+ only
{
echo $e->getMessage();
}
?>
When comparing Example 4-12 to Example 5-6, the amount of code needed to handle exceptions is less
than using if/else conditional statements. The logical flow of the program is easier to follow with very few
else statements. This occurs because the exceptions thrown from all the files in this application are handled
by the catch blocks in dog_interface. The user errors are thrown to a special setException exception. The
system errors are captured by the Error catch block. The error_check_dog_app method (in Example 4-12)
has been replaced by the setException class. The code in the class is very similar to the code in the error_
check_dog_app. The display of individual update messages in the $eMessage string is removed, since this
class reacts to user errors, not successful updates. A general print line has been added in the main body of
the code to let the users know that all updates have been successful. The try block has been added around
all the code in this interface. This helps to capture any problems in any part of this application. Notice that
an exception is also thrown if the dog_container file cannot be found.
Only three catch blocks are required for this application. The setException catch block calls the
errorMessage method from the setException class, which determines what user errors have occurred. The
information is then displayed back to the user. The Exception catch block handles all other exceptions. It
currently displays this information to the user. However, the Exception and Error catch blocks are currently
providing the user too much information. It is a violation of security to inform the user what other problems
the application maybe experiencing. You should just tell them that the system is not currently available and
ask them to check back later. Displaying detailed errors is okay when you’re testing. However, it’s not good
for the real world. You will resolve this breach of security in the next section.
For more information on exception handling, visit
Examples: http://www.w3schools.com/php/php_exception.asp
Video: https://www.thenewboston.com/videos.php?cat=11&video=17171
166Chapter 5 ■ Handling and Logging Exceptions
Do It
1.
Examine the code from this section. Are there any areas in which error checking
could have been converted to exception handling? Go to the book’s web site and
download the code for this section. Make the potential changes to the existing
code to use additional exception handling.
Logging Exceptions
Applications must have an ability to notify systems analysts when problems occur. However, specific
messages about errors should not be displayed to the user of the application. The user should be notified
that the system is not currently operational. The systems analyst should be notified of the specific problem
that has occurred.
The easiest way to provide this ability is to place error messages into a log file. PHP applications can log
messages into the default PHP error file or in an application specific file. The php.ini file can be edited (see
Chapter 1 for location) to specify the location and name of the default error log file. Once the php.ini file is
open in an editor, search for error_log. If a semicolon is located at the beginning of the line, the location has
been commented out. Just remove the semicolon and specify a location, such as:
error_log = c:/temp/php_errors.log
-or-
error_log = http://www.asite.com/temp/php_errors.log
When writing to the default error log, PHP will insert a timestamp along with the error message that you
submit. Your default time zone may not be set correctly in the php.ini file. Search for date.timezone. The
valid time zone settings for the continental United States are:
date.timezone = "America/New_York"
date.timezone = "America/Chicago"
date.timezone = "America/Los_Angeles"
For all other American time zones visit: http://www.php.net/manual/en/timezones.america.php
For worldwide time zones visit: http://php.net/manual/en/timezones.php
The Apache httpd config file (see Chapter 1 for location) can override the settings in the php.ini file.
You should also open this file and search for date.timezone. Replace the existing line with a format similar
to the following.
php_value date.timezone "America/New_York"
Once you have updated and saved the php.ini and/or apache.httpd files, you must reload your
Apache server for the changes to take place (see Chapter 1).
■■Note
The time zone can also be set with program code. PHP 7 does not support the datefmt_set_
timezone_id method. The datefmt_set_timezone method can be used for PHP 5.2+. For more information on
setting the time zone with program code, visit http://php.net/manual/en/datetime.settimezone.php.
167Chapter 5 ■ Handling and Logging Exceptions
<?php
error_log("error message");
?>
Enter this code and save it in a test file. Test it in your environment. If your settings are correct, PHP
will create the error log at the location specified in the error_log parameter. Don’t create the file yourself.
PHP will not log information to a log file that it did not create. The format of the message sent to your log file
should be similar to the following:
[25-Jun-2015 17:01:12 America/New_York] error message
With only the simple one line of code, PHP created the text-based file in the location specified and
placed the message in the file.
If you do not have access to these files, you can specify a specific location in the PHP application to
send your messages. This ability also allows you to set up multiple application log files. It is common for an
application to have informational log files, authentication (login) log files, error log files, and security log
files. By separating each type of message, it’s easier to scan for a specific type of message in a log file.
Let’s assume you want to log user errors in one file and other errors in a different file.
<?php
const USER_ERROR_LOG = 'User_Errors.log';
const ERROR_LOG = 'Errors.log';
// sending a user error
error_log("A user error",3,USER_ERROR_LOG);
// sending all other errors
error_log("A general error",3,ERROR_LOG);
<?php
This code will use the constants (USER_ERROR_LOG and ERROR_LOG) to direct the error messages to
the correct location. Notice that a second parameter of 3 is used to let the error_log method know that
a different location will be used to log the error. A standard format should be used for sending messages
to your log(s). The format should include the time/date (if not already included by the environment as
mentioned previously), the type of message (if there is more than one message type in the file), the error
message, and any other pertinent information. By default, the message size is limited to 120 characters.
However this can be changed in the php.ini file.
$date = date('m.d.Y h:i:s');
// For more info on data time format go to: http://php.net/manual/en/function.date.php
$errormessage = "This is the error";
$eMessage = $date . " | User Error | " . $errormessage . "\n";
error_log($eMessage,3,USER_ERROR_LOG);
The above code would produce
06.06.2015 03:00:55 | User Error | This is the error
A standard text editor (Notepad++ or Notepad) or log-monitoring software (you will create a log reader
program later in this chapter) can be used to view the contents of the file.
168Chapter 5 ■ Handling and Logging Exceptions
The system will limit the size of the log file(s). However, assuming that there is not too much logging per
day, the application can create logs that are specific for each day.
$USER_ERROR_LOG = "User_Errors" . date('mdy') . ".log";
$ERROR_LOG = "Errors" . date('mdy') . ".log";
...
error_log($eMessage,3,$USER_ERROR_LOG);
Security and performance—The location of the log files should reside in a different folder
than the application. The folder will need to allow write access for the application.
However, it should be secured from read access or write access outside the server itself.
Only authorized personnel should have access to the logs.
Note that the constants (USER_ERROR_LOG and ERROR_LOG) must be changed to variables due to the date
method creating a possible variable output (different dates). The format would create a file name similar to
User_Errors06062015.log or Errors06062015.log.
PHP also makes it very easy to send an e-mail alert when something has been written to a log file. The
webserver must include an e-mail server. Your local machine may not have this capability. However, usually,
a web host provider (that has PHP capability) includes an e-mail service. To use this ability, you can add an
error_log statement:
error_log("Date/Time: $date - Serious System Problems with Dog Application. Check error log
for details", 1, "noone@helpme.com", "Subject: Dog Application Error \nFrom: System Log
<systemlog@helpme.com>" . "\r\n");
Security and performance – While it is tempting to inform the associate receiving the e-mail
message of the exact problem that has occurred in the application, do not. By default,
e-mail is not encrypted. Sending an unencrypted e-mail with detailed information about
your application is inviting hackers to corrupt your application. You should, however,
provide enough information in the message (such as a date/time stamp and maybe an
error number) to help the associate locate the error message(s) in the log file(s).
The first parameter specifies the message of the e-mail. The second parameter informs error_log to
e-mail this information. The third parameter provides the “To” e-mail address. The fourth parameter is an
extra header field. This field is commonly used to include the subject of the e-mail and the e-mail address
that sent the message. The “From” address must be included or the message will not be sent. The “From”
address does not, however, need to be an existing address.
For more information on logging errors, visit
Examples: http://php.net/manual/en/function.error-log.php
Examples: http://www.w3schools.com/php/php_error.asp
In the Dog application, you can provide the ability to log exceptions and e-mail major errors by adjusting
the catch blocks of the dog_interface (from Example 5-6).
169Chapter 5 ■ Handling and Logging Exceptions
Example 5-7. The dog_inteface.php file with exception logging and e-mail
<?php
const USER_ERROR_LOG = "User_Errors.log";
const ERROR_LOG = "Errors.log";
function clean_input($value)
{
$value = htmlentities($value);
// Removes any html from the string and turns it into &lt; format
$value = strip_tags($value);
if (get_magic_quotes_gpc())
{
$value = stripslashes($value);
// Gets rid of unwanted slashes
}
$value = htmlentities($value);
// Removes any html from the string
and turns it into &lt; format
$bad_chars = array( "{", "}", "(", ")", ";", ":", "<", ">", "/", "$" );
$value = str_ireplace($bad_chars,"",$value);
return $value;
}
class setException extends Exception {
public function errorMessage() {
list($name_error, $breed_error, $color_error, $weight_error) = explode(',', $this-
>getMessage());
$name_error == 'TRUE' ? $eMessage = '' : $eMessage = 'Name update not successful<br/>';
$breed_error == 'TRUE' ? $eMessage .= '' : $eMessage .= 'Breed update not successful<br/>';
$color_error == 'TRUE' ? $eMessage .= '' : $eMessage .= 'Color update not successful<br/>';
$weight_error == 'TRUE' ? $eMessage .= '' : $eMessage .= 'Weight update not successful<br/>';
return $eMessage;
} }
}
function get_dog_app_properties($lab)
{
print "Your dog's name is " . $lab->get_dog_name() . "<br/>";
print "Your dog weights " . $lab->get_dog_weight() . " lbs. <br />";
print "Your dog's breed is " . $lab->get_dog_breed() . "<br />";
print "Your dog's color is " . $lab->get_dog_color() . "<br />";
}
//----------------Main Section-------------------------------------
try {
if ( file_exists("e5dog_container.php"))
{
Require_once("e5dog_container.php");
}
else
170Chapter 5 ■ Handling and Logging Exceptions
{
throw new Exception("Dog container file missing or corrupt");
}
if (isset($_POST['dog_app']))
{
if ((isset($_POST['dog_name'])) && (isset($_POST['dog_breed'])) &&
(isset($_POST['dog_color'])) && (isset($_POST['dog_weight'])))
{
$container = new dog_container(clean_input($_POST['dog_app']));
$dog_name = clean_input(filter_input(INPUT_POST, "dog_name"));
$dog_breed = clean_input($_POST['dog_breed']);
$dog_color = clean_input($_POST['dog_color']);
$dog_weight = clean_input($_POST['dog_weight']);
$breedxml = $container->get_dog_application("breeds");
$properties_array = array($dog_name,$dog_breed,$dog_color,
$dog_weight,$breedxml);
$lab = $container->create_object($properties_array);
print "Updates successful<br />";
get_dog_app_properties($lab);
}
else
{
print "<p>Missing or invalid parameters. Please go back to the dog.html page
to enter valid information.<br />";
print "<a href='dog.html'>Dog Creation Page</a>";
}
}
else // select box
{
$container = new dog_container("selectbox");
$properties_array = array("selectbox");
$lab = $container->create_object($properties_array);
$container->set_app("breeds");
$dog_app = $container->get_dog_application("breeds");
171Chapter 5 ■ Handling and Logging Exceptions
$result = $lab->get_select($dog_app);
print $result;
}
}
catch(setException $e)
{
echo $e->errorMessage(); // displays to the user
$date = date('m.d.Y h:i:s');
$errormessage = $e->errorMessage();
$eMessage = $date . " | User Error | " . $errormessage . "\n";
error_log($eMessage,3,USER_ERROR_LOG); // writes message to user error log file
}
catch(Exception $e)
{
echo "The system is currently unavailable. Please try again later.";
// displays message to the user
$date = date('m.d.Y h:i:s');
$errormessage = $e->getMessage();
$eMessage = $date . " | User Error | " . $errormessage . "\n";
error_log($eMessage,3,ERROR_LOG); // writes message to error log file
error_log("Date/Time: $date - Serious System Problems with Dog Application.
Check error log for details", 1, "noone@helpme.com", "Subject: Dog Application Error \nFrom:
System Log <systemlog@helpme.com>" . "\r\n");
// e-mails personnel to alert them of a system problem
}
catch (Error $e)
{
echo "The system is currently unavailable. Please try again later.";
// displays message to the user
$date = date('m.d.Y h:i:s');
$errormessage = $e->getMessage();
$eMessage = $date . " | Fatal System Error | " . $errormessage . "\n";
error_log($eMessage,3,ERROR_LOG); // writes message to error log file
error_log("Date/Time: $date - Serious System Problems with Dog Application.
Check error log for details", 1, "noone@helpme.com", "Subject: Dog Application Error \nFrom:
System Log <systemlog@helpme.com>" . "\r\n");
// e-mails personnel to alert them of a system problem
}
172Chapter 5 ■ Handling and Logging Exceptions
At the top of the Example 5-7 code, the constants USER_ERROR_LOG and ERROR_LOG have been created to
pinpoint the name and location of the log files. Locating constants that might be subject to change (such as a
tax rate) at the top of the code provides easy access for quick changes by a programmer who is charged with
supporting the application. As stated previously, the location of the log file must be in a folder that allows
application write access. It is recommended that log files be centrally located in a common folder, with other
log files, for easy access by data center personnel (or systems analysts).
The other code changes are located in the catch blocks. The setException catch block returns the
error message generated by the setException class to the users. This message lets the users know what
properties (Name, Breed, Color, and Weight) were not updated. Errors that caused this exception could have
come from the user, or by corruption when the information was transmitted from the client machine to the
server. These messages only provides information about the requirements of the properties, which the user
already should have known. The catch block also writes a similar message to the user error log. A user error
is not an urgent error that needs to be addressed by the analyst. However, tracking trends of user problems
can provide an indication of possible changes needed to ensure the user has the best experience possible
with the application.
The Exception and Error catch blocks captures all non-user generated exceptions. The messages
caused by these exceptions might reveal information that would break the security of the application.
Therefore a generic message (such as "The system is currently unavailable. Please try again
later.") should be displayed to the user. Detailed information about the exception (error message, file
location, coding line that raised the exception) should be placed in the error log for further analysis. Most
exceptions caught by these catch blocks will keep the application from running. Therefore, it is important
that personnel be informed of the problems occurring. This catch blocks are a good location to send an
e-mail to the support personnel to alert them of any problems.
Now that you have built-in exception handling and error handling into the program, you could edit the
php.ini file to turn off error reporting to the user. However, you should wait to do this until all development
and testing has been completed. Locate the line "display_errors = On" in the php.ini file. If you change
this setting to "display_errors = Off", most error messages will not be displayed to the user. This change
will not affect any messages sent back by the program to the user via the echo or print methods (including
in any catch blocks). This change will give the developer greater control over the type of messages displayed
to the users when there are system problems.
Do It
1.
Download the code for this section. Create or use an existing HTML page
that does not check for user input errors. Run the program entering values for
the name, breed, weight, and color, which should cause user errors. Stop the
program and open the contents of the user error log file. Did the errors appear in
the file? If not, check the security of the folder that contains the log file to make
sure that it allows write access to the log file. Once you are satisfied that it has
caught user errors, try to cause other system errors to occur. Hint: Change the
file names to nonexistent names in the dog application XML file. Check the error
log to determine if the errors have been written to the file. Were you able to cause
any errors that are not captured by one of the log files? If so, is there a way to
capture those errors?
173Chapter 5 ■ Handling and Logging Exceptions
Reading Log and Text Files
In the previous section, you discovered that the error_log method writes to a log file using just one line of
code. It creates the log file if it does not exist. It appends (adds to the end of the file) any message passed to
the contents of the file. It then closes the file. If you were to create your own logging process, it would take
several lines of code.
$logFile = fopen("error_log.log", "a");
$eMessage = $e->getMessage();
fwrite($logFile, $eMessage);
fclose($logFile);
The fopen method will also create the file if it does not already exist. The “a” parameter indicates that
anything written to the file should be appended. “w” would indicate that any contents in the file would
be lost (written over). The fwrite method will then place the string located in the second parameter
($eMessage) into the file indicated by the first parameter ($logFile). $logFile is a pointer that points to the
location of the text file. The fclose method closes the text file.
For more information on writing to text files, visit
Examples: visit w3schools at: http://www.w3schools.com/php/php_file_create.asp
Video: visit “The New Boston” at https://www.thenewboston.com/videos.php?cat=11&video=17063
Since a log file is a text-based file, you can use similar logic to create your own application to open a log
file and read its contents.
$logFile = fopen("error_log.log", "r");
echo fgets($logFile);
fclose($logFile);
This code will open the log file and read the first line (via a fgets method) in the file and close the file.
However, it is likely that there is more than one line in the file. You must be able to loop through and display
each line in the file. You can do this using the while loop shown here.
$logFile = fopen("error_log.log", "r");
while(!feof($logFile))
{
echo fgets($logFile) . "<br>";
}
fclose($logFile);
The while loop will continue to loop as long as the conditional statement is TRUE. Once the statement is
FALSE, the code will exit the loop and jump to the next line of code after the end of the loop. In this example
the error_log file is open for read only (“r”). The while loop looks at the end of file indicator (feof) of the
log file to determine if it has reached the end of the file. If feof returns TRUE, the end of the file has been
reached. The loop must continue while you have not reached the end of the file. To cause the conditional
statement to produce a TRUE, while there are still records to be read, you must reverse the logic and have
feof produce TRUE if there are records and FALSE if there are not records. You can do this by using the !
operator. The ! operator is a NOT operator and it reverses the result. A NOT TRUE is FALSE or a NOT FALSE is
174Chapter 5 ■ Handling and Logging Exceptions
TRUE. Thus, !feof operator will now produce TRUE when there are more records and FALSE when there are
no more records. The loop in combination with the fgets method will display each record in the file. Once
each record is displayed, it will close the file using fclose.
For more information on reading text files,
Visit w3schools for examples:
http://www.w3schools.com/php/php_file_open.asp
Visit “The New Boston” for videos:
https://www.thenewboston.com/videos.php?cat=11&video=17064
For more information on the while loop:
Visit w3schools for examples:
http://www.w3schools.com/php/php_looping.asp
Visit “The New Boston” for videos:
https://www.thenewboston.com/videos.php?cat=11&video=17011
The output produced by the previous example is pretty plain.
06.06.2015 03:00:55 | User Error | This is the error
This is not providing you any better viewing than just opening the log file in a text editor. You can use
a combination of an HTML table, the explode method, and arrays to produce a much better output. You
can place each line from the log file into a two-dimensional array using the explode method. The two-
dimensional array will have rows and columns just like the HTML table.
$dogs = array
(
array("Sammy","Lab",18,"Yellow"),
array("Spot","Mixed",14,"Mixed"),
array("Princess","Chihuahua",4,"White"),
array("Max","Boxer",35,"Brown")
);
Two-dimensional arrays are a collection of rows of information. Each row has common information in
each position (column). In the previous example, all dog names are in position 0, dog breeds are in position
1, dog weights are in position 2, and dog colors are in position 3. This associates directly with the positions
in a table.
For more information on the multi-dimensional arrays, visit:
examples: http://www.w3schools.com/php/php_arrays_multi.asp
videos: https://www.thenewboston.com/videos.php?cat=11&video=17026
SammyLab18Yellow
SpotMixed14Mixed
PrincessChihuahua4White
MaxBoxer35Brown
175Chapter 5 ■ Handling and Logging Exceptions
Each position in the table and the two-dimensional array is referred to by the column and row. In this
table, Sammy is in position (0,0). Yellow is in position (0,3). Max is in position (3,0). Brown in in position
(3,3). The first position is the column. The second position is the row. In PHP, [] are used to define the
position (subscript) for an array.
echo $dogs[0][0] // displays Sammy
echo $dogs[0][3] // displays Yellow
echo $dogs[3][0] // displays Max
echo $dogs[3][3] // displays Brown
You can now adjust the loop to place the log contents in a two-dimensional array. However, you will not
know the size of the array. So you can’t use the format previously shown. This might cause developers to get
a major migraine if they were not using PHP. PHP, however, allows you to dynamically create the array, just
like it allows you to create variables (properties) whenever you need them.
$logFile = fopen("error_log.log", "r");
$row_Count = 0;
while(!feof($logFile))
{
print_r ($error_Array[$row_Count] = explode(' | ', fgets($logFile)));
$row_Count++;
}
fclose($logFile);
In the loop in this example, the explode method breaks the incoming line from the text file via the |
character (actually a space, |, and a space). It places each separated string into the $error_Array at the row
indicated by the value in $row_Count. The first time through the loop, the first line of the log file is placed
in $error_Array[0] (the first row of the array). Because the explode command separated the string, this
causes columns to be created for each piece.
If the first line of the file contained:
A general error | stuff | more stuff
then the first row of the array would contain:
$error_Array[0][0] = "A general error"
$error_Array[0][1] = "stuff";
$error_Array[0][2] = "more stuff";
You can verify this by using the print_r command shown in the example. print_r displays the contents
of an array in the following format.
Array ( [0] => A general error [1] => stuff [2] => more stuff )
This format verifies that each piece of the string has been placed into the proper position in the array.
$row_count is incremented by 1 before the loop continues. This positions the next line of the file to be
placed into the next position in the array ($error_Array[1], if it is the second line of the file). You, of course,
don’t want to use print_r to display the results to the users (it’s not very pretty).
However, it is a great tool to help you make sure the program is placing everything properly in the array.
You can add code to the loop to build a table.
176Chapter 5 ■ Handling and Logging Exceptions
$logFile = fopen("Errors.log", "r");
$row_Count = 0;
echo "<table>";
while(!feof($logFile))
{
echo "<tr>";
$error_Array[$row_Count] = explode(' | ', fgets($logFile));
$displayString = "";
for($I=0; $I < 3; $I++)
{
echo "<td> " . $error_Array[$row_Count][$I] . " </td> ";
}
echo "</tr>";
$row_Count++;
}
echo "</table>";
fclose($logFile);
An echo statement is located just before the while loop to open the HTML table. An additional echo
statement (echo "<tr>") exists just inside the while loop to create a row of the table.
For more information on the for loop, visit:
Examples: http://www.w3schools.com/php/php_looping_for.asp
Videos: https://www.thenewboston.com/videos.php?cat=11&video=17013
Also in the while loop, a for loop has been created to loop through each of the columns of the row.
Since you know that there are four columns, the for loop is a good choice. The for loop is used when you
know exactly how many times to loop. The first parameter (before the ;) of the for loop initializes the
counting variable ($I=0). This variable ($I) is used to count each loop. The second parameter ($I < 3)
includes the comparison to determine if the logical flow will stay in the loop. If the comparison is TRUE,
the loop will continue. If it is FALSE, the logical flow jumps to the first statement after the loop (echo "</tr>").
The third parameter ($I++) can increment or decrement the counting variable. The for loop helps the
programmer to remember to initialize the variable, check the condition, and increment the variable by
requiring all the information in one code line.
The echo statement in the for loop uses the $row_Count and $I variables to pull the information from
each column in the current row. The first time in the loop, $row_Count will be 0. The echo statement will
display the contents of $errorArray[0][0]. As the for loop continues, the contents of $errorArray[0][1],
$errorArray[0][2], and $errorArray[0][3] will be displayed. Each value is placed into a cell in the table
using the <td> and </td> tags. Once the for loop completes, the flow drops below the loop and closes the row
(echo </tr>). Then the row_Count variable is incremented. If there are more rows (more records in the file),
the while loop will continue the process with the next row, until there are no more records in the file. Once
the flow jumps out of the while loop, the table is closed (echo "</table>"). Then the file is closed.
Text (log) files are sequential files. As items are added (appended), they are added to the bottom of the
list. You may want to sort the information, listing the most current first. This can be accomplished with just a
slight change to the code.
177Chapter 5 ■ Handling and Logging Exceptions
$logFile = fopen("Errors.log", "r");
$row_Count = 0;
while(!feof($logFile))
{
$error_Array[$row_Count] = explode(' | ', fgets($logFile));
$row_Count++;
}
$row_Count--;
fclose($logFile);
echo "<table>";
for ($J=$row_Count; $J >= 0; $J--)
{
echo "<tr>";
$displayString = "";
for($I=0; $I < 3; $I++)
{
echo "<td> " . $error_Array[$J][$I] . " </td> ";
}
echo "</tr>";
}
echo "</table>";
The while loop now loads the array with the records and keeps a count of the number of items in the
array. After the loop ends and the file has been closed, a for loop works through the array in reverse order
to echo out the rows in the table. The counter variable $J begins with the total number of rows in the array
($row_Count). One is subtracted from $row_Count before the loop because it is incremented in the while
loop after the last record has been retrieved, which makes the count one too many. $J is then decremented
($J--) for each loop until the value is less than zero. The internal for loop (for($I=0;$I<3;$I++)) has not
changed, as it must still loop through each column of the rows to display the information.
By loading the records into an array, you can modify them if needed. Let’s assume that you want to
be able to delete a record from the log. As long as you know the row number that is to be deleted you can
remove that record from the array. Then you can repopulate the file with the remaining records.
First you will make a slight change to the echo code you have completed to include a link next to the
record to be deleted. You then will add a delete method, move the display code to a display method (so it
can be called whenever needed), and create a save changes method to update the log file.
Example 5-8. The readerrorlog.php file
<?php
function deleteRecord($recordNumber, &$row_Count, &$error_Array) {
for ($J=$recordNumber; $J < $row_Count - 1; $J++) {
for($I=0; $I < 3; $I++)
{ $error_Array[$J][$I] = $error_Array[$J + 1][$I]; }
}
Unset($error_Array[$row_Count]);
$row_Count--;
}
function saveChanges($row_Count,$error_Array,$log_File) {
$logFile = fopen($log_File, "w");
178Chapter 5 ■ Handling and Logging Exceptions
for($I=0; $I < $row_Count; $I++) {
$writeString = $error_Array[$I][0] . " | " . $error_Array[$I][1] . " | " .
$error_Array[$I][2];
fwrite($logFile, $writeString);
}
fclose($logFile);
}
function displayRecords($row_Count, $error_Array) {
echo "<html><head>";
echo "<style> table { border: 2px solid #5c744d;} </style>";
echo "</head><body><table>";
echo "<caption>Log File: " . ERROR_LOG . "</caption>";
echo "<tr><th></th><th>Date/Time</th><th>Error Type</th><th>Error Message</th></tr><tr>";
for ($J=$row_Count; $J >= 0; $J--) {
echo "<td><a href='readlogfilea.php?rn=$J'>Delete</a></td>";
for($I=0; $I < 3; $I++) {
echo "<td> " . $error_Array[$J][$I] . " </td> ";
}
echo "</tr>";
}
echo "</table>";
echo "</body></html>";
} // main section
const ERROR_LOG = "Errors.log";
$logFile = fopen(ERROR_LOG, "r");
$row_Count = 0;
while(!feof($logFile))
{
$error_Array[$row_Count] = explode(' | ', fgets($logFile));
$row_Count++;
}
fclose($logFile);
if(isset($_GET['rn']))
{
deleteRecord($_GET['rn'], $row_Count, $error_Array);
saveChanges($row_Count,$error_Array,ERROR_LOG);
}
displayRecords($row_Count,$error_Array);
?>
179Chapter 5 ■ Handling and Logging Exceptions
Figure 5-2. The readerrorlog.php file with user errors
In Example 5-8, the displayRecords method contains most of the same code previously shown. Extra
CSS code has been added to make the display a little more professional. Also, an HTML href link has been
included with each record displayed. The link recalls the program, passing the record number that the user
wants to delete.
The set of code in the “main section” (the first lines of code that execute) creates a constant ERROR_LOG
to define the location and name of the log file. The file is opened and loaded into the array in the same
manner as shown previously.
Once the array is loaded, the program checks to see if it has been called by one of the delete links for
each record. If a value has been passed via HTTP GET, the program then calls the deleteRecord method.
Once the deleteRecord method is complete, the program calls the saveChanges method. Whether or not a value
has been passed into the program, it executes the last statement, which calls the displayRecords method.
Program
note—The header line of the deleteRecords method (function
deleteRecord($recordNumber, &$row_Count, &$error_Array)) uses by reference, instead of
by value, to allow $row_Count and $error_Array to be updated in the method. By default,
parameters passed into a method cannot be changed by the method (by value). The &
indicates that the parameter is passed by reference. This allows the value to be changed.
deleteRecords can adjust the count of the number of rows in the array ($row_Count) and the
information in the array itself ($error_Array).
By value passes the contents (data) that is contained in the parameter into the method. By
reference passes the memory address of the parameter into the method, which allows the
method to change the value of the parameter in memory.
The deleteRecords method accepts the record number to be deleted as one of its parameters. Any
position in the array above this record number is unchanged. Any position below this record must be shifted
up one position. For example, if an array has ten positions (0-9) and the fifth position (4) is to be deleted,
then positions 5-9 must now become positions 4-8.
In the following example, position $J+1 is placed into position J for any record after the $recordNumber
to be deleted:
180Chapter 5 ■ Handling and Logging Exceptions
The last position in the array is no longer needed. The last position of the array is released (using
unset). This will inform the operating system that the space is memory is no longer needed. The operating
system will call its garbage collector to free up the memory location. We will discover an easier way
to accomplish this task when we discuss associative arrays in a later chapter. Once the array has been
reconfigured, the saveChanges method is called to replace the records in the log file. The code shown is very
similar to previous examples in this chapter, with one exception. The fopen method uses the parameter
“w”. The “w” parameter will erase anything that is already in the file and replace it with what is currently
being written to the file. In this example the file will be updated (replaced) with the new set of records that
excludes the record that was deleted. The displayRecords method is called anytime the program is called
(with or without a record being deleted). This method displays the contents of the log file.
Programming note—Programs that retrieve data that will be used throughout the program
usually retrieve the information in the initial stages of the code and place it in a data
structure (array, list,or dataset). As the data is updated in the program, the information
in the data structure is updated. When the data processing has been completed, the
information is then returned to the original location (text file or database). Updating the text
file or database is usually completed as one of the final stages of the program. The process
of a user logging out of a program would provide an event to indicate that the updated
data should be saved.
181Chapter 5 ■ Handling and Logging Exceptions
Do It
1.Download the code for Example 5-8 from the book’s web site. Add a try catch
block to handle any unexpected problems (such as a nonexistent log file). Test
and save your changes.
2.Adjust the Example 5-8 code from either #1 or the book’s web site to allow the
users to select which log file to read. The program should allow the users to select
either the user log file or the general system log file. Test and save your changes.
Chapter Terms
ErrorsExceptions
try/catch Block$e->getMessage();
switch StatementEmbedded if Statement
Default Codeextends
Exception ClassInheritance
Child ClassParent Class
trigger_errorHierarchy of Exception Handling
Raising (Throwing) an ExceptionCatching an Exception
Attitude of the CodePush the Errors
Pull the ErrorsLog File
Default PHP Error Fileerror_log
Timestampdate.timezone
Application Log FilesConstants
E-mail Alertsdisplay_errors
Text FileSequential File
fopenfwrite
Pointerfclose
fgetswhile Loop
feof! operator
EngineExceptionexplode
Two-Dimensional ArrayRow
ColumnSubscript
Dynamic ArraysFirst Row of an Array
print_fincrement
decrementfor Loop
HTML HREFunset
182Chapter 5 ■ Handling and Logging Exceptions
Chapter Questions and Projects
Multiple Choice
1.
2.
3.
4.
5.
Which of the folowing is true about PHP program errors?
a.They are used for all exceptional situations before PHP 5.0.
b.They are handled by the operating system.
c.They might be displayed to the users.
d.All of these.
Which of the folowing is true about PHP program exceptions?
a.They are used for all exceptional situations after PHP 5.0.
b.They can be handled by the operating system.
c.They might be displayed to the users.
d.All of these.
The try/catch block is used to do which of the following?
a.Capture all errors.
b.Capture only known errors.
c.Capture all exceptions.
d.Capture only known exceptions.
Inheritance does which of the following?
a.Is part of object-oriented programming.
b.Allows the child class to use all the attributes of its parent class.
c.Allows the child to create its own methods or properties.
d.All of these.
Text files do which of the following?
a.Are easy to use in PHP.
b.Are more secure than using databases.
c.Are non-sequential.
d.None of these.
183Chapter 5 ■ Handling and Logging Exceptions
6.
7.
8.
9.
10.
PHP log files do which of the following?
a.Are created by the error_log method.
b.Are updated by the error_log method.
c.Should be located in a different directory than the application.
d.All of these
Which of the following describes two-dimensional arrays?
a.They are similar to HTML tables. They contain rows and columns.
b.They should be avoided at all costs. They are inefficient and difficult to use.
c.They require all columns to be loaded with data before rows.
d.None of these.
Which of the following describes the first position of a two-dimensional array?
a.It has a subscript of 0.
b.It has a subscript of 1.
c.It has a default value.
d.None of these.
Application log files should include which of the folllowing?.
a.User log files.
b.Error log files.
c.Informational log files.
d.All of these.
E-mails generated because of program exceptions should do what?
a.Include all error information, including the error descriptions.
b.Include the code lines that caused the error to occur.
c.Include the date and time the error occurred.
d.All of these.
True/False
184
1.All exceptions should be displayed to the users.
2.The for loop should be used when you know exactly how many loops will occur.
3.The while loop will continue to loop until the conditional statement becomes true.
4.unset can be used to release a position in an array.
5.All PHP arrays must be declared before being used.
6.A pointer points to the location in memory that an object resides.Chapter 5 ■ Handling and Logging Exceptions
7.The ! operator reverses a TRUE result to a FALSE result.
8.print_f can be used to display the contents of an array.
9.Try/Catch blocks should reside in the business rules and data tiers but not the
interface tier.
10.Only Exceptions intentionally thrown by program code should be caught.
Short Answer/Essay
1.Explain how hierarchy of exception handling works with three-tier applications.
2.What is the difference between an error and an exception?
3.How do you correct the time zone if PHP is providing an incorrect timestamp?
4.How can PHP programmers try to capture errors so they can be treated as if they
are exceptions?
5.Why is it important to have multiple log files produced by an application?
Projects
1.Adjust the code from project #1 (or #2) from Chapter 4 to include exception
handling and logging.
2.Create an application that will register contestants for your favorite game
show. Include verification of the data entered using HTML5 and JavaScript.
Also validate the data when it is passed to the application. The application
should include an interface php program (interface tier) and a registration class
(business rules tier). The registration class should include exception handling
(both user exceptions and program exceptions). The interface program should
handle the exceptions using try/catch blocks as shown in this chapter.
Term Project
1.
Update the ABC Computer Parts Warehouse Inventory application to include
exception handling. The application should attempt to handle all exceptions, and
errors, when possible.
User exceptions should be logged to a user log. All other exceptions should
be logged to a system log. If the exception is considered to be extreme (will
cause the program to otherwise crash), an e-mail should be sent to the system
administrator. Hint: The Try/Catch block should only exist in the interface tier.
185Chapter 6
Data Objects
“I’m an idealist. I don’t know where I’m going, but I’m on my way.” —Carl Sandburg,
Incidentals (1904)
Chapter Objectives/Student Learning Outcomes
After completing this chapter, the student will be able to:
•Create a data class that inserts, updates, and deletes XML or JSON data
•Explain how to create a data class that updates MySQL data using a SQL script
•Create a PHP program that creates a change backup log
•Create a PHP program that can recover data from a previous backup
•Apply changes to create up-to-date valid information
•Use dependency injection to attach a data class to another class in the BR tier
•Create a three-tier PHP application
The Data Class
The interface and business rules tiers should not store application information. These tiers should not
even be aware of how the information is stored (text file, XML, or database) or the location of the stored
information. Any information that is stored must be passed from the business rules tier to the data tier. The
data tier is also responsible for reacting to requests for information from the business rules tier.
This allows the interface tier and business rules tier to be unaware of any changes in types of storage
methods (text file, XML, or database) and the locations of stored items. The signature (parameters accepted)
and items returned from the data tier should remain unchanged over the life of the application. As long as
these do not change, there should be no changes needed in the other tiers when changes occur in the data tier.
Security and performance—When using databases it may seem logical to build a SQL string in
the business rules tier and pass the string to the data tier. This would cause a major security hole in the
application. Hackers could pass any SQL string (including a delete string). It may also seem logical to pass
SQL update commands (DELETE, UPDATE, and INSERT) into the data tier. Again this provides a major hole.
Passing data for a WHERE SQL command is also a bad idea as it might allow hackers to delete or change any
combination of data in the database.
Electronic supplementary material The online version of this chapter (doi:10.1007/978-1-4842-1730-6_6)
contains supplementary material, which is available to authorized users.
© Steve Prettyman 2015
S. Prettyman, Learn PHP 7, DOI 10.1007/978-1-4842-1730-6_6
187Chapter 6 ■ Data Objects
A data class should provide complete functionality for manipulating information. This includes the
ability to read, insert, update, and delete information. Even if the current application does not require all
these commands, logically, they should exist in the data class for future use.
A balance should be achieved between performance and the requirement to store information. While highly
important information might require immediate storage, other information can be held in a data structure (list,
array, and dataset) in the application until the user has completed any updates. Holding and making changes
to information in the memory of the server, instead of the storage location, is much more efficient. Storing the
information only after all changes have been completed will reduce several calls to the storage location down to
two (initial retrieval of the information and saving of the updated information). Making changes to information
in memory is always more efficient than making changes on a storage device (such as a hard drive).
Using a data class provides a logical ability to populate a data structure and to save information in a
storage location automatically. Assuming that an instance of the data class will only be created when it
is necessary to update information, the constructor of the class can be used to retrieve the information
from storage and place it in the memory of the server. When the data object is no longer needed, logically,
no more changes are required to the information. The destructor of the class can be used to return the
information from memory to storage.
class dog_data
{
function __construct()
{
$xmlfile = file_get_contents(get_dog_application("datastorage"));
$xmlstring = simplexml:load_string($xmlfile);
$array = (array)$xmlstring;
print_r($array);
}
}
This example constructor comes very close to providing useful information from an XML file. The
PHP file_get_contents method opens a text file, drops the contents into a string, and closes the file. The
constructor calls this method along with the get_dog_application method (same method that was used in
dog_container in Example 5-5) to determine the file name and location of the XML data file. The contents
of the file are then placed in $xmlfile. The PHP simplexml:load_string method then formats the data to
allow the SimpleXML data model to traverse the information. At this point, the SimpleXML methods could
be used to display and manipulate the data. However, the next line attempts to convert the XML data into an
array. The (array) statement tries to use type casting. The print_r statement displays the results.
<?xml version="1.0" encoding="UTF-8"?>
<dogs>
<dog>
<dog_name>Woff</dog_name>
<dog_weight>12</dog_weight>
<dog_color>Yellow</dog_color>
<dog_breed>Lab</dog_breed>
</dog>
<dog>
<dog_name>Sam</dog_name>
<dog_weight>10</dog_weight>
<dog_color>Brown</dog_color>
<dog_breed>Lab</dog_breed>
</dog>
</dogs>
188Chapter 6 ■ Data Objects
Assuming that the XML file is formatted as shown here, the output includes:
Array ( [dog] => Array ( [0] => SimpleXMLElement Object ( [dog_name] => Woff [dog_weight] => 12
[dog_color] => Yellow [dog_breed] => Lab ) [1] => SimpleXMLElement Object ( [dog_name] => Sam
[dog_weight] => 10 [dog_color] => Brown [dog_breed] => Lab ) ) )
A combination of multidimensional arrays and SimpleXML objects have been created. This does not
provide useful data that can easily be manipulated. However, you can use JSON methods to trick PHP into
creating a multidimensional associate array.
class dog_data
{
function __construct()
{
$xmlfile = file_get_contents(get_dog_application("datastorage"));
$xmlstring = simplexml:load_string($xmlfile);
$json = json_encode($xmlstring);
print_r($json);
}
}
{"dog":[{"dog_name":"Woff","dog_weight":"12","dog_color":"Yellow","dog_breed":"Lab"},{"dog_name"
:"Sam","dog_weight":"10","dog_color":"Brown","dog_breed":"Lab"}]}
Using the PHP json_encode method changes the data into well-structured JSON data. You could
use one of the several PHP techniques to manipulate JSON data or, with one additional statement (json_
decode), you can create a well-structured multidimensional associate array.
class dog_data
{
function __construct()
{
$xmlfile = file_get_contents(get_dog_application("datastorage"));
$xmlstring = simplexml:load_string($xmlfile);
$json = json_encode($xmlstring);
$dogs_array = json_decode($json,TRUE);
print_r($dogs_array);
}
}
Array ( [dog] =>
Array (
[0] => Array ( [dog_name] => Woff [dog_weight] => 12 [dog_color] => Yellow [dog_breed] => Lab )
[1] => Array ( [dog_name] => Sam [dog_weight] => 10 [dog_color] => Brown [dog_breed] => Lab ) ) )
As you can see, there is no longer a mixture of arrays and SimpleXML objects. An associate array has
been created that uses keywords instead of numerical values for subscripts (indexes). In the previous
example, an array called "dog" has been created with two rows (each row is represented by an array). In
each row, the columns (cells) are referenced by a column name (dog_name, dog_weight, dog_color, and
dog_breed) instead of indexes (0, 1, 2, 3). These rows and columns can be manipulated using some of the
techniques you have seen in previous chapters.
189Chapter 6 ■ Data Objects
Once you have completed all changes to the array (as requested by the business rules tier), you will
return the information to the storage location in the destructor.
private $dogs_array = array(); // defined as an empty array initially
function __construct()
{
$xmlfile = file_get_contents(get_dog_application("datastorage"));
$xmlstring = simplexml:load_string($xmlfile);
$json = json_encode($xmlstring);
$this->dogs_array = json_decode($json,TRUE);
}
function __destruct()
{
$xmlstring = '<?xml version="1.0" encoding="UTF-8"?>';
$xmlstring .= "\n<dogs>\n";
foreach ($this->dogs_array as $dogs=>$dogs_value) {
foreach ($dogs_value as $dog => $dog_value)
{
$xmlstring .="<$dogs>\n";
foreach ($dog_value as $column => $column_value)
{
$xmlstring .= "<$column>" . $dog_value[$column] . "</$column>\n";
}
$xmlstring .= "</$dogs>\n";
}
}
$xmlstring .= "</dogs>\n"; file_put_contents(get_dog_application("datastorage"),$xmlstring);
}
There are many ways that you can create XML data in PHP. The previous example takes a simplistic
approach by supplying the XML tags from the array. As seen in the structure, there are three sets of arrays in
this multidimensional array. The first foreach loop is used to flow through the first array (dogs). The second
foreach loop handles the dog arrays (rows). Once inside this loop, the third foreach loop controls the
columns in each dog array (each row).
The third loop retrieves the column names (from $column) and places them in XML tags. $column is also
used to pull the value in the column ($dog_value[$column]). The $xmlstring supplies the same tags and
structure as in the original XML file. Note that each line includes a newline character (\n) to display different
lines in the file. The structure would work without this addition. However, if makes the file more readable in
a text editor.
Once the $xmlstring has been created, the code uses a combination of the PHP file_put_contents
method and the get_dog_application method (from Chapter 4) to open the XML file, replace the contents
with the string contained in $xmlstring, and close the file.
You need to make one more final adjustment to the constructor to allow it to handle XML parsing
errors. A parsing error occurs when something is wrong with the XML structure. The previous dog_breed
and dog_application XML files are not updated by the application and are fairly stable. However, the XML
file for the dog’s information will be updated frequently. You need to handle any problems that may occur.
You will raise a general error, which will be treated by dog_interface as an important error that is logged
and e-mailed to support personnel. It will also display a "System currently not available please try
again later" message to the users.
190Chapter 6 ■ Data Objects
private $dogs_array = array(); defined as an empty array initially
libxml:use_internal_errors(true);
function __construct() {
$xmlfile = file_get_contents(get_dog_application("datastorage"));
$xmlstring = simplexml:load_string($xmlfile);
if ($xmlstring === false) {
$errorString = "Failed loading XML: ";
foreach(libxml:get_errors() as $error) {
$errorString .= $error->message . " "; }
throw new Exception($errorString); }
$json = json_encode($xmlstring);
$this->dogs_array = json_decode($json,TRUE);
}
By default, XML parsing errors will cause the system to display the errors to the user and shut down
the program. The libxml:user_internal_errors(true) method will suppress the errors. When the string
is converted to XML format via the simplexml:load_string method, the XML is parsed to determine if it
is valid. If it is not valid, the method will return FALSE instead of the XML information. The if statement
shown will create an $errorString and use the foreach statement to loop through each error returned by
the libxml:get_errors method (which returns an array containing the errors). Once all errors are collected,
it will raise an exception passing the $errorString. The dog_interface program will catch this error and
process it, as shown in Chapter 5.
This example does make one bad assumption (which simplifies the example). It assumes that the
$errorString does not exceed the maximum capacity of 120 characters for the log file. A very badly
formatted file could quickly cause $errorString to exceed this size. This limit can be adjusted in the PHP
configuration file.
With the data automatically being saved whenever the data object is removed from memory, the insert,
update, and delete methods only need to adjust the contents of the multidimensional associative array. Let’s
take a first look at creating a delete method since you have already seen an example in Chapter 5.
In the readerrorlog program (in Example 5-8) you created a deleterecord method. The method was
used for regular multidimensional arrays. We could make a few adjustments to this routine to create the
deleteRecord method for the dog_data class.
function deleteRecord($recordNumber) {
foreach ($this->dogs_array as $dogs=>&$dogs_value) {
for($J=$recordNumber; $J < count($dogs_value) -1; $J++)
{
foreach ($dogs_value[$J] as $column => $column_value)
{
$dogs_value[$J][$column] = $dogs_value[$J + 1][$column];
}
}
unset ($dogs_value[count($dogs_value) -1]);
}
}
In the previous deleterecord method, the number of rows in the array and the array itself were passed
into the method. The array in dog_data class is populated by the XML file containing the dog information.
There is no property set with the number of records. This is not a problem. The PHP method count will
return the size of an array. You can access and update the dogs_array (which is a protected private property)
using the $this pointer. Methods in classes can use the this pointer to access and update protected
properties; it is not necessary to pass them into a method. The only property you need to pass to the
deleteRecord method is the record number ($recordNumber) to delete.
191Chapter 6 ■ Data Objects
The associate array has three dimensions. The outer dimension is related to the dogs tag from the XML
structure. Although there is only one “row” for dogs, a loop is still needed to move into the next array (dog).
The foreach loop penetrates the dogs array and provides access to the dog array (which was created from
the dog tags in the XML file). $dogs will contain the number of the dog row currently used. $dogs_value
will contain the contents of the row (an array with the values in dog_name, dog_weight, dog_color, and
dog_breed).
To move through each row (array) contained in the dog array, the method uses a for loop. The
conditional statement ($J < count($dogs_value) -1) uses the count method to determine the size of the
dog array. The count method returns the size of the array, not the last position of the array. Thus the loop
count must be less than (<) the size returned from count. One is subtracted from this value. As stated in
Chapter 5, any row after a deleted row must be moved up one from its current position. The last position of
the array will no longer be needed, which reduces the number of loops needed by one.
In the Chapter 5 example, a for loop was used to pull each column from the row and place it in the row
above. With an associate array, you use a foreach loop. The $column parameter contains the column name
($J contains the row number) to place the values in the columns into the proper locations. After the values
in the rows have been moved, the last position of the array is removed using the PHP unset method.
Similar logic can be used in almost any program language. However, PHP associate arrays allow index
numbers to be skipped. Unlike other languages which would place a NULL value in a missing index, PHP
associate arrays just skip the actual index. Thus any array could have indexes of 0, 1, 2, 4, 5 and a foreach
loop would properly loop through the array. With this in mind we can greatly simplify the previous example
delete example to only contain one line of code, just the unset command shown. The unset command would
remove the index passed into the method from the dog_array. Any for loop using the dog_array would still
properly loop through the array. The example code contained in the demo website provides this ability.
You can also make a few adjustments to the displayRecords method from Chapter 5 to return any
record(s) that a calling program (such as the Dog class) requests.
function readRecords($recordNumber) {
if($recordNumber === "ALL") {
return $this->dogs_array["dog"];
}
else {
return $this->dogs_array["dog"][$recordNumber];
} }
As you can see the readRecords method is more simplistic that the displayRecords method. All
formatting of the results of this method are left to the calling program (if needed). Remember that displaying
and formatting of output occurs in the interface tier, not the data tier (or business rules tier).
This method allows the calling program to request all records or a specific record. In either case it
returns an array with either one row (the specific record requested) or all rows. When all rows are returned,
the top array (representing the rows XML tag) is removed to keep the number of dimensions (two) the same
for either selection.
The insertRecords method accepts an associate array with the subscript names previously mentioned.
However, in order to allow for dependency injection and flexibility in the tag names for the XML file, the
calling program does not need not know the tag names until an instance of the dog_data class is created.
This can be accomplished by using the readRecords method to pull the first record and then have the calling
program examine the subscript names returned from that record.
192Chapter 6 ■ Data Objects
function insertRecords($records_array)
{
$dogs_array_size = count($this->dogs_array["dog"]);
for($I=0;$I< count($records_array);$I++)
{
$this->dogs_array["dog"][$dogs_array_size + $I] = $records_array[$I];
}
}
■■Note The process of creating the dog_array using the JSON functions shown previously will create one
inconsistency in creating the dog_array. If the dog_data.xml file contains only one record, the JSON functions
will not create a numeric index (such as '0'). When more than one record is contained in the xml file the
numeric indexes will be created (such as '0', '1'). An alternative solution to which handles these differences is
provided in the demo files on the textbook website.
In the insertRecords method, all records are added to the end of the array (the calling program can
sort them if needed). The current size of dogs_array is determined by the count method and stored into
$dogs_array_size. The count method is also used inside the for structure to determine the size of the
$records_array and to determine the number of loops. Since the results of the count method produces the
size of the array, which is one more than the last subscript position, the result of count also gives the next
position available to insert a record.
In the first loop, $I is 0. The first record of $records_array is placed into $dogs_array_size plus 0, or
$dogs_array_size (the first open row to place a record). The next time through the loop, the second record
of $records_array ($I was incremented by the loop) is placed into position $dogs_array_size plus 1. This
is the next position available after the first record has been inserted. The loop will continue until there are no
more records in the $records_array. By the way, this method also works well with just one record to insert
(as long as it is passed as an associate array). The loop will execute only once.
The last method you need to examine is an update method. This method is a very simple form of the
destructor method.
function updateRecords($records_array)
{
foreach ($records_array as $records=>$records_value) {
foreach ($records_value as $record => $record_value) {
$this->dogs_array["dog"][$records] = $records_array[$records];
}
}
}
This little tiny method will take any size associate array and update the dogs array. It is based on PHP’s
ability to dynamically build arrays.
$records_array = Array (
0 => Array ( "dog_name" => "Jeffrey", "dog_weight" => "19", "dog_color" => "Green",
"dog_breed" => "Lab" ),
2 => Array ( "dog_name" => "James", "dog_weight" => "21", "dog_color" => "Black",
"dog_breed" => "Mixed" ));
193Chapter 6 ■ Data Objects
Dynamically built arrays are not required to have values for every position in the array. If the dynamic
array shown previously is passed into the updateRecords method, records 0 and 2 would be updated with
the new information. The value in position 1 in the dogs array would remain untouched.
Take a moment to look at these methods. There are only two XML tags that have been coded in
the methods (dogs and dog). Even those two could have been retrieved from the XML file. However, the
assumption that these tags will always exist in a valid dog XML file makes logical sense. By dynamically pulling
all of the other tags (dog_name, dog_weight, dog_color, and dog_breed) from the XML file, changes can be
made to the file without causing any code changes. Additional tags can be added, removed, and/or changed.
Let’s put it all together.
Example 6-1. The dog_data.php file
<?php
class dog_data
{
private $dogs_array = array(); //defined as an empty array initially
private $dog_data_xml = "";
function __construct() {
libxml:use_internal_errors(true);
$xmlDoc = new DOMDocument();
if ( file_exists("e5dog_applications.xml") )
{
$xmlDoc->load( 'e5dog_applications.xml' );
$searchNode = $xmlDoc->getElementsByTagName( "type" );
foreach( $searchNode as $searchNode )
{
$valueID = $searchNode->getAttribute('ID');
if($valueID == "datastorage")
{
$xmlLocation = $searchNode->getElementsByTagName( "location" );
$this->dog_data_xml = $xmlLocation->item(0)->nodeValue;
break;
}
} }
else { throw new Exception("Dog applications xml file missing or corrupt"); }
$xmlfile = file_get_contents($this->dog_data_xml);
$xmlstring = simplexml:load_string($xmlfile);
if ($xmlstring === false) {
$errorString = "Failed loading XML: ";
foreach(libxml:get_errors() as $error) {
$errorString .= $error->message . " " ;
throw new Exception($errorString); }
$json = json_encode($xmlstring);
$this->dogs_array = json_decode($json,TRUE);
}
function __destruct()
{
$xmlstring = '<?xml version="1.0" encoding="UTF-8"?>';
$xmlstring .= "\n<dogs>\n";
foreach ($this->dogs_array as $dogs=>$dogs_value) {
194
}Chapter 6 ■ Data Objects
foreach ($dogs_value as $dog => $dog_value)
{
$xmlstring .="<$dogs>\n";
foreach ($dog_value as $column => $column_value)
{
$xmlstring .= "<$column>" . $dog_value[$column] . "</$column>\n";
}
$xmlstring .= "</$dogs>\n";
}
}
$xmlstring .= "</dogs>\n";
file_put_contents($this->dog_data_xml,$xmlstring);
}
function deleteRecord($recordNumber)
{
foreach ($this->dogs_array as $dogs=>&$dogs_value) {
for($J=$recordNumber; $J < count($dogs_value) -1; $J++) {
foreach ($dogs_value[$J] as $column => $column_value)
{
$dogs_value[$J][$column] = $dogs_value[$J + 1][$column];
}
}
unset ($dogs_value[count($dogs_value) -1]);
}
}
function readRecords($recordNumber)
{
if($recordNumber === "ALL") {
return $this->dogs_array["dog"];
}
else
{
return $this->dogs_array["dog"][$recordNumber];
}
}
function insertRecords($records_array)
{
$dogs_array_size = count($this->dogs_array["dog"]);
for($I=0;$I< count($records_array);$I++)
{
$this->dogs_array["dog"][$dogs_array_size + $I] = $records_array[$I];
}
}
195Chapter 6 ■ Data Objects
function updateRecords($records_array)
{
foreach ($records_array as $records=>$records_value)
{
foreach ($records_value as $record => $record_value)
{
$this->dogs_array["dog"][$records] = $records_array[$records];
}
}
}
}
?>
■■Note An alternative solution which handles associate arrays with missing indexes, and the possibility that
the dog_data.xml file may contain one or zero records, is provided on the textbook website.
The only change in this final version of the dog_data class is the inclusion of get_dog_application
method code in the constructor to retrieve the location and name of the XML file holding the dog data.
Example 6-2. The testdata.php file
<?php
include("dog_data.php");
$tester = new dog_data();
$records_array = Array (
0 => Array ( "dog_name" => "Sally", "dog_weight" => "19", "dog_color" => "Green",
"dog_breed" => "Lab" ));
$tester->insertRecords($records_array);
print_r ($tester->readRecords("ALL"));
print("<br>");
$records_array = Array (
1 => Array ( "dog_name" => "Spot", "dog_weight" => "19", "dog_color" => "Green",
"dog_breed" => "Lab" ));
$tester->updateRecords($records_array);
print_r ($tester->readRecords("ALL"));
print("<br>");
$tester->deleteRecord(1);
print_r ($tester->readRecords("ALL"));
$tester = NULL; // calls the destructor and saves the xml records in the file
?>
Example 6-2 tests some of the possible scenarios of using the dog_data class. Notice the last line of code
calls the destructor (to save the data). This is accomplished by setting the pointer to the object ($tester) to
NULL, which releases the object. This will inform the garbage collector of the operating system that the object
should be removed from memory. This will cause the destructor to execute, which will update the XML file
and remove the object from the memory of the server.
196Chapter 6 ■ Data Objects
JSON Data
Let’s take a second to back up and look at the ability to read and write JSON data. Using the example code
shown in this chapter, only the constructor and destructor will need to be adjusted when you use other
forms of data besides XML. Accessing and using JSON data is even easier than using XML data.
...
$json = file_get_contents($this->dog_data_JSON);
$this->dogs_array = json_decode($json,TRUE);
if ($this->dogs_array === null && json_last_error() !== JSON_ERROR_NONE)
{
throw new Exception("JSON error: " . json_last_error_msg());
}
...
In the constructor, after the if else structure that retrieves the location of the data from the
dog_application.xml file, the multiple lines accessing and formatting the XML data can be replaced by
the lines shown previously. The json_decode method (as shown previously) will attempt to format the data
from the text file into the associate array format. If the data is not a valid JSON format, an exception is thrown
passing the error message. Since the Exception class is used, the dog_interface program would log this
information in the error log, e-mail the support personnel, and display a general message to the users.
$json = json_encode($this->dogs_array);
file_put_contents($this->dog_data_JSON,$json);
The complete code for the destructor requires only two lines. The json_encode method will convert the
associate array data into JSON format. The file_put_contents method will then save the information to
the proper location of the JSON file ($this->dog_data_JSON). No changes are required to any of the other
methods in dog_data. Note: An example application using JSON data is available on the book’s web site
under Chapter 6.
MySQL Data
This book is intended as an introduction to the PHP language. Thus, you will not spend much time learning
about database usage. However, this is a good time to give a brief example of adjustments you can make to
the constructor and destructor methods to access and update database information.
■■Note mysql has been removed since PHP5.5. It is recommended that you use mysqli or pdo_mysql.
$mysqli =mysqli_connect($server, $db_username, $db_password, $database);
if (mysqli_connect_errno())
{
throw new Exception("MySQL connection error: " . mysqli_connect_error());
}
$sql="SELECT * FROM Dogs";
$result=mysqli_query($con,$sql);
197Chapter 6 ■ Data Objects
If($result===null)
{
throw new Exception("No records retrieved from Database");
}
$this->dogs_array = mysqli_fetch_assoc($result);
mysqli_free_result($result);
mysqli_close($con);
Most of the code required for the constructor method is associated to connecting, retrieving, and
disconnecting from the database. The mysqli_connect method uses the server location ($server), database
user ID ($db_username), database password ($db_password), and database name ($database) to connect to
the database. If mysqli_connect_errno contains any errors an Exception is thrown describing the error. If
there are no errors, a SQL SELECT statement ($sql) is used to retrieve all the records from the Dogs table in
the database. If no records are retrieved, another exception is thrown. If records are retrieved, the mysqli_
fetch_assoc method will convert the data into an associate array. The mysqli_free_result statement
releases the data from $result. The mysqli_close method closes access to the database.
The destructor takes a little more coding. However, the looping is similar to saving the XML data.
$mysqli = new mysqli($server, $db_username, $db_password, $database);
if ($mysqli->connect_errno)
{
throw new Exception("MySQL connection error:" . $mysqli->connect_error);
}
If( (!$mysqli->query("DROP TABLE IF EXISTS Dogs") ||
(!$mysqli->query("CREATE TABLE IF NOT EXISTS Dogs (dog_id CHAR(4), dog_name CHAR(20),
dog_weight CHAR(3), dog_color CHAR(15), dog_breed CHAR(35)") )
{
throw new Exception("Dog table can't be created or deleted. Error: " . $mysqli->error);
}
foreach ($this->dogs_array as $dogs=>$dogs_value) {
foreach ($dogs_value as $dog => $dog_value)
{
$dog_id = $dog_value["dog_id"];
$dog_name = $dog_value["dog_name"];
$dog_weight = $dog_value["dog_weight"];
$dog_color = $dog_value["dog_color"];
$dog_breed = $dog_value["dog_breed"];
If(!$mysqli->query("INSERT INTO Dogs(dog_id, dog_name, dog_weight, dog_color,
dog_breed) VALUES ('$dog_id', '$dog_name', '$dog_weight', '$dog_color',
'$dog_breed')"))
{
throw new Exception("Dog Table Insert Error: " . $mysqli->error);
}
}
}
...
198Chapter 6 ■ Data Objects
The destructor method attempts to connect to the database. If the connection is successful, the method
removes any preexisting Dogs table and creates a new one with the required fields. (Note: It would probably
be better to rename the old one and create a new one.). If the old table can be removed and the new table
created, then the method attempts to insert rows into the table. The SQL INSERT statement places the values
from $dog_name, $dog_weight, $dog_color, and $dog_breed into a row in the table. The foreach loops
retrieve each row from the associate array to be placed into the table. If any of the inserts are not successful,
an exception is thrown. An example program is located under Chapter 6 on the book’s web site.
Programming note—The Apache server must be properly configured and MySQL must
be properly installed to run this (or a similar) database example. $server must be set
to the URL, “localhost”, or “127.0.0.1”. $db_username must be set to the user ID name to
access the database ('root' if a user ID has not been configured). $db_password must be
set to the database password (or '' if there is no password). $database must be set to the
database name. There is a large varieties of ways to access and manipulate databases
in the PHP language.
Do It
1.Download the example files for this section from the book’s web site. Adjust the
deleteRecords method to allow the ability to delete multiple records. However,
also include a check to limit the amount of records that can be deleted. It would
not be very secure to allow all records to be deleted. If an attempt is made to
delete all records (or too many records), an exception should be raised. The
exception should cause the calling program (eventually dog_interface) to write
an error message to the main log file, e-mail the support personnel, and display
the general message to the users (shown in Chapter 5). Adjust the testdata
program to test the ability to delete multiple records and catch the exceptions.
2.Download the example files for this section from the book’s web site. Adjust the
testdata program to test all remaining scenarios that have not already been
tested. These are related to inserting, updating (more than one), reading, and
deleting records. Be sure to test improperly formatted information. Create a try
catch block in the testdata program to capture any exceptions. You can use the
try catch block from dog_interface in Chapter 5 as an example.
Backup and Recovery
There is always a possibility that something can go wrong when changes are made to stored information.
While a well-developed application must filter and clean data before it is saved; it must also be prepared
to handle the possibility that bad data may still flowed through and corrupt the information. In addition
to intentional corruption, unforeseen problems (such as system crashes) may occur. An application must
provide the ability to recover without the loss of data. This can be accomplished by logging change requests
and backing up valid information. Recovery can be accomplished by using a valid backup and reapplying
valid changes to the backup files to produce up-to-date information.
You can make just a few minor changes to the dogdata file (Example 6-1) to create a change log and
to provide backup and recovery capability. First, you will create a main method (processRecords) that will
interpret any data passed into the class. This function will simplify the recovery process by allowing the
recovery program to pass all change log information into one method. This will also make dependency
injection easier to accomplish.
199Chapter 6 ■ Data Objects
function processRecords($change_Type, $records_array)
{
switch($change_Type)
{
case "Delete":
$this->deleteRecord($records_array);
break;
case "Insert":
$this->insertRecords($records_array);
break;
case "Update":
$this->updateRecords($records_array);
break;
case "Display":
$this->readRecords($records_array);
Break;
default:
throw new Exception("Invalid XML file change type: $change_Type");
}
}
All requests for changes will now be passed through this method. The method accepts a change type
(Insert, Delete, Update, or Display) and the array (for Insert or Update) or the record number (for Delete
or Update). The values are passed into $record_array. $record_array is dynamically created as either an
array or a string. This allows the processRecords method to provide polymorphism (the ability for the same
method call to accept different parameters), which is one of the requirements of an object-oriented language
(along with encapsulation and inheritance). The switch statement looks at $change_Type to determine
which method to call. It then calls the related method. If an invalid type is passed, an exception is thrown.
Security and performance—In a ‘live’ environment, it would be more secure to pass
“codes” into this type of method instead of using a value that indicates the action that will
take place. For example, 101 could be used to indicate an update. The switch statement
could easily be adjusted to examine the codes to determine which method to call.
Each of the methods that you have examined previously (except for the constructor and destructor)
are now set to 'private'. This makes the process much more secure; changes can only occur by using the
processRecords method. Three code lines have also been added to the end of each of the three methods to
provide backup and recovery capabilities.
...
$change_string = date('mdYhis') . " | Delete | " . $recordNumber . "\n";
$chge_log_file = date('mdYhis') . $this->change_log_file;
error_log($change_string,3,$chge_log_file); // might exceed 120 chars
...
The first line formats a string for a change log file. The format used is similar to the format you look at in
Chapter 5. In the previous example, the record number is passed as required for the delete method.
$change_string = date('mdYhis') . " | Update | " . serialize($records_array) . "\n";
For update and insert, the arrays are passed. However, an array cannot be placed into a string. The
serialize method transforms an array into a string format similar to the following.
200Chapter 6 ■ Data Objects
a:1:{i:0;a:4:{s:8:"dog_name";s:7:"Spot";s:10:"dog_weight";s:2:"19";s:9:
"dog_color";s:5:"Green";s:9:"dog_breed";s:3:"Lab";}}
The data in a serialized string can be returned to an array format (or another format) using the unserialize
method. The second line creates a string ($chge_log_file), which uses the date method and the log file name
located in the dog_applications XML file to create a backup file name (and location). The string created is then
passed to this log using the error_log method. The contents of the log file will look similar to the following.
07142015042510 | Insert | a:1:{i:0;a:4:{s:8:"dog_name";s:7:"tester1";s:10:
"dog_weight";s:2:"19";s:9:"dog_color";s:5:"Green";s:9:"dog_breed";s:3:"Lab";}}
07142015042510 | Update | a:1:{i:1;a:4:{s:8:"dog_name";s:7:"tester2";s:10:
"dog_weight";s:2:"19";s:9:"dog_color";s:5:"Green";s:9:"dog_breed";s:3:"Lab";}}
07142015042510 | Delete | 1
This format provides all the information needed to help with the recovery process. If the current version
of the dog data file is corrupted, the change log file can be used to apply changes to a good version of the file
to develop a new current version.
The only other changes needed to the data class are a few additional code lines in the destructor.
$new_valid_data_file = preg_replace('/[0-9]+/', '', $this->dog_data_xml);
// remove the previous date and time if it exists
$oldxmldata = date('mdYhis') . $new_valid_data_file;
if (!rename($this->dog_data_xml, $oldxmldata))
{
throw new Exception("Backup file $oldxmldata could not be created.");
}
file_put_contents($new_valid_data_file,$xmlstring);
Before the destructor uses the file_put_contents method to apply changes to the XML file, a backup
should be created in case the changes cause corruption to the current data. The recovery process will allow
the support personnel to select which data file contains good data and which change file(s) will be applied
to the data to produce the correct current version of the data.
Because this process may use a backup file of the data, which includes a file name with a date and time,
the preg_replace method is used to remove any numerical information from the data file name. The regular
expression (/[0-9]+/) in the first parameter directs the method to search for all occurrences of numbers
in $this->dog_data_xml. If any occurrence is found, it is replaced with the value in the second parameter
(''). In this case, nothing. The new file name is then placed in $new_valid_data_file. This will not cause
any change to a “normal” non-backup file name because it does not contain any numerical information.
A new backup file name is created using the file name in $new_valid_data_file with the date and time
information. The new backup file name is stored in $oldxmldata.
Now the last valid data can be moved to the new backup file using the rename method. The data in
$this->dog_data_xml (the location of the good data without changes) is copied to the new backup file
location ($oldxmldata). If the file cannot be renamed, an exception is thrown.
Finally the valid changed data (located in $xmlstring) can be placed into the new location of the valid data
(which is the same file name without any date information) contained in the $new_valid_data_file property.
For example, if 07142015042510dog_data.xml contains the last valid data available,
07152015001510dog_data.xml might be the new location of this data before any changes are applied. dog_
data.xml would be the location of the valid data after changes have been applied. The last coding change to
the dog data class is the inclusion of a set method.
function setChangeLogFile($value)
{
$this->dog_data_xml = $value;
}
201Chapter 6 ■ Data Objects
To allow the recovery application to use the last valid data, the application must have the ability to change
the location of the valid data. The setChangeLogFile method changes the value in $this->dog_data_xml.
This property was originally set from locating information in the dog application XML file. However, that might
not currently be the location of valid data. The code added to the destructor will use the new location of the
valid data, apply the changes needed, and place valid data back into the original data file. There is no need to
make any changes to the data_application XML file. After the destructor completes, the data file will now
contain the most up-to-date valid data.
Example 6-3. The dogdata.php file with logging as well as backup and recovery processes
<?php
class dog_data {
private $dogs_array = array(); //defined as an empty array initially
private $dog_data_xml = "";
private $change_log_file = "change.log";
function __construct() {
libxml:use_internal_errors(true);
$xmlDoc = new DOMDocument();
if ( file_exists("e5dog_applications.xml") )
{
$xmlDoc->load( 'e5dog_applications.xml' );
$searchNode = $xmlDoc->getElementsByTagName( "type" );
foreach( $searchNode as $searchNode )
{
$valueID = $searchNode->getAttribute('ID');
if($valueID == "datastorage") {
$xmlLocation = $searchNode->getElementsByTagName( "location" );
$this->dog_data_xml = $xmlLocation->item(0)->nodeValue;
break;
}
}
}
else { throw new Exception("Dog applications xml file missing or corrupt"); }
$xmlfile = file_get_contents($this->dog_data_xml);
$xmlstring = simplexml:load_string($xmlfile);
if ($xmlstring === false) {
$errorString = "Failed loading XML: ";
foreach(libxml:get_errors() as $error) {
$errorString .= $error->message . " " ; }
throw new Exception($errorString); }
$json = json_encode($xmlstring);
$this->dogs_array = json_decode($json,TRUE);
}
function __destruct() {
$xmlstring = '<?xml version="1.0" encoding="UTF-8"?>';
$xmlstring .= "\n<dogs>\n";
foreach ($this->dogs_array as $dogs=>$dogs_value) {
foreach ($dogs_value as $dog => $dog_value) {
$xmlstring .="<$dogs>\n";
foreach ($dog_value as $column => $column_value)
202Chapter 6 ■ Data Objects
{
$xmlstring .= "<$column>" . $dog_value[$column] . "</$column>\n";
}
$xmlstring .= "</$dogs>\n";
}
}
$xmlstring .= "</dogs>\n";
$new_valid_data_file = preg_replace('/[0-9]+/', '', $this->dog_data_xml);
// remove the previous date and time if it exists
$oldxmldata = date('mdYhis') . $new_valid_data_file;
if (!rename($this->dog_data_xml, $oldxmldata)) {
throw new Exception("Backup file
$oldxmldata could not be created."); }
file_put_contents($new_valid_data_file,$xmlstring);
}
private function deleteRecord($recordNumber)
{
foreach ($this->dogs_array as $dogs=>&$dogs_value) {
for($J=$recordNumber; $J < count($dogs_value) -1; $J++) {
foreach ($dogs_value[$J] as $column => $column_value)
{
$dogs_value[$J][$column] = $dogs_value[$J + 1][$column];
}
}
unset ($dogs_value[count($dogs_value) -1]);
}
$change_string = date('mdYhis') . " | Delete | " . $recordNumber . "\n";
$chge_log_file = date('mdYhis') . $this->change_log_file;
error_log($change_string,3,$chge_log_file); // might exceed 120 chars
}
private function readRecords($recordNumber)
{
if($recordNumber === "ALL") {
return $this->dogs_array["dog"];
} else {
return $this->dogs_array["dog"][$recordNumber];
}
}
private function insertRecords($records_array)
{
$dogs_array_size = count($this->dogs_array["dog"]);
for($I=0;$I< count($records_array);$I++) {
$this->dogs_array["dog"][$dogs_array_size + $I] = $records_array[$I];
}
$change_string = date('mdYhis') . " | Insert | " . serialize($records_array) . "\n";
$chge_log_file = date('mdYhis') . $this->change_log_file;
error_log($change_string,3,$chge_log_file); // might exceed 120 chars
}
private function updateRecords($records_array)
{
foreach ($records_array as $records=>$records_value)
{
foreach ($records_value as $record => $record_value)
203Chapter 6 ■ Data Objects
{
$this->dogs_array["dog"][$records] = $records_array[$records];
}
}
$change_string = date('mdYhis') . " | Update | " . serialize($records_array) . "\n";
$chge_log_file = date('mdYhis') . $this->change_log_file;
error_log($change_string,3,$chge_log_file); // might exceed 120 chars
}
function setChangeLogFile($value)
{
$this->dog_data_xml = $value;
}
function processRecords($change_Type, $records_array)
{
switch($change_Type)
{
case "Delete":
$this->deleteRecord($records_array);
break;
case "Insert":
$this->insertRecords($records_array);
break;
case "Update":
$this->updateRecords($records_array);
break;
default:
throw new Exception("Invalid XML file change type: $change_Type");
} } }
■■Note An alternative solution is provided on the textbook website which will allow associate arrays with
missing indexes and one or no records within the dog_data.xml file.
Now that you have the ability to provide backup and recovery, let’s make some adjustments to the
readerrorlog file (in Example 5-8). The new application will need to allow the support personnel to select
(and modify) any valid change log file, select the most valid data file available, and apply the changes from
the change log file to produce a new valid data XML file.
if(isset($_POST['data_File']))
{
update_XML_File_Process();
}
else if(isset($_GET['rn']))
{
delete_Process();
}
else if(isset($_POST['change_file']))
{
display_Process();
}
204Chapter 6 ■ Data Objects
else
{
select_File_Process();
}
Since the code has grown in length, it will be much easier to follow the logical flow (and to modify the
code when necessary) if much of the work is done in methods. As with many applications, the main flow of
the program becomes one embedded if else statement.
Figure 6-1. The readchangelog.php file requesting selection of a change log file
Upon opening the application, a list box will allow the users to select which valid change log file to use
(and possibly update). The else portion of the statement will direct the program to select_File_Process,
which will handle this request.
Figure 6-2. The readchangelog file displaying the selected log and requesting the valid data file
Once the user has selected a change file, the contents of the file will be displayed in the same manner
as shown in Chapter 5. The display_Process method will provide this information. The user can decide to
remove some entries in the change file selected. If deletions are needed, the delete_Process method will
complete the process, using the same techniques shown in Chapter 5. In addition, the same method will
allow the user to select the most recent valid data file to apply changes.
Once the data file has been selected, update_XML_File_Process will apply the changes to the file using
the dogdata program (in Example 6-3). The process will display a changes completed message to the user.
The select_File_Process method uses similar logic as found in the getbreeds.php program
(in Example 4-5).
205Chapter 6 ■ Data Objects
function select_File_Process()
{
$directory = "";
$files = glob($directory . "*change.log");
echo "<form id='file_select' name='file_select' method='post' action='readchangelog.php'>";
echo "<h3>Select a file to display</h3>";
echo "<select name='change_file' id='change_file'>";
foreach($files as $file)
{
echo "<option value='$file'>$file</option>";
}
echo "</select>";
echo "<input type='submit' id='submit' name='submit' value='select'>";
echo "</form>";
}
The PHP glob method places all file names in a given directory ($directory) into an array ($files).
Setting $directory to "" indicates that the current directory will be searched. The second parameter
provides the ability to filter the file types retrieved. *change.log directs the method to pull all files with the
ending change.log. The * (asterisk) is a wildcard character that accepts any characters. This combination
will pull all the change log files produced by the dog_data class. The remaining lines create an HTML drop-
down list displaying the file names retrieved. A submit will cause the program to call itself again with the
selected file residing in the change_file property.
function display_Process()
{
$change_Array = load_Array();
$row_Count = count($change_Array) -1;
displayRecords($row_Count, $change_Array, $_POST['change_file']);
}
display_Process is called when a change file has been selected. This method calls the
load_Array method.
function load_Array()
{
$change_File = $_POST['change_file'];
$logFile = fopen($change_File, "r");
$row_Count = 0;
while(!feof($logFile))
{
$change_Array[$row_Count] = explode(' | ', fgets($logFile));
$row_Count++;
}
$row_Count--;
fclose($logFile);
return $change_Array;
}
The load_Array method is very similar to the constructor in the dog_data class. This method retrieves
the value in change_file and places it in $change_File. This file is then opened and all entries in the file are
placed into $change_Array. The explode method will produce three columns (date/time, change type, array
or string used for the change). It returns this array to the calling program (display_Process).
206Chapter 6 ■ Data Objects
The array is returned to $change_Array in display_Process. The count method determines the
size of this array. Its value is placed in $row_count. displayRecords is called, passing the row_count, the
change_Array, and the change_file into displayRecords.
function displayRecords($row_Count, $change_Array, $change_File)
{
echo "<html><head>";
echo "<style> table { border: 2px solid #5c744d;} </style>";
echo "</head><body>";
echo "<table>";
echo "<caption>Log File: " . $change_File . "</caption>";
echo "<tr><th></th><th>Date/Time</th><th>Change Type</th><th>Change Data</th></tr><tr>";
for ($J=$row_Count -1; $J >= 0; $J--)
{
echo "<td><a href='readchangelog.php?rn=$J&change_File=$change_File'>Delete</a></td>";
for($I=0; $I < 3; $I++)
{
echo "<td> " . $change_Array[$J][$I] . " </td> ";
}
echo "</tr>";
}
echo "</table>";
echo "</body></html>";
$directory = "";
$files = glob($directory . "*dog_data.xml");
echo "<form id='data_select' name='data_select' method='post' action='readchangelog.php'>";
echo "<h3>Delete entries above or select a file to update with change log $change_File</h3>";
echo "<select name='data_File' id='data_File'>";
foreach($files as $file)
{
echo "<option value='$file'>$file</option>";
}
echo "</select>";
echo "<input type='hidden' id='change_file' name='change_file' value='$change_File'>";
echo "<input type='submit' id='submit' name='submit' value='select'>";
echo "</form>";
}
displayRecords displays the contents of the change log file using almost exactly the same logic used
in the displayRecords method of the readerrorlog program (in Example 5-8). It also uses almost the same
logic as the selectFileProcess (explained previously) to display the data files for the user to select the last
uncorrupted file.
If the user decides to delete some records from the change log, the delete_Process is called.
function delete_Process()
{
$change_Array = load_Array();
deleteRecord($_GET['rn'], $row_Count, $change_Array);
saveChanges($row_Count,$change_Array,$change_File);
displayRecords($row_Count,$change_Array,$change_File);
}
207Chapter 6 ■ Data Objects
The delete_Process method will place the change file records into $change_Array using the same
change_Array as shown before. It will pass the record number to be deleted ($_GET['rn']), the number
of rows in the array ($row_Count), and the array ($change_Array) into the deleteRecord method.
The deleteRecords method will use the same logic as shown in the deleteRecord method from the
readerrorlog (in Example 5-8) program. The delete_Process will then call the saveChanges method,
passing in the row_count, change_Array, and change_File information.
function saveChanges($row_Count,$change_Array,$change_File)
{
$changeFile = fopen($change_File, "w");
for($I=0; $I < $row_Count; $I++)
{
$writeString = $change_Array[$I][0] . " | " . $change_Array[$I][1] . " | " .
$change_Array[$I][2];
fwrite($changeFile, $writeString);
}
fclose($changeFile);
}
The saveChanges method builds the date/time-changetype-changedata format, seen previously, from
the change_Array. This information is saved in $writeString and is used to replace the change log file with
the updated version (minus the record that was deleted).
The delete_Process method then recalls the displayRecords method (described earlier) to display the
updated change log (minus the record deleted) and the data file drop-down list.
Once the user selects the data file to be changed, the update_XML_File_Process method is called.
function update_XML_File_Process()
{
$change_Array = load_Array();
require_once("dog_data.php");
$data_Changer = new dog_data();
$row_Count = count($change_Array) -1;
for($I=0;$I < $row_Count; $I++)
{
if($change_Array[$I][1] != "Delete")
{
$temp = unserialize($change_Array[$I][2]);
}
else
{
$temp = (integer)$change_Array[$I][2];
}
$data_Changer->processRecords($change_Array[$I][1], $temp);
}
The method calls the load_Array method to return the changes into $change_Array. The dog_data file
is imported into the method to prepare for the changes to the data file selected by the user. An instance of
the data_data class is created ($data_Changer).
208Chapter 6 ■ Data Objects
A for loop is used to peruse the change array and to pass each change into the processRecords
method of the data class. However, before the records are passed, the serialized data must be returned to
an associate array format using the unserialize method. If the change request is Delete, type casting must
occur to change the data (record number) into an integer. This is one of the few times that PHP requires type
casting. Serialized data is not considered a data type. The data must be transformed by either unserializing
it or type casting it. The change type (Update, Delete, or Insert) is passed into the first parameter of the
processRecords method. The change array or the record number is passed into the second parameter of
the method. All changes are made to the data, the file is backed up, and a new change log is created, in case
there are more corruption problems.
Example 6-4. The displaychangelog.php file
<?php
function displayRecords($row_Count, $change_Array, $change_File) {
echo "<html><head>";
echo "<style> table { border: 2px solid #5c744d;} </style>";
echo "</head><body><table><caption>Log File: " . $change_File . "</caption>";
echo "<tr><th></th><th>Date/Time</th><th>Change Type</th><th>Change Data</th></tr><tr>";
for ($J=$row_Count -1; $J >= 0; $J--) {
echo "<td><a href='readchangelog.php?rn=$J&change_File=$change_File'>Delete</a></td>";
for($I=0; $I < 3; $I++) {
echo "<td> " . $change_Array[$J][$I] . " </td> ";
}
echo "</tr>";
}
echo "</table>";
echo "</body></html>";
echo "</table>";
echo "</body></html>";
$directory = "";
$files = glob($directory . "*dog_data.xml");
echo "<form id='data_select' name='data_select' method='post' action='readchangelog.php'>";
echo "<h3>Delete entries above or select a file to update with change log $change_File</h3>";
echo "<select name='data_File' id='data_File'>";
foreach($files as $file) {
echo "<option value='$file'>$file</option>";
}
echo "</select>";
echo "<input type='hidden' id='change_file' name='change_file' value='$change_File'>";
echo "<input type='submit' id='submit' name='submit' value='select'>";
echo "</form>";
}
function deleteRecord($recordNumber, &$row_Count, &$change_Array) {
for ($J=$recordNumber; $J < $row_Count - 1; $J++) {
for($I=0; $I < 3; $I++) {
$change_Array[$J][$I] = $change_Array[$J + 1][$I];
}
}
unset($change_Array[$row_Count]);
$row_Count--;
}
209Chapter 6 ■ Data Objects
function saveChanges($row_Count,$change_Array,$change_File)
{
$changeFile = fopen($change_File, "w");
for($I=0; $I < $row_Count; $I++)
{
$writeString = $change_Array[$I][0] . " | " . $change_Array[$I][1] . " | " .
$change_Array[$I][2];
fwrite($changeFile, $writeString);
}
fclose($changeFile);
}
function delete_Process() {
$change_Array = load_Array();
deleteRecord($_GET['rn'], $row_Count, $change_Array);
saveChanges($row_Count,$change_Array,$change_File);
displayRecords($row_Count,$change_Array,$change_File);
}
function load_Array() {
$change_File = $_POST['change_file'];
$logFile = fopen($change_File, "r");
$row_Count = 0;
while(!feof($logFile)) {
$change_Array[$row_Count] = explode(' | ', fgets($logFile));
$row_Count++; }
$row_Count--;
fclose($logFile);
return $change_Array;
}
function display_Process() {
$change_Array = load_Array();
$row_Count = count($change_Array) -1;
displayRecords($row_Count, $change_Array, $_POST['change_file']);
}
function select_File_Process() {
$directory = "";
$files = glob($directory . "*change.log");
echo "<form id='file_select' name='file_select' method='post' action='readchangelog.php'>";
echo "<h3>Select a file to display</h3>";
echo "<select name='change_file' id='change_file'>";
foreach($files as $file) {
echo "<option value='$file'>$file</option>";
}
echo "</select>";
echo "<input type='submit' id='submit' name='submit' value='select'>";
echo "</form>";
}
function update_XML_File_Process() {
$change_Array = load_Array();
require_once("dog_datad.php");
$data_Changer = new dog_data();
$row_Count = count($change_Array) -1;
210Chapter 6 ■ Data Objects
for($I=0;$I < $row_Count; $I++) {
if($change_Array[$I][1] != "Delete") {
$temp = unserialize($change_Array[$I][2]);
} else {
$temp = (integer)$change_Array[$I][2];
}
$data_Changer->processRecords($change_Array[$I][1], $temp);
}
$data_Changer->setChangeLogFile($_POST['data_File']);
$data_Changer = NULL;
echo "Changes completed";
}
// main section
if(isset($_POST['data_File'])) {
update_XML_File_Process();
} else if(isset($_GET['rn'])) {
delete_Process();
} else if(isset($_POST['change_file'])) {
display_Process();
} else {
select_File_Process();
}
?>
JSON Backup and Recovery
What changes are needed to provide backup and recovery for JSON data instead of XML data? Actually,
no changes at all. As long as the changes from the first section of this chapter are implemented, the
displaychangelog program and the changes to the dog_data class will handle JSON in the same manner as
XML data.
MySQL Backup and Recovery
As you might be guessing, as long as the changes from the second section of this chapter are implemented,
no additional changes will be required for backup and recovery of MySQL data. However, you can take a
moment to look at an alternative way of handling MySQL data.
It is a common practice to create a SQL script file to execute against a database. A script file contains
all the SQL code necessary to update the database. Using this type of file will allow you to do proper INSERT,
UPDATE, and DELETE SQL commands instead of only an INSERT as previously shown. The previous example
required creating an INSERT command for every record in the associate array. This includes records that
were not changed. This would be inefficient for medium to large databases. You only need to update the
record that changed.
You can develop the scripting file from records in the associate array that have changed. You can use the
change log as the script file, as the SQL script lists all changes that have been requested. It can be rerun to fix
any corrupted data.
211Chapter 6 ■ Data Objects
For example, in the updateRecords method, you can create any required SQL UPDATE commands.
private function updateRecords($records_array)
{
$chge_log_file = date('mdYhis') . $this->change_log_file;
$chge_string = "";
foreach ($records_array as $records=>$records_value)
{
$this->dogs_array["dog"][$records] = $records_array[$records];
$chge_string .= "UPDATE Dogs ";
$chge_string .= "SET dog_name='" . $records_array[$records]['dog_name'] ."', ";
$chge_string .= "dog_weight='" . $records_array[$records]['dog_weight'] ."',
$chge_string .= "dog_color='" . $records_array[$records]['dog_color'] ."', ";
$chge_string .= "dog_breed='" . $records_array[$records]['dog_breed'] ."' ";
$chge_string .= "WHERE dog_id='" . $records_array[$records]['dog_id'] . "';\n";
}
$chge_log_file = date('mdYhis') . $this->change_log_file;
error_log($chge_string,3,$chge_log_file); // might exceed 120 chars
}
These changes would build all the update requirements from the associate array. Similar changes could
also be done to the insert and delete methods.
private function deleteRecord($recordNumber)
{
foreach ($this->dogs_array as $dogs=>&$dogs_value) {
for($J=$recordNumber; $J < count($dogs_value) -1; $J++) {
foreach ($dogs_value[$J] as $column => $column_value)
{
$dogs_value[$J][$column] = $dogs_value[$J + 1][$column];
}
}
unset ($dogs_value[count($dogs_value) -1]);
}
$dog_id = $this->dogs_array['dog'][$recordNumber]['dog_id'];
$chge_string = "DELETE FROM Dogs WHERE dog_id='" . $dog_id . "';\n";
$chge_log_file = date('mdYhis') . $this->change_log_file;
error_log($chge_string,3,$chge_log_file); // might exceed 120 chars
}
This example delete method deletes one record at a time. Thus, the delete string is built outside of
the loop. The update method allows for multiple records to be updated, so the update string is built inside
of the loop. The insert method will also require you to build the string inside the loop.
private function insertRecords($records_array)
{
$chge_string = "";
$dogs_array_size = count($this->dogs_array["dog"]);
for($I=0;$I< count($records_array);$I++)
{
212Chapter 6 ■ Data Objects
$this->dogs_array["dog"][$dogs_array_size + $I] = $records_array[$I];
$dog_id = rand(0,9999); // get a number between 0 and 9999
while (in_array($dog_id, $this->dogs_array, true)) // in array?
{ $dog_id = rand(0,9999); // if it is get another number
}
$chge_string .="INSERT INTO Dogs VALUES('";
$chge_string .= $dog_id . "', '" . $records_array[$I]['dog_name'] . "', '";
$chge_string .= $records_array[$I]['dog_weight'] . "', '";
$chge_string .= $records_array[$I]['dog_color'] . "', '";
$chge_string .= $records_array[$I]['dog_breed'] . "');";
}
$chge_log_file = date('mdYhis') . $this->change_log_file;
error_log($chge_string,3,$chge_log_file); // might exceed 120 chars
}
If you review the changeRecords method, a SQL WHERE clause was built using a property named dog_id.
In the XML and JSON examples you did not have this field. However, SQL UPDATE requires a where clause to
determine which record(s) to update. The property used needs to be unique to identify the exact record(s).
The only place the code must generate this dog_id is when a new record is created in the database (in the
insertRecords method). This can be done using the PHP rand method.
The PHP rand method produces random numbers. The first parameter is the starting number (0)
and the second parameter is the last number (9999). The size of this field is set to char(4) in the database,
which allows up to four characters. This would allow you up to 10,000 dogs. I am sure that will be more than
enough!
The while loop in the insertRecords method uses the PHP in_array method to determine if the
number is already in the dogs_array (which contains all the current records in the database). A third
parameter, which determines if a strict search (comparing data types) should occur, must be set to
produce reliable results with multidimensional associate arrays. If the number does exist, the logic continues
to generate a new random number until a unique one is found. The value is then placed in $dog_id, which
will be inserted into the database along with the other fields (dog_name, dog_weight, dog_color, and
dog_breed). Note: This code assumes that the Dogs table in the database has been created with the fields in
the order shown (dog_id, dog_name, dog_weight, dog_color, and dog_breed).
The change log (which is now also a SQL script file) would now contain statements similar to the
following:
INSERT INTO Dogs VALUES('2288', 'tester1', '19', 'Green', 'Lab');
UPDATE Dogs SET dog_name='tester1', dog_weight='19', dog_color='Green',
dog_breed='Lab' WHERE dog_id='0111';
UPDATE Dogs SET dog_name='tester2', dog_weight='19', dog_color='Green',
dog_breed='Lab' WHERE dog_id='1211';
DELETE FROM Dogs WHERE dog_id='1111';
This file can be run against the database when all changes have been logged. The destructor can now
execute this file (instead of removing the table and inserting all the records back into a new table).
$mysqli = new mysqli($server, $db_username, $db_password, $database);
if ($mysqli->connect_errno)
{
throw new Exception("MySQL connection error:" . $mysqli->connect_error);
}
213Chapter 6 ■ Data Objects
$chge_log_file = date('mdYhis') . $this->change_log_file;
$sql = explode(";",file_get_contents($chge_log_file));
foreach($sql as $query) {
If(!$mysqli->query($query))
{
throw new Exception("Dog Table Change Error: " . $mysqli->error);
}
}
The code for the destructor becomes simpler than in the original MySQL example. The destructor does
not need to format any SQL statements. It only needs to execute them. The method reads the change records
from the change log, splitting each via the ; at the end of each SQL command line. Each line is placed in the
array $sql. The logic then loops through the array and executes each statement via the query command. If
any of the SQL statements has a problem, an exception is thrown (which will also send an e-mail to support
personnel via the dog_interface program). An example program is available on the book’s web site.
Note: As stated, the MySQL examples are shown to help the reader see that the overall logic of the
dog_data class works well with all data types. Complete books are written on using PHP to interact with
databases. It is not the intent of this book to train the user to have complete knowledge of database
manipulation.
Do It
1.
The dog_data class creates a new log file every time it is run. This could cause a
lot of log files to be created in a very short period of time. Your mission is to either
update the readchangelog file (download it from the book’s web site) or to create
your own maintenance program. The code will ask the users for the number
of log files (and data files) to keep. The program will then keep the most recent
number of files requested. The glob method, as shown previously, can be used to
retrieve all the file names. The unlink method can be used to delete a file.
unlink($file);
2.
The MySQL examples shown now produce different contents in the change log
file. Download the readchangelog program from the book’s web site and make
any adjustments needed to the code to properly view and delete the change
log. Assuming that the database administrator has reversed the contents of the
database to the last valid set of data, adjust the program to execute the change
log selected against the database. Hint: Your completed program will have less
code than the example from the book’s web site.
Connecting the Data Tier
Now that a reliable, well tested, data class has been created, it is time to connect it to the business rules tier.
The Dog class will use the dog_data class to store the dog information in an XML file.
if (method_exists('dog_container', 'create_object')) {
$this->breedxml = $properties_array[4];
214Chapter 6 ■ Data Objects
$name_error = $this->set_dog_name($properties_array[0]) == TRUE ? 'TRUE,' : 'FALSE,';
$color_error = $this->set_dog_color($properties_array[2]) == TRUE ? 'TRUE,' : 'FALSE,';
$weight_error= $this->set_dog_weight($properties_array[3]) == TRUE ? 'TRUE' : 'FALSE';
$breed_error = $this->set_dog_breed($properties_array[1]) == TRUE ? 'TRUE,' : 'FALSE,';
$this->error_message = $name_error . $breed_error . $color_error . $weight_error;
$this->save_dog_data();
if(stristr($this->error_message, 'FALSE'))
{
throw new setException($this->error_message);
}
} else
{
exit;
}
The constructor of the dog class sets all the properties and throws an exception if there are problems. If
no problems exist, the information is saved (via save_dog_data), and the program closes (exit).
In order to keep the data tier independent of the business rules tier, dependency injection will be used
to discover the location and name of the dog_data class and to call the processRecords method from the
class. You will borrow the logic from Chapter 4. Actually, you can use the dog_container from Example 4-10
without any changes. If you don’t remember the details of this class, revisit Chapter 4.
The dog_container class includes the get_dog_application method, which uses the logic discussed
several times to search the dog application XML file for the name of the file needed (dog_data.php). The
set_app method allows you to pass the application type (dogdata) to search in get_dog_application. It
also includes the create_object class that will determine the class name (dog_data), make an instance of
the class, and pass the class (the address of the class in memory) back to the calling program. The class does
require that a clean_input function exist in the calling program. You don’t currently have one in the Dog
class. However, you can create a shell (an empty function) in the class to meet this requirement.
To use the container, you can use the logic that was in the dog_interface program to make an instance
of the container, find the location of dog_data, and make an instance of dog_data (without knowing the
class name).
function clean_input() { }
private function save_dog_data()
{
if ( file_exists("e5dog_container.php")) {
require_once("e5dog_container.php"); // use chapter 5 container w exception handling
} else {
throw new Exception("Dog container file missing or corrupt");
}
$container = new dog_container("dogdata"); // sets the tag name to look for in XML file
$properties_array = array("dogdata"); // not used but must be passed into create_object
$dog_data = $container->create_object($properties_array); // creates dog_data object
$method_array = get_class_methods($dog_data);
$last_position = count($method_array) - 1;
215Chapter 6 ■ Data Objects
$method_name = $method_array[$last_position];
$record_Array = array(array('dog_name'=>"$this->dog_name", 'dog_weight'=>
"$this->dog_weight", 'dog_color'=>"$this->dog_color", 'dog_breed'=>"$this->dog_breed"));
$dog_data->$method_name("Insert",$record_Array);
$dog_data = NULL;
}
The lines to accomplish this are the same as seen previously in the dog_interface; you create the
dog_container, find the location of the dogdata file, and create an instance of the dog_data class. The only
difference is that “dogdata” is passed in for the search. The PHP function get_class_methods is used to
create a list of methods in the dog_data class. The last method in the class is processRecords. The name
of this method is pulled and placed into $method_name. The record_Array is then built to be passed into
processRecords. The method is called, passing "Insert" and the record_Array. Finally, the dog_data
object is set to NULL, which causes the destructor to save the data.
This allows complete dependency injection. The dog object does not know the name of the dog_data
class, the location of the dog_data class, or the name of the method to call until it is determined by this code.
This creates a complete break between the data tier and the business rules tier, as required for
three-tier design.
Example 6-5. The dog.php file using dog_data.php to save data
<?php
class Dog
{
// ---------------------------------- Properties ------------------------------------------
private $dog_weight = 0;
private $dog_breed = "no breed";
private $dog_color = "no color";
private $dog_name = "no name";
private $error_message = "??";
private $breedxml = "";
// ---------------------------------- Constructor -----------------------------------------
function __construct($properties_array)
{
if (method_exists('dog_container', 'create_object')) {
$this->breedxml = $properties_array[4];
$name_error = $this->set_dog_name($properties_array[0]) == TRUE ? 'TRUE,' : 'FALSE,';
$color_error = $this->set_dog_color($properties_array[2]) == TRUE ? 'TRUE,' : 'FALSE,';
$weight_error= $this->set_dog_weight($properties_array[3]) == TRUE ? 'TRUE' : 'FALSE';
$breed_error = $this->set_dog_breed($properties_array[1]) == TRUE ? 'TRUE,' : 'FALSE,';
$this->error_message = $name_error . $breed_error . $color_error . $weight_error;
$this->save_dog_data();
if(stristr($this->error_message, 'FALSE'))
{
throw new setException($this->error_message);
} }
else
{ exit; }
}
216Chapter 6 ■ Data Objects
function clean_input() { }
private function save_dog_data()
{
if ( file_exists("e5dog_container.php")) {
require_once("e5dog_container.php"); // use chapter 5 container w exception
handling
} else {
throw new Exception("Dog container file missing or corrupt");
}
$container = new dog_container("dogdata"); // sets the tag name to look for in XML file
$properties_array = array("dogdata"); // not used but must be passed into create_object
$dog_data = $container->create_object($properties_array); // creates dog_data object
$method_array = get_class_methods($dog_data);
$last_position = count($method_array) - 1;
$method_name = $method_array[$last_position];
$record_Array = array(array('dog_name'=>"$this->dog_name", 'dog_weight'=>
"$this->dog_weight", 'dog_color'=>"$this->dog_color", 'dog_breed'=>"$this->dog_breed"));
$dog_data->$method_name("Insert",$record_Array);
$dog_data = NULL;
}
function set_dog_name($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 20) ? $this->dog_name = $value :
$this->error_message = FALSE;
return $this->error_message;
}
function set_dog_weight($value)
{
$error_message = TRUE;
(ctype_digit($value) && ($value > 0 && $value <= 120)) ? $this->dog_weight = $value :
$this->error_message = FALSE;
return $this->error_message; }
function set_dog_breed($value)
{
$error_message = TRUE;
($this->validator_breed($value) === TRUE) ? $this->dog_breed = $value :
$this->error_message = FALSE;
return $this->error_message; }
function set_dog_color($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 15) ? $this->dog_color = $value :
$this->error_message = FALSE;
return $this->error_message;
}
217Chapter 6 ■ Data Objects
// ----------------------------- Get Methods -----------------------------------------------
function get_dog_name()
{
return $this->dog_name;
}
function get_dog_weight()
{
return $this->dog_weight;
}
function get_dog_breed()
{
return $this->dog_breed;
}
function get_dog_color()
{
return $this->dog_color;
}
function get_properties()
{
return "$this->dog_name,$this->dog_weight,$this->dog_breed,$this->dog_color.";
}
// ------------------------------General Method---------------------------------------------
private function validator_breed($value)
{
$breed_file = simplexml:load_file($this->breedxml);
$xmlText = $breed_file->asXML();
if(stristr($xmlText, $value) === FALSE)
{
return FALSE;
}
else
{
return TRUE;
}
}
}
?>
The Dog application now has three complete tiers.
218Chapter 6 ■ Data Objects
Figure 6-3. Three-tier dog application
The interface tier contains the lab.html file and the dog_interface.php program. The business rules
tier includes the dog.php class and the get_breeds class. The dog_data class is in the data tier. Any requests
from the dog_interface program for communications with the business rules tier are handled by the dog_
container class. Any requests for communications with the data tier (from the business rules tier) are also
handled by the dog_container class. Access to the data tier is only available from or through the business
rules tier. Access to the interface tier only occurs from or through the business rules tier.
The interface tier does not know the location/name of any class or method in the business rules tier.
This information is discovered by using the dog_container. The business rules tier does not know the
location/name of any class or method in the data tier. This information is also discovered by using the
dog_container. This allows complete independence of each tier, which allows changes to occur in one tier
without requiring changes in the other two tiers.
Do It
1.
Download all the files for the dog application from this chapter. Adjust file names
in the dog_application XML file to discover how missing files are handled in
the application. Does the application handle these problems properly? Adjust
the dog_data XML file to include badly formed XML data. Run the application.
Does it handle these problems properly? Empty the dog_data XML file (except
for the dogs and dog tags). Run the application. Does it handle this situation
properly? For any instance that causes the application to error instead of raising
an exception, attempt to adjust the code to anticipate the problem and raise
an exception.
219Chapter 6 ■ Data Objects
Chapter Terms
Data Tierfile_get_contents
SimpleXML Data Modelsimplexml:load_string
Type castingJSON data
JSON Methodsassociative array
json_encodejson_decode
Keywordsnew line character
file_put_contentslibxml:user_internal_errors(true)
libxml:get_errorscount
$thisunset
Dynamic arraysreleasing an object
mysqli_connectmysqli_connect_errno
mysqli_fetch_assocmysqli_free_result
mysqli_closeSQL SELECT
SQL INSERTpolymorphism
Change log fileserialize
unserializebackup and recovery
preg_replaceregular expression
globembedded if then else
SQL UPDATESQL script file/log
SQL WHERErand
strict searchunlink
shelldependence injection
Chapter Questions and Projects
Multiple Choice
1.
2.
220
Which of the following describes type casting?
a.It’s rarely needed in PHP
b.It exists in most languages
c.It’s needed for serialized data
d.All of the above
Which of the following describes an associative array?
a.It has a key and value relationship (key->value)
b.It uses numerical subscripts
c.It does not have an index
d.A and BChapter 6 ■ Data Objects
3.
4.
5.
6.
7.
8.
9.
Which of the following is the newline character?
a.&
b..
c.;
d.None of these
Which of the following describes JSON data?
a.It has a similar format to arrays
b.It cannot only be used with JavaScript
c.It requires much more coding than when using XML data
d.It is more secure than XML data
Which of the following describes unlink?
a.It can be used to release a parameter of an array
b.It can be used to delete a file or directory
c.It can be used to split apart an array
d.None of these
Which of the following describes polymorphism?
a.The container that holds and secures an application
b.The ability to pass multiple data types into the same signature of a method
c.The ability to use the methods and properties of a parent class
d.None of these
Which of the following describes rand?
a.It can be used to produce a random number
b.The first parameter is the starting number
c.The second parameter is the last number
d.All of the above
When using in_array, strict search does which of the following?
a.It compares data types
b.It is the third parameter (set to true)
c.It should be used when searching associative arrays
d.All of these
Which of the following describes a shell method?
a.It contains no data
b.It has no signature
c.It includes JSON data
d.All of these
221Chapter 6 ■ Data Objects
10.
The data tier does which of the following?
a.Updates data
b.Returns data
c.Filters data
d.All of the above
True/False
1.Log files are important for successful recovery of information.
2.Data is serialized to convert the data type to string.
3.After updates have been completed, all backup copies of data can be destroyed.
4.Dependency injection is necessary to keep the tiers (interface, business rules,
and data) independent of each other.
5.SQL script files update all records including those that have not changed.
Short Answer/Essay
1.Explain the process used to correct data files that have been corrupted.
2.Why is data stored in a database usually more secure than data stored in a text
file?
3.Compare and contrast the methods used to update XML data to the methods
used to update MySQL data. Which is more efficient? Why?
4.When should an e-mail be sent to the system administrator when data is being
updated? What should this e-mail contain? What should it not contain? Why?
5.How can a system administrator determine which data file is the last non-
corrupted version?
Projects
1.Adjust the code from Chapter 4 project #1 or #2 to include backup and recovery
ability.
2.Create a complete storage (XML or JSON format) and a backup and recovery
system for one of the previous projects you have completed. The system should
include the ability for the users to limit the number of recovery files, the ability
to adjust contents of a selected file (update, insert, and delete), and the ability to
execute the file against the most recent valid data. When the process is complete,
any corrupted files should automatically be removed. The system should also
keep its own log file to indicate when changes have occurred.
Term Project
1.
222
Update the ABC Computer Parts Inventory program to include storage of the
data (XML or JSON format) and complete backup and recovery capabilities. The
application should include a change log to indicate any data changes. Additional
support programs should be included to allow for easy recovery of any corrupted
data. Your complete application should use logic similar to the examples shown
in this chapter.Chapter 7
Authentication
“(To Lisa) You got the brains and talent to go as far as you want and when you do, I’ll be
right there to borrow money.”
—Bart Simpson
Chapter Objectives/Student Learning Outcomes
After completing this chapter, the student will be able to:
•Define sessions and explain how they are used for authentication
•Create a PHP program that authenticates user logon
•Create a PHP program that registers users
•Create a PHP program that will allow users to change their passwords
•Create a PHP program that logs invalid login attempts
•Create a PHP program that will use current password encryption techniques
Verification and Sessions
No discussion of security would be complete without including user ID/password authentication. The
current version of PHP includes many techniques to assist developers in validating users. This chapter looks
at one of the more simplistic methods.
Due to the nature of immediate verification of login credentials, the authentication process directly
accesses the data source for validation (it does not pass through the business rules tier). Thus, the
authentication process is considered a separate tier that is placed on top of the application to provide access.
As you will see, only minor changes need to occur in the interface tier programs to restrict access. Most of
the coding needed is placed in the authentication tier.
In addition to authentication, levels of access can also be determined during the sign-in process. Not
every user needs full access to an application. Some users may only need read access, some may need write
access to only the information that pertains to them, and some (administrators) may need full access to the
complete application. Each part of the application needs to be able to determine the correct level of access
without requesting additional information from the user (beyond the original login to the application).
Electronic supplementary material The online version of this chapter (doi:10.1007/978-1-4842-1730-6_7)
contains supplementary material, which is available to authorized users.
© Steve Prettyman 2015
S. Prettyman, Learn PHP 7, DOI 10.1007/978-1-4842-1730-6_7
223Chapter 7 ■ Authentication
One login process must allow the users to verify all portions of the application. Each portion of the
application needs access to common properties (such as user ID and password) that have been set by the
authentication tier for verification of valid access and valid levels of access. PHP provides the ability to store
information for an application in server memory by declaring a session. A session is considered to include
the complete interaction of the user with the application (such as the complete processes of transferring
money from a saving account to a checking account). A session can be established as soon as the user signs
in to the application. The session can be closed after the user logs out of the system (or the application times
out, or is closed). When a session is closed, all properties stored in the memory of the server are removed by
the garbage collector.
While the session is active, properties can be stored and shared throughout the application. Using this
process, the user ID and password can be stored in session properties. Each part of the application can then
verify that the user has logged in by determining if there are values in the userid and password properties.
Before you look at the login authentication process, let’s look at how to determine if a user has logged
into the system. The examples in this chapter do not include verifications of security access levels. However,
the process to determine these levels would use similar code as shown in these examples.
Programming note—The session_start method call must be the first statement at the top
of the code. There must be no spaces or code between the <?php tag and session_start. The
session_start method produces an HTML header that would not be formed correctly if
any code exists before the method call.
<?php
session_start();
if ((!isset($_SESSION['username'])) || (!isset($_SESSION['password']))) {
echo "You must login to access the ABC Canine Shelter Reservation System";
echo "<p>";
echo "<a href='login.php'>Login</a> | <a href='register.php'>Create an account</a>";
echo "</p>";
}
else {
echo "<p>Welcome back, " . $_SESSION['username'] . "</p>";
}
?>
Each program in the interface tier (that the user can access) would include code similar to the previous
example. The session_start method, in this example, lets the operating system know that this program
is part of an existing session (which is declared in the authentication tier). Each session is identified by the
system using a uniquely generated ID. As long as the user (or system) has not closed the session, the session
ID will be attached to any program, called by the user, which includes the session_start method. This
allows the program to access all properties related to the current session.
The PHP isset method (in an if statement) can determine if values exist in the username and password
properties. If values do not exist, it indicates that the user has not been authenticated. Session properties are
retrieved (and set) using $_SESSION. In the previous example, if either of the properties is not set, the user is
provided links to the login page (login.php) or the register page (register.php). If both properties are set,
the user is welcomed to the system. The user has no choice but to log in to access the program. In addition,
as mentioned in previous chapters, for more secure programs, the IP address of the user’s machine, and the
calling program can be determined to provide extra assurance that the user is authorized.
224Chapter 7 ■ Authentication
Example 7-1. The lab.php file with user ID/password verification
<?php
session_start();
if ((!isset($_SESSION['username'])) || (!isset($_SESSION['password']))) {
echo "You must login to access the ABC Canine Shelter Reservation System";
echo "<p>";
echo "<a href='login.php'>Login</a> | <a href='register.php'>Create an account</a>";
echo "</p>";
}
else
{
echo "<p>Welcome back, " . $_SESSION['username'] . "</p>";
?>
<!DOCTYPE html>
<html lan="en">
<head>
<title>Dog Object</title>
<script src="get_breeds.js"></script>
<script src="validator.js"></script>
<style type="text/css">
#JS { display:none; }
</style>
<script>
function checkJS() {
document.getElementById('JS').style.display = "inline";
}
</script>
</head>
<body onload="checkJS();">
<h1>Dog Object Creater</h1>
<div id="JS">
<form method="post" action="e5adog_interface.php" onSubmit="return validate_input(this)">
<h2>Please complete ALL fields. Please note the required format of information.</h2>
Enter Your Dog's Name (max 20 characters, alphabetic) <input type="text" pattern="[a-zA-Z]*"
title="Up to 20 Alphabetic Characters" maxlength="20" name="dog_name" id="dog_name"
required/><br /><br />
Select Your Dog's Color:<br />
<input type="radio" name="dog_color" id="dog_color" value="Brown">Brown<br />
<input type="radio" name="dog_color" id="dog_color" value="Black">Black<br />
<input type="radio" name="dog_color" id="dog_color" value="Yellow">Yellow<br />
<input type="radio" name="dog_color" id="dog_color" value="White">White<br />
<input type="radio" name="dog_color" id="dog_color" value="Mixed" checked >Mixed<br /><br />
Enter Your Dog's Weight (numeric only) <input type="number" min="1" max="120" name="dog_weight"
id="dog_weight" required /><br /><br />
<script>
AjaxRequest('e5dog_interface.php');
</script>
225Chapter 7 ■ Authentication
<input type="hidden" name="dog_app" id="dog_app" value="dog" />
Select Your Dog's Breed <div id="AjaxResponse"></div><br />
<input type="submit" value="Click to create your dog" />
</form>
</div>
<noscript>
<div id="noJS">
<form method="post" action="e5adog_interface.php">
<h2>Please complete ALL fields. Please note the required format of information.</h2>
Enter Your Dog's Name (max 20 characters, alphabetic) <input type="text" pattern="[a-zA-Z ]*"
title="Up to 20 Alphabetic Characters" maxlength="20" name="dog_name" id="dog_name"
required/><br /><br />
Select Your Dog's Color:<br />
<input type="radio" name="dog_color" id="dog_color" value="Brown">Brown<br />
<input type="radio" name="dog_color" id="dog_color" value="Black">Black<br />
<input type="radio" name="dog_color" id="dog_color" value="Yellow">Yellow<br />
<input type="radio" name="dog_color" id="dog_color" value="White">White<br />
<input type="radio" name="dog_color" id="dog_color" value="Mixed" checked >Mixed<br /><br />
Enter Your Dog's Weight (numeric only) <input type="number" min="1" max="120" name="dog_
weight" id="dog_weight" required /><br /><br />
Enter Your Dog's Breed (max 35 characters, alphabetic) <input type="text" pattern="[a-zA-Z ]*"
title="Up to 15 Alphabetic Characters" maxlength="35" name="dog_breed" id="dog_breed"
required /><br />
<input type="hidden" name="dog_app" id="dog_app" value="dog" />
<input type="submit" value="Click to create your dog" />
</form>
</div>
</noscript>
</body>
</html>
<?php
}
?>
In Example 7-1, the verification code is placed at the top of the program. The else statement must
include all the code to execute if the user is signed into the system. Since the code for this program is HTML
(and CSS) code, the if statement must be wrapped around the existing code. The closing bracket (s) of the
else statement is shifted to the bottom of the code (after all HTML tags).
PHP allows you to close your PHP code (via ?>) and reopen your PHP code (via <?php) as many times
as required. In this example, the PHP code is closed at the top of the program (in the else statement) just
before the closing bracket. The PHP code is then reopened at the bottom of the code to include a single
closing bracket, which closes the PHP else statement. This wraps the else statement around all the existing
code. The users can now only access this section of the code if they are logged in.
Since PHP code is now included in the lab program, the file ending must be changed from .html to
.php. Otherwise the server would not execute the PHP code.
Now let’s look at how you can populate the session properties by creating a login program. First let’s
look at the HTML to request information from the users.
<form method="post" action="">
Username: <input type="text" pattern=".{8,}" title="Userid must contain eight or more
characters." name="username" id="username" required/><br />
226Chapter 7 ■ Authentication
Password: <input type="password" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
title="Password must contain at least one number, one uppercase and lowercase letter, and at
least 8 total characters." name="password" id="password" required /><br />
<input type="submit" value="Login">
</form>
HTML5 does not include a minimum length parameter. However, the pattern parameter can be used
(with regular expressions) to establish a minimum size. In the username tag in the previous example, the
pattern ".{8,}" requires at least eight characters be entered by the users. For password security, a more
complicated pattern is needed. In the password example, in addition to the minimum requirement of
eight characters, at least one number (?=.*\d), one uppercase letter (?=.*[A-Z]), and one lowercase letter
(?=.*[a-z]) are required.
Security and performance—The HTML filtering provided is used to inform the users of
any typos that may have occurred. In the login process you are not storing information;
you are comparing information to what has already been stored. You don’t have to be
concerned with any possible harmful information being passed into the text boxes. Any
harmful information would not match the valid information that’s stored. The user would
receive an invalid user ID/password message.
// validate process not shown
$_SESSION['username'] = $_POST['username'];
$_SESSION['password'] = $_POST['password'];
// Redirect the user to the home page
header("Location: http://www.asite.com/lab.php");
Assuming you have validated the information against a list of valid user IDs and passwords (you will
look at that process soon), you can pass the valid user ID and password information into session variables.
Then the PHP header method can be used to redirect the application to the next program to execute (lab.php).
As long as lab.php includes the session_start method (as shown previously), it will have access to the
session variables.
<?php
session_start();
if ((!isset($_POST['username'])) || (!isset($_POST['password'])))
{
?>
<form method="post" action="">
Username: <input type="text" pattern=".{8,}" title="Userid must contain eight or more
characters." name="username" id="username" required/><br />
Password: <input type="password" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
title="Password must contain at least one number, one uppercase and lowercase letter,
and at least 8 total characters."
name="password" id="password" required /><br />
<input type="submit" value="Login">
</form>
<?php
} else {
// validate process not shown
$_SESSION['username'] = $_POST['username'];
$_SESSION['password'] = $_POST['password'];
227Chapter 7 ■ Authentication
// Redirect the user to the home page
header("Location: http://www.asite.com/lab.php");
}
?>
Putting the pieces together requires an if statement to determine if the user has entered the user ID
and password. If the user has not done so, the HTML code to request them is displayed. If the information
has been entered (and is valid using the HTML5 pattern expressions shown) the else portion of the
statement will execute (storing the values in the session variables and calling the lab.php program). This
provides you with the basic shell of accepting the user ID and password, verifying they exist, and calling the
program in the interface tier if they do exist. Of course, you need to authenticate the user ID and password
before calling the program.
Programming note—The server variables PHP_AUTH_USER and PHP_AUTH_PW can be used for
user ID and password validation, instead of using session variables.
header('WWW-Authenticate: Basic realm="ABC Canine"');
header('HTTP/1.0 401 Unauthorized');
Unauthorized header messages can be created if the user has not entered a user ID/
password or a valid user ID/password. This will automatically cause the system to request
the user enter a user ID/password. This technique is pretty straightforward. However,
there have been some reports, in the past, of browsers not functioning properly with this
technique. Besides, creating your own technique allows you to design the login screen with
the same style as the rest of your web site.
For more information, visit:
http://php.net/manual/en/features.http-auth.php
$valid_useridpasswords = array ("sjohnson" => "N3working");
$valid_userids = array_keys($valid_useridpasswords);
$userid = $_SESSION['username'];
$password = $_SESSION['password'];
$valid = (in_array($userid, $valid_userids)) && ($password == $valid_useridpasswords[$userid]);
If($valid) { header("Location: http://www.asite.com/lab.php");}
There are several ways you can authenticate user IDs and passwords. If you are creating a system
that does not require user IDs and passwords to change, you could use arrays. In the previous example
the $valid_useridpasswords associate array contains the combination of valid user IDs and passwords.
The PHP method array_keys places all keys (in this example the user IDs) into a separate array ($valid_
userids). After the session variables have been placed in $userid and $password, the PHP in_array method
is used to determine if the correct combination of user ID and password exists. in_array determines if the
user ID exists in the array. Then the user ID is used as the subscript to pull the password from the valid_
useridpasswords array and compare it to the value in $password. If the user ID exists and the passwords
are the same, then everything is valid. $valid will contain TRUE. If either (or both) are not valid, $valid will
contain FALSE. If $valid is TRUE, the application redirects to the lab.php program.
Technically properties in a session are secured from any access outside the session. However, there
have been reported instances, in the past, of hacker programs breaking this security and accessing session
information. If the user ID and password, in this example, are stored in session variables and passed across
the Internet to another program, hackers might gain access to the information.
228Chapter 7 ■ Authentication
If the user ID and password are externally stored in a file or database, the information will also travel
outside the program. The program will no longer have control over the security of these items once they
reside in the file or database. This could allow hackers access to the information. Security, as mentioned, has
to be a team effort among the programmer, data administrator, and network administrator.
It is common practice to encrypt the password to reduce the chance that hackers will discover the
authentication information (or any other secure information). Many PHP books demonstrate the use of
the MD5 hash technique. However, over the last several years vulnerabilities have been discovered in this
encyption style.
PHP 5.5 included the method password_hash, which will be adjusted over time to use the most secure
encyption hashing techniques avaliable.
Programming note—Caution should be used when storing the encrypted version of the
password. The size of the resulting encryption will increase with new hash versions.
A size of 255 characters is likely to be large enough for the many years. The number of
milliseconds needed for this hash increases with the size and type of the encryption.
Advanced programmers may want to do some testing on their servers for time costs.
Visit http://php.net/manual/en/function.password-hash.php for more information.
Programming note—You cannot do a simple comparison with the hashed password
created by PHP’s password_hash method. The hash produced includes the encryption type,
a salt value, and the hashed password.
You only need to replace one line of code in the example to verify the password. You can replace
$valid = ((in_array($userid, $valid_userids)) && ($password == $valid_useridpasswords[$userid]));
with
$valid =( (in_array($userid, $valid_userids)) && (password_verify($password,
$valid_useridpasswords[$userid]));
If you placed the encypted password in the $valid_useridpasswords array, the validation technique
would not require any other changes. The PHP password_verify method will encrpt the password provided
by the user and compare it to the existing encyrpted password. If they match, it will return TRUE.
When using XML or JSON files, you can use the same logic used in the constructor for the dogdata.php
program from Chapter 6, to retrieve the valid user ID and password information. The only changes needed
are to the if statement, which determines the location of the user ID and password file, and to the last line in
the constructor to place the array produced to $valid_useridpasswords instead of dogs_array.
<users>
<user>
<userid>Fredfred</userid>
<password>$2y$10$VosI32FejL.bOMaCjGbBp.Jre6Ipa.tLYQrVqj9kiVpef5zZ25qQK</password>
</user>
<user>
<userid>Petepete</userid>
<password>$2y$10$FdbXxIVXmVOHtaBNxB8vzupRBJFCqUyOTJXrlpNdrL0HKQ/U.jFHO</password>
</user>
</users>
229Chapter 7 ■ Authentication
Assuming the XML is in a similar format as the dog data XML file (as shown), you can use similar logic
to retrieve the information.
$valid_useridpasswords = json_decode($json,TRUE);
$userid = $_POST['username'];
$password = $_POST['password'];
foreach($valid_useridpasswords as $users)
{
foreach($users as $user)
{
$hash = $user['password'];
if((in_array($userid, $user)) && (password_verify($password,$hash)))
{
$_SESSION['username'] = $userid;
$_SESSION['password'] = $hash;
header("Location: lab.php");
}
}
The array created using the json_decode method is in a similar format to the array created from the
dog_data XML file. It requires two foreach loops, one to loop through the “users” array, and the other to
loop through the “user” arrays. The in_array method can then be used to determine if the user ID exists
in the user array. If it does, the password is compared to the hashed password using the PHP method
password_verify. This method uses the first part of the hashed password to retrieve the information on the
encryption technique and the salt value. The salt value is an automatically generated value that is used to
produce the hashed password. If the passwords match, the user ID and hashed password ($hash) are saved
as session variables. The main program is then called (see Example 7-1).
■■Note In PHP 5.5, you could adjust the salt value. In PHP 7, this option was depreciated as it was deemed
an unnecessary use of system resources.
Example 7-2. The login.phpfile with XML user ID/password verification
<?php // same code as constructor from chapter 6 with some minor changes
session_start();
try {
$user_log_file = "user.log";
if ((isset($_POST['username'])) || (isset($_POST['password'])))
{
libxml:use_internal_errors(true);
$xmlDoc = new DOMDocument();
if ( file_exists("e7dog_applications.xml") )
{
$xmlDoc->load( 'e7dog_applications.xml' );
$searchNode = $xmlDoc->getElementsByTagName( "type" );
foreach( $searchNode as $searchNode )
{
$valueID = $searchNode->getAttribute('ID');
if($valueID == "UIDPASS") // changed value to UIDPASS
230Chapter 7 ■ Authentication
{
$xmlLocation = $searchNode->getElementsByTagName( "location" );
// change $this->dog_data_xml to dog_data_xml
$dog_data_xml = $xmlLocation->item(0)->nodeValue;
break;
}
}
}
else
{
throw new Exception("Dog applications xml file missing or corrupt");
}
$xmlfile = file_get_contents($dog_data_xml);
$xmlstring = simplexml:load_string($xmlfile);
if ($xmlstring === false) {
$errorString = "Failed loading XML: ";
foreach(libxml:get_errors() as $error) {
$errorString .= $error->message . " " ; }
throw new Exception($errorString); }
$json = json_encode($xmlstring);
// changed array name to $valid_useridpasswords
$valid_useridpasswords = json_decode($json,TRUE);
// ...... code to verify userid and password ....
$userid = $_POST['username'];
$password = $_POST['password'];
foreach($valid_useridpasswords as $users)
{
foreach($users as $user) {
$hash = $user['password'];
if((in_array($userid, $user)) && (password_verify($password,$hash))) {
$_SESSION['username'] = $userid;
$_SESSION['password'] = $password;
$login_string = date('mdYhis') . " | Login | " . $userid . "\n";
error_log($login_string,3,$user_log_file);
header("Location: e7lab.php");
} } } }
}
catch(Exception $e)
{
echo $e->getMessage();
}
// code below executes if the user has not logged in or if it is an invalid login.
?>
<form method="post" action="">
Userid must contain eight or more characters.<br/>
Password must contain at least one number, one uppercase and lowercase letter, and at least
8 total characters.<br />
Username: <input type="text" pattern=".{8,}" title="Userid must contain eight or more
characters." name="username" id="username" required/><br />
Password: <input type="password" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
title="Password must contain at least one number, one uppercase and lowercase letter, and at
least 8 total characters."
231Chapter 7 ■ Authentication
name="password" id="password" required /><br />
<input type="submit" value="Login">
</form>
In addtion to the code mentioned, Example 7-2 also includes a try catch block to catch the exceptions
thrown and a call to a user log file to record successful logs in to the system.
JSON Data
To use JSON data instead of XML data, Example 7-2 would only need to include the changes shown in
Chapter 6. The userid and password JSON data would also need to be formatted as shown.
{"user":
[
{"userid":"Fredfred","password":"$2y$10$VosI32FejL.bOMaCjGbBp.Jre6Ipa.tLYQrVqj9kiVpef5zZ25qQK"},
{"userid":"Petepete","password":"$2y$10$FdbXxIVXmVOHtaBNxB8vzupRBJFCqUyOTJXrlpNdrL0HKQ\/U.jFHO"}
] }
MySQL Data
It is more common and usually more secure to store user ID and password information in a database.
Databases can be secured using user IDs and passwords, which can also include levels of access (read only,
read, and write) to the information. Even with this level of security, the password should still be encrypted.
Very few minor changes are needed to the MySQL constructor example from Chapter 6 to accomplish
authentication.
$mysqli =mysqli_connect($server, $db_username, $db_password, $database);
if (mysqli_connect_errno())
{
throw new Exception("MySQL connection error: " . mysqli_connect_error());
}
$sql="SELECT * FROM Users"; // Change the table used
$result=mysqli_query($con,$sql);
If($result===null)
{
throw new Exception("No records retrieved from Database");
}
$valid_useridpasswords = mysqli_fetch_assoc($result); // change the array used
mysqli_free_result($result);
mysqli_close($con);
232Chapter 7 ■ Authentication
This example code will pull the information from a table in the database (Users) and place the
information in an associate array (via the mysqli_fetch_assoc method). If the fields in the table are the
same as the tag names from the XML file (userid and password), the associate array built will be similar to
the array built using the code from Example 7-2. All previous code "// ...... code to verify userid
and password ...." is replaced by the code shown here. No code below the statement should need
adjusting.
Do It
1.Create a conversion program to determine the encrypted version of a password
using the PHP method password_hash (see http://php.net/manual/en/
function.password-hash.php).
2.Download the example files from this section. Add XML records to the uidpass
file that could be used for access permissions (read only or read/write) and levels
(user or administrator). Test to verify that the new uidpass file works correctly
with the existing code. Make any necessary code changes to make it compatible.
3.Download the example files from this section. Add code to the program to limit
attempts to log in with a bad password to three. Record any invalid attempt to log
in (after three tries) in the user log.
Registration
In addition to authorizing user logons, most systems allow the users to create their own user IDs and
passwords. By default, the self-created IDs are given the lowest priorities. An administrator can then go in
and increase the level of privileges once the ID has been created. Some sites allow non-registered users
(users who are not logged in).
Non-registered users should only be given read-only access to non-privileged information. Non-
registered users are much more of a security risk because it would be difficult to determine their identity
during a security breach. PHP provides the ability to retrieve the user’s IP address using $_SERVER['REMOTE_
ADDR']. This might provide some ability to trace the user. However, many users use free public access points,
which generate random IP addresses. If the one of these points is used, it will be much more difficult to track
them down.
In addition, providing the opportunity for users to create user IDs and passwords allows the program to
gather additional information (such as name and e-mail) that can help with security, and also provide easy
ability to promote the web site to users of the site. The success rate of selling what is offered on the site will
be much higher to customers who are already familiar with the site. To encourage users to create user IDs
and passwords, the site should offer them some benefit (such as access to the help desk) that is not available
to visitors.
The registration page will, in many ways, work similarly to the login page. However, any valid user ID
or password entered will be stored (instead of compared). Because the application will be updating the list
of valid IDs, the application must validate the information before it is updated. You can use some of the
techniques that you used previously when validating the dog class properties. First, as the user enters a user
ID and password (which must pass the HTML5 validation shown previously), it is passed to a PHP program.
Even though it is considered to be secure inside a session, the information will travel from the HTML form to
the PHP code. The information should be validated again.
233Chapter 7 ■ Authentication
if ((isset($_POST['username'])) || (isset($_POST['password'])))
{
$userid = $_POST['username'];
$password = $_POST['password'];
if (!(preg_match("/^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$/", $password)) ||
(!(strlen($userid) >= 8)))
{
throw new Exception("Invalid Userid and/or Password Format");
}
else
This if statement uses the PHP function preg_match to determine if the format of the password
contains one uppercase letter, one lowercase letter, one number, and at least eight characters. Notice that
the regular expression format is the same as used with the HTML5 code (the order of the expression has
changed, but it still contains the same information). The PHP strlen method also checks the user ID to
determine that it has eight or more characters.
If either validation does not pass, the program raises an Exception. If both pass, the else part of the
statement executes to encrypt the password and store the information.
$password = password_hash($password, PASSWORD_DEFAULT);
$input = file_get_contents($dog_data_xml);
$find = "</users>";
$newupstring = "<user>\n<userid>" . $userid . "</userid>\n<password>" . $password;
$newupstring .= "</password>\n</user>\n</users>";
$find = preg_quote($find,'/');
$output = preg_replace("/^$find(\n|\$)/m","",$input);
$output = $output . $newupstring;
file_put_contents($dog_data_xml,$output);
$login_string = date('mdYhis') . " | New Userid | " . $userid . "\n";
error_log($login_string,3,$user_log_file);
header("Location: e7login.php");
Before inserting the password into the XML file, it must be encyrpted (hashed). The PHP method
password_hash will convert the password to the format shown previously.
Programming note—password_hash has many different options and configurations
available for the advanced developer. For more information,
visit http://php.net/manual/en/function.password-hash.php.
file_get_contents dumps the contents of the XML user ID/password file into $input. preg_quote
will place backslashes next to any special characters in $find (such as the backslash contained in /users) to
keep PHP from trying to interpret those characters as part of a regular expression. preg_replace will use the
regular expression /^$find(\n|\$)/m to search for </users> with and without (\n) at the end. Since records
in files are determined by the newline character, this will ensure that you find </users> at either the end of a
line in the file or as part of a line in the file. When </users> is found in the file (the contents of the file are in
$input), it is replaced by "" (empty string). preg_replace will also attempt to place backslashes in any string
existing in the second parameter (where the "" is currently located). If the $newupstring is placed in that
parameter, the encrypted password would be modified by preg_replace. This would cause the passwords to
not verify, even if the one entered by the user is correct.
234Chapter 7 ■ Authentication
Therefore, the contents of $newupstring (the new user info) are appended to $output. The $output
string is then used to replace all contents of the user ID/password XML file. Once this information has
been saved successfully, the user log is updated to indicate the creation of a new user ID, and the user is
redirected to the login screen to sign in to the application with the new user ID and password.
Alternatively, the previous process of loading the file into an associative array, updating the associative
array, and then loading the associate array back into the XML file could have been used. However, it would
have taken more code and is unnecessary because this process is only used once in the application. The
program will not make multiple attempts to update the user ID and password file with the same user.
Example 7-3. The registration.php file
<?php
session_start();
$user_log_file = "user.log";
try
{
if ((isset($_POST['username'])) || (isset($_POST['password'])))
{
$userid = $_POST['username'];
$password = $_POST['password'];
if (!(preg_match("/^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$/", $password)) ||
(!(strlen($userid) >= 8)))
{
throw new Exception("Invalid Userid and/or Password Format");
}
else
{
libxml:use_internal_errors(true);
$xmlDoc = new DOMDocument();
if ( file_exists("e7dog_applications.xml") )
{
$xmlDoc->load( 'e7dog_applications.xml' );
$searchNode = $xmlDoc->getElementsByTagName( "type" );
foreach( $searchNode as $searchNode )
{
$valueID = $searchNode->getAttribute('ID');
if($valueID == "UIDPASS")
{
$xmlLocation = $searchNode->getElementsByTagName( "location" );
$dog_data_xml = $xmlLocation->item(0)->nodeValue;
break;
}
}
}
else
{
throw new Exception("Dog applications xml file missing or corrupt");
}
} else {
throw new Exception("Dog applications xml file missing or corrupt");
}
235Chapter 7 ■ Authentication
$password = password_hash($password, PASSWORD_DEFAULT);
$input = file_get_contents($dog_data_xml);
$find = "</users>";
$newupstring = "<user>\n<userid>" . $userid . "</userid>\n<password>" . $password .
"</password>\n</user>\n</users>";
$find_q = preg_quote($find,'/');
$output = preg_replace("/^$find_q(\n|\$)/m",$newupstring,$input);
file_put_contents($dog_data_xml,$output);
$login_string = date('mdYhis') . " | New Userid | " . $userid . "\n";
error_log($login_string,3,$user_log_file);
header("Location: e7login.php");
} } }
catch(Exception $e)
{
echo $e->getMessage(); }
?>
<form method="post" action="">
Userid must contain eight or more characters.<br/>
Password must contain at least one number, one uppercase and lowercase letter, and at least
8 total characters.<br />
Username: <input type="text" pattern=".{8,}" title="Userid must contain eight or more
characters." name="username" id="username" required/><br />
Password: <input type="password" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
title="Password must contain at least one number, one uppercase and lowercase letter, and at
least 8 total characters."
name="password" id="password" required /><br />
<input type="submit" value="submit">
</form>
JSON Data
JSON data would require just a couple of slight changes.
{"user":
[
{"userid":"Fredfred","password":"$2y$10$VosI32FejL.bOMaCjGbBp.Jre6Ipa.tLYQrVqj9kiVpef5zZ25qQK"},
{"userid":"Petepete","password":"$2y$10$FdbXxIVXmVOHtaBNxB8vzupRBJFCqUyOTJXrlpNdrL0HKQ\/U.jFHO"}
] }
The data ends with a combination of ]}, which does not occur anywhere else. $find can be set to this
value ($set = "]}";). The $newupstring value can also be changed to:
$newupstring = ',{"userid":"' . $userid . '","password":"' . $password . '"}\n]}';
These two changes (along with the previous changes) would update a JSON file with a new
user ID/password combination.
236Chapter 7 ■ Authentication
MySQL Data
MySQL would require a few more changes. After the password is encyrpted using password_hash, the
database can be opened, the record inserted, and then the database can be closed.
$password = password_hash($password, PASSWORD_DEFAULT);
$mysqli =mysqli_connect($server, $db_username, $db_password, $database);
if (mysqli_connect_errno())
{
throw new Exception("MySQL connection error: " . mysqli_connect_error());
}
$sql="INSERT INTO Users (userid, password) VALUES('" . $userid . "','" . $password . "');";
$result=mysqli_query($con,$sql);
If($result===null)
{
throw new Exception("Userid/Password not added to Database");
}
mysqli_close($con);
$login_string = date('mdYhis') . " | New Userid | " . $userid . "\n";
error_log($login_string,3,$user_log_file);
header("Location: e7login.php");
Logging In
In addition to providing the users with the ability to create their own user IDs and passwords, an application
should also provide them the ability to change their passwords. The ability to provide a date limit to expire
passwords is very beneficial to increase security. Everytime the user logs on, a comparision can be made on
this value. If the current date is more than xx days older than the date saved, the user would be required to
change the password.
Since password sniffer programs will try to guess passwords, it is also a good idea to limit to the number
of attempts to sign in with the right user ID and password combination. This would reduce the chances that
a password sniffing program could generate the correct combination. It is important not allow a valid signin
for a period of time after the maximum amount of attempts have been made. Even though this is frustrating
to the user, it reduces the chances that a password sniffing program would discover the right combination.
If the program does not know that the attempts have timed out, it will receive invalid user ID/password
messages, even if it guessed the right combination during the timeout period. These adjustments will require
additional fields to the user ID/password file (or database).
<users>
<user>
<userid>Fredfred</userid>
<password>$2y$10$VosI32FejL.bOMaCjGbBp.Jre6Ipa.tLYQrVqj9kiVpef5zZ25qQK</password>
<datestamp>2015-09-03</datestamp>
<attempts>0</attempts>
<lastattempt>08052015044229</lastattempt>
<validattempt>08052015045431</validattempt>
</user>
237Chapter 7 ■ Authentication
<user>
<userid>Poppoppop</userid>
<password>$2y$10$C1jXhTl0myamuLKhZxK5m.4X4TVcdeFbeLSBIA7l4fx6tUnC8vrg6</password>
<datestamp>2015-06-04</datestamp>
<attempts>1</attempts>
<lastattempt>08062015113200</lastattempt>
<validattempt>08062015113038</validattempt>
</user>
</users>
The $newupstring can be adjusted in the registration.php program (Example 7-3) to add the
authentication fields.
$newupstring = "<user>\n<userid>" . $userid . "</userid>\n<password>" . $hashed_password .
"</password>\n";
$newupstring .= "<datestamp>" . date('Y-m-d', strtotime('+30 days')) . "</datestamp>\n";
$newupstring .= "<attempts>0</attempts>\n<lastattempt>" . date('mdYhis') . "</lastattempt>\n";
$newupstring .= "<validattempt>" . date('mdYhis') . "</validattempt>\n</user>\n</users>";
The PHP method strtotime will parse any standard date and time format and attempt to convert it
to the UNIX date time format (which PHP uses). In this example, the method provides the ability to add 30
days to the current date, which in turn will be used to determine if a password has expired. Alternatively, an
expired date (such as the day before the current date) could be placed in this field when user IDs are created
in bulk (such as populating student IDs in a course management system). This would force the users to
change the password the first time they sign in to the system. The expire date is stored in datestamp for use
when the user logs in to the system.
The attempts tag, in the example, will record how many times the user tries to sign in with a bad user
ID password combination (reset to zero when a valid login occurs). If the date and time in lastattempt are
in five minutes, and the value of attempts is 3 or greater, the user must wait until more than five minutes
has expired since the last attempt to log in. As with most login systems, even if the user logs in with valid
information, the last invalid login must be five or more minutes ago. The last valid login date and time is
also recorded in the validattempt tags. Although this is not used for authentication in this example, it is
important to keep track of all valid logins.
To keep the code as simple as possible in the main section of the program, the code that looks up the
location of the user ID and password file has been moved to the method retrieve_useridpasswordfile.
Saving the data in the XML file has also been moved to the method saveupfile. No changes (except for the
addition of more XML tags as mentioned previously) have occurred in the code for these methods.
Example 7-4. The login.php file with password timeout and three tries timeout
<?php
session_start();
$user_log_file = "user.log";
$passed = FALSE;
function saveupfile($dog_data_xml,$valid_useridpasswords)
{
$xmlstring = '<?xml version="1.0" encoding="UTF-8"?>';
$xmlstring .= "\n<users>\n";
foreach($valid_useridpasswords as $users)
{
foreach($users as $user)
238Chapter 7 ■ Authentication
{
$xmlstring .="<user>\n<userid>" . $user['userid'] . "</userid>\n";
$xmlstring .="<password>" . $user['password'] . "</password>\n";
$xmlstring .="<datestamp>" . $user['datestamp'] . "</datestamp>\n";
$xmlstring .= "<attempts>" . $user['attempts'] . "</attempts>\n";
$xmlstring .= "<lastattempt>" . $user['lastattempt'] . "</lastattempt>\n";
$xmlstring .= "<validattempt>" . $user['validattempt'] . "</validattempt>\n</user>\n";
}
}
$xmlstring .= "</users>\n";
$xmlstring .= "</users>\n";
$new_valid_data_file = preg_replace('/[0-9]+/', '', $dog_data_xml);
// remove the previous date and time if it exists
$oldxmldata = date('mdYhis') . $new_valid_data_file;
if (!rename($dog_data_xml, $oldxmldata))
{
throw new Exception("Backup file $oldxmldata could not be created.");
}
file_put_contents($new_valid_data_file,$xmlstring);
}
function retrieve_useridpasswordfile()
{
$xmlDoc = new DOMDocument();
if ( file_exists("e7dog_applications.xml") )
{
$xmlDoc->load( 'e7dog_applications.xml' );
$searchNode = $xmlDoc->getElementsByTagName( "type" );
foreach( $searchNode as $searchNode )
{
$valueID = $searchNode->getAttribute('ID');
if($valueID == "UIDPASS")
{
$xmlLocation = $searchNode->getElementsByTagName( "location" );
$dog_data_xml = $xmlLocation->item(0)->nodeValue;
break;
}
}
}
else
{
throw new Exception("Dog applications xml file missing or corrupt");
}
return $dog_data_xml;
}
try {
if ((isset($_POST['username'])) && (isset($_POST['password'])))
{
libxml:use_internal_errors(true);
$dog_data_xml = retrieve_useridpasswordfile();
$xmlfile = file_get_contents($dog_data_xml);
239Chapter 7 ■ Authentication
$xmlstring = simplexml:load_string($xmlfile);
if ($xmlstring === false) {
$errorString = "Failed loading XML: ";
foreach(libxml:get_errors() as $error) {
$errorString .= $error->message . " " ; }
throw new Exception($errorString); }
$json = json_encode($xmlstring);
$valid_useridpasswords = json_decode($json,TRUE);
$userid = $_POST['username'];
$password = $_POST['password'];
$I = 0;
$passed = FALSE;
foreach($valid_useridpasswords as $users)
{
foreach($users as $user)
{
if (in_array($userid, $user))
{
$hash = $user['password'];
$currenttime = strtotime(date('Y-m-d'));
$stamptime = strtotime($user['datestamp']);
if ($currenttime > $stamptime)
{
// password expired force password change
header("Location: e7changepassword.php");
}
if (($user['attempts'] < 3) || ( date('mdYhis', strtotime('-5 minutes')) >=
$user['lastattempt']))
{
$hash = $user['password'];
if(password_verify($password,$hash))
{
$passed = TRUE;
$valid_useridpasswords['user'][$I]['validattempt'] = date('mdYhis');
// shows last time successful login
$valid_useridpasswords['user'][$I]['attempts'] = 0;
// successful login resets to zero
$_SESSION['username'] = $userid;
$_SESSION['password'] = $password;
saveupfile($dog_data_xml,$valid_useridpasswords);
// save changes before header call
$login_string = date('mdYhis') . " | Login | " . $userid . "\n";
error_log($login_string,3,$user_log_file);
header("Location: e7lab.php");
}
else {
$valid_useridpasswords['user'][$I]['lastattempt'] = date('mdYhis');
// last attempted login
} } }
$I++;
} }
240Chapter 7 ■ Authentication
// drops to here if not valid password/userid or too many attempts
if (!$passed) {
$I--;
echo "Invalid Userid/Password";
$valid_useridpasswords['user'][$I]['attempts'] = $user['attempts'] + 1;
// add 1 to attempts
// if not successful must save the values
saveupfile($dog_data_xml,$valid_useridpasswords);
} } }
catch(Exception $e)
{
echo $e->getMessage(); }
?>
form method="post" action="">
Userid must contain eight or more characters.<br/>
Password must contain at least one number, one uppercase and lowercase letter, and at least
8 total characters.<br />
Username: <input type="text" pattern=".{8,}" title="Userid must contain eight or more
characters." name="username" id="username" required/><br />
Password: <input type="password" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
title="Password must contain at least one number, one uppercase and lowercase letter, and at
least 8 total characters."
name="password" id="password" required /><br />
<input type="submit" value="Login">
</form>
In Example 7-4, an if statement checks the current date/time with the date/time saved in datestamp.
If the current date/time is more than 30 days beyond the value in datestamp, the password change
(changepassword) program is called. The next if statement determines if the user has had fewer than three
invalid attempts to log in, and it has been more than five minutes since the last attempt. If this is the case, the
PHP method password_verify will compare the password entered by the user with the password contained
in the XML file. If the passwords match, the validattempts value will be updated with the date/time, the
attempts will be reset to 0, and the user ID and password will be saved in session variables. The changes to
the XML file are then saved. In addition, the user login is recorded in the log file. If the passwords do not
match, the lastattempt value is updated with the current date/time.
Since a valid login or an expired password will cause the application to redirect to a different program
with the PHP header method, the program will only drop to the last if statement if the user ID and
password combo is not valid, or if there have been too many attempts in five minutes. When this occurs,
the "invalid /password" message is displayed, and the number of attempts is increased by 1. The changes
to the XML file are then saved. The program will then continue to display the user ID and password boxes
with the "invalid userid/password" message. As noted, even a valid user ID/password combo that’s has
been entered in five minutes or three or more invalid entries (sequentially) is rejected.
241Chapter 7 ■ Authentication
JSON Data
JSON data would require some changes to accommodate the additional fields.
{"user":[
{"userid":"Fredfred","password":"$2y$10$VosI32FejL.bOMaCjGbBp.Jre6Ipa.tLYQrVqj9kiVpef5zZ25qQK",
"datestamp":"2015-09-03","attempts":"0","lastattempt":"08052015044229","validattempt":
"08052015045431"},
{"userid":"Poppoppop","password":"$2y$10$C1jXhTl0myamuLKhZxK5m.4X4TVcdeFbeLSBIA7l4fx6tUnC8vrg6",
"datestamp":"2015-09-04","attempts":"2","lastattempt":"08062015011347","validattempt":
"08062015113038"}
]}
The $newupstring would also require changes due to these new fields. The location of some of the code
would also move to methods, as mentioned earlier.
$newupstring = ',{"userid":"' . $user['userid'] . '","password":"' . $user['password'] . '","';
$newupstring .= 'datestamp":"' . $user['datestamp'] . '","attempts":"' . $user['attempts'] . "',"';
$newupstring .= 'lastattempt":"' . $user['lastattempt'] . '","validattempt":"' .
$user['validattempt'] .'"';
$newupstring .= '"}\n]}';
MySQL Data
MySQL login code requires the UPDATE statement (instead of an INSERT statement, as seen in the registration
code) to update any fields that have changed. In addition, the clean_input method from Chapter 4 should
to be used to remove any harmful PHP and SQL statements from the userid field. This will help reduce
the chance of SQL injection occuring, which could cause the SQL statement to change more than just the
required fields and record(s). For example, if the $user['userid'] field contained '*', all records would be
updated instead of just one record with a valid user ID.
The user ID could also be validated as existing in the database before executing the UPDATE statement.
This (assuming all data in the database is valid) would also reduce the chance of harmful changes.
In the following example, all possible files are updated at once. Alternatively, only those fields that
change could be updated when needed. However this would require more code and not necessarily be any
more efficient. Also, if the user ID is not validated as existing in the database beforehand, the SQL statement
will automatically not update the fields if userid is not in the database.
$userid = clean_input($user['userid']);
$sql ="UPDATE Users SET(datestamp='" . $user['datestamp'] . "',attempts='";
$sql .=$user['attempts'] . "',lastattempt='" . $user['lastattempt'] . "',";
$sql .="validattempt='" . $user['validattempt'] . "') WHERE userid='" . $userid . "';";
Notice that the UPDATE code does not include the password field in the WHERE statement. In this
example, some fields would be updated when the password is not valid, and some would be updated when
the password is valid. If the SQL statement is broken into multiple statements (at least one for valid user
ID/password and one for not valid user/password), then the WHERE statement for the valid information can
include both the user ID and password, and the statement for non-valid information can just include the
password. An example of a complete login, registration, and password-change application using a MySQL
database is included on the book’s web site under Chapter 7.
242Chapter 7 ■ Authentication
Change Password
The process to change a password will require verification of the current password and then saving the
new password. It will also require updating the date contained in the datestamp tag from the XML file. The
program code is very similar to the login program.
$userid = $_POST['username'];
$npassword = $_POST['password'];
$newpassword = password_hash($npassword, PASSWORD_DEFAULT);
$password = $_POST['oldpassword'];
$datestamp = date('Y-m-d', strtotime('+30 days'));
$I = 0;
$passed = FALSE;
// First a few properties are set for the userid, new userid, and the new datestamp.
$hash = $user['password'];
if(password_verify($password,$hash))
{
$passed = TRUE;
$valid_useridpasswords['user'][$I]['password'] = $newpassword;
$valid_useridpasswords['user'][$I]['datestamp'] = $datestamp;
$valid_useridpasswords['user'][$I]['attempts'] = 0;
saveupfile($dog_data_xml,$valid_useridpasswords); // save changes before header call
$login_string = date('mdYhis') . " | Password Changed | " . $userid . "\n";
error_log($login_string,3,$user_log_file);
header("Location: e7logina.php");
}
else
{
$valid_useridpasswords['user'][$I]['lastattempt'] = date('mdYhis'); // last attempted login
}
If the user ID and old password are authenticated correctly then the new password, datestamp, and
attempts properties are changed and updated in the XML file. Also an entry is placed in the log file. If the
password is not verified, an "invalid userid/password" message is displayed.
Example 7-5. The changepassword.php file
<?php
session_start();
$user_log_file = "user.log";
function saveupfile($dog_data_xml,$valid_useridpasswords)
{
$xmlstring = '<?xml version="1.0" encoding="UTF-8"?>';
$xmlstring .= "\n<users>\n";
foreach($valid_useridpasswords as $users)
{
foreach($users as $user)
{
$xmlstring .="<user>\n<userid>" . $user['userid'] . "</userid>\n";
$xmlstring .="<password>" . $user['password'] . "</password>\n";
$xmlstring .="<datestamp>" . $user['datestamp'] . "</datestamp>\n";
$xmlstring .= "<attempts>" . $user['attempts'] . "</attempts>\n";
243Chapter 7 ■ Authentication
$xmlstring .= "<lastattempt>" . $user['lastattempt'] . "</lastattempt>\n";
$xmlstring .= "<validattempt>" . $user['validattempt'] . "</validattempt>\n</user>\n";
}
}
$xmlstring .= "</users>\n";
new_valid_data_file = preg_replace('/[0-9]+/', '', $dog_data_xml);
// remove the previous date and time if it exists
$oldxmldata = date('mdYhis') . $new_valid_data_file;
if (!rename($dog_data_xml, $oldxmldata))
{
throw new Exception("Backup file $oldxmldata could not be created.");
file_put_contents($new_valid_data_file,$xmlstring); }
function retrieve_useridpasswordfile() {
$xmlDoc = new DOMDocument();
if ( file_exists("e7dog_applications.xml") )
{
$xmlDoc->load( 'e7dog_applications.xml' );
$searchNode = $xmlDoc->getElementsByTagName( "type" );
foreach( $searchNode as $searchNode )
{
$valueID = $searchNode->getAttribute('ID');
if($valueID == "UIDPASS")
{
$xmlLocation = $searchNode->getElementsByTagName( "location" );
$dog_data_xml = $xmlLocation->item(0)->nodeValue;
break;
}
}
}
else
{
throw new Exception("Dog applications xml file missing or corrupt");
}
return $dog_data_xml;
}
if (!(isset($_SESSION['message']))) {
// valid userid and password but password expired
echo $_SESSION['message'];
}
try {
if((isset($_POST['username'])) && (isset($_POST['oldpassword'])) && (isset($_
POST['password'])) && (isset($_POST['password_confirm'])))
{
libxml:use_internal_errors(true);
$dog_data_xml = retrieve_useridpasswordfile();
$xmlfile = file_get_contents($dog_data_xml);
$xmlstring = simplexml:load_string($xmlfile);
if ($xmlstring === false) {
$errorString = "Failed loading XML: ";
foreach(libxml:get_errors() as $error) {
$errorString .= $error->message . " " ; }
244
}Chapter 7 ■ Authentication
throw new Exception($errorString); }
$json = json_encode($xmlstring);
$valid_useridpasswords = json_decode($json,TRUE);
$userid = $_POST['username'];
$npassword = $_POST['password'];
$newpassword = password_hash($npassword, PASSWORD_DEFAULT);
$password = $_POST['oldpassword'];
$datestamp = date('Y-m-d', strtotime('+30 days'));
$I = 0;
$I = 0;
$passed = FALSE;
foreach($valid_useridpasswords as $users)
{
foreach($users as $user)
{
if (in_array($userid, $user))
{
$hash = $user['password'];
if(password_verify($password,$hash))
{
$passed = TRUE;
$valid_useridpasswords['user'][$I]['password'] = $newpassword;
$valid_useridpasswords['user'][$I]['datestamp'] = $datestamp;
$valid_useridpasswords['user'][$I]['attempts'] = 0;
saveupfile($dog_data_xml,$valid_useridpasswords);
// save changes before header call
$login_string = date('mdYhis') . " | Password Changed | " . $userid . "\n";
error_log($login_string,3,$user_log_file);
header("Location: e7login.php");
} }
$I++;
} }
// drops to here if not valid password/userid or too many attempts
if (!$passed){
echo "Invalid Userid/Password";
} } }
catch(Exception $e) {
echo $e->getMessage();
}
?>
<form method="post" action="">
Userid must contain eight or more characters.<br/>
Password must contain at least one number, one uppercase and lowercase letter, and at least
8 total characters.<br />
Username: <input type="text" pattern=".{8,}" title="Userid must contain eight or more
characters." name="username" id="username" required/><br />
Old Password: <input type="password" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
title="Password must contain at least one number, one uppercase and lowercase letter, and
at least 8 total characters." name="oldpassword" id="oldpassword" required /><br />
New Password: <input type="password" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
title="Password must contain at least one number, one uppercase and lowercase letter, and
at least 8 total characters." name="password" id="password" required /><br />
245Chapter 7 ■ Authentication
Confirm Password:<input name="password_confirm" required="required" type="password"
id="password_confirm" oninput="check(this)" />
<script language='javascript' type='text/javascript'>
function check(input) {
if (input.value != document.getElementById('password').value) {
input.setCustomValidity('Password Must be Matching.');
} else {
// input is valid -- reset the error message
input.setCustomValidity('');
}
}
</script>
<input type="submit" value="submit">
</form>
In addition to the PHP already explained, Example 7-5 also includes JavaScript code to verify the correct
format of the new password and the correct entry of the new password twice. A verification of the proper
user ID and password entries in the PHP code has not been included in the example. Since the information
is traveling over the Internet from the form to the PHP program, the user ID and password should also be
verified in the PHP program. That coding is left as an exercise for this section.
JSON Data
The only changes needed for the change password program to work with JSON data are indicated in the
previous JSON sections of this chapter.
MySQL Data
The UPDATE SQL statement needs to “set” the password property in the same structure as the other fields that
were changed in the previous MySQL section. A complete authentication program using MySQL is included
under Chapter 7 on the book’s web site.
Do It
246
1.Copy the example files for this section from the book’s web site. Adjust the
change password program to include PHP code that verifies the correct format of
the user ID, password, and new password.
2.Copy the example files for this chapter from the book’s web site. Adjust the
registration program to check for a duplicate user ID before attempting to insert a
new user ID/password combination. Hint: This can be done using the in_array
method. If the user ID exists, display a message back to the users.
3.Copy the example files for this section from the book’s web site. Adjust the
programs necessary to require the users to also enter their name, phone, and
e-mail when registering. Also make sure to change the other programs to keep
this information valid.Chapter 7 ■ Authentication
Chapter Terms
Authenticationsession
session_startisset
Session properties$_SESSION
Verification code.{8,}
?=.*\d?=.*[A-Z]
?=.*[a-z]header
array_keyspassword_hash
password_verifynon-registered users
$_SERVER['REMOTE_ADDR']registration page
preg_matchstrlen
file_get_contentspreg_quote
preg_replaceexpire passwords
Password sniffer programslimited number of attempts
Timeout periodstrtotime
SQL Injection
Chapter Questions and Projects
Multiple Choice
1.
2.
3.
4.
Authentication does which of the following?
a.Provides security for an application.
b.Verifies user IDs and passwords.
c.Should use encrypted passwords.
d.All of the above.
Sessions do which of the following?
a.Are created using the session_create method
b.Allow the sharing of information between programs
c.Don’t provide any security benefits
d.All of the above
Registration pages do which of the following?
a.Allow the users to create their own user IDs and passwords
b.Can be used to gather information about the users
c.Should encrypt the password before storing it
d.All of the above
Verification code does which of the following?
a.Uses session_start to attach the program to a current session
b.Verifies that a user has logged in
247Chapter 7 ■ Authentication
5.
c.Must be attached only to programs in the interface tier
d.All of the above
Which of these describes SQL injection?
a.The process of using an SQL statement to update a database
b.The process of inserting variables in a SQL statement for flexibility
c.Causes data to be corrupted
d.All of these
True/False
1.MD5 is the most up-to-date and secure encryption technique.
2.password_hash should be used to create an encrypted password.
3.Users should be notified that they have exceeded the maximum number of
attempts to enter a correct user ID and password.
4.An authentication system does not need to timeout passwords and force its users
to change their passwords when they time out.
5.preg_replace can be used with an encrypted password to ensure that PHP does
not interpret special characters as PHP commands.
Short Answer/Essay
1.Explain the techniques that can be used to reduce the chances that a password
sniffing program can discover the correct user ID and password combination.
2.Explain how sessions work. Include an explanation on how they can help secure
an application with user ID and password authentication.
3.What is SQL injection? How can it be avoided?
4.Why should passwords be encrypted? Explore the Internet and discover the latest
versions of encryption. Does the most current version of PHP use the newest
version of encryption?
Projects
1.Download log maintenance files from Chapter 6 or use your own maintenance
files that you created from Chapter 6. Use the techniques shown in this chapter to
secure these files with user ID and password authentication.
2.Download the files from this chapter. Update the files and programs so users
can request their passwords. A temporary password (new field in the XML file)
must randomly be created (use rand) and e-mailed to the users. The password
should have a quick expiration (one day or less). The user must be able to verify
other information entered via the registration page (security question, or other
personal info) to request the password. If the user signs in correctly with the
temporary password, the system should make the user change the password.
Term Project
1.
248
Update the ABC Computer Parts Inventory application to include user ID and
password authentication as shown in this chapter. Be sure to secure any log
maintenance programs related to the application.Chapter 8
Multifunctional Interfaces
“Hard work never killed anybody, but why take a chance.”
—Edgar Bergen (http://coolfunnyquotes.com)
Chapter Objectives/Student Learning Outcomes
After completing this chapter, the student will be able to:
•Create a complete PHP application that deletes, updates, and inserts data
•Create a professional look to a completed application using CSS
•Use JavaScript to accept and manipulate data from another program
•Secure all programs in an application requiring user IDs/passwords
•Populate HTML objects with values from a JSON object
•Create a PHP program that will use current password encryption techniques
The Complete Application
In this chapter, you will complete the development of the ABC Canine Shelter Reservation System. The
current version of the system allows the users to insert only one dog before requiring the them to log in
again to insert additional dogs. Also, the system does not allow users to update or delete dog information
that exists in the system. You have already completed most of the PHP code necessary to provide update
and delete ability in Chapter 6 (data objects). You now need to attach this portion of the data object
(dog_data) to the business rules tier (dog). In addition you need to make some changes to the interface tier
(dog_interface and lab) to call the update and delete methods and display the results. Most of the coding
needed (as you will soon see) will take place in the lab.php file. So you will start with those changes.
Data Handling Using JavaScript
The current lab.php file allows users to enter only dog information that will be inserted into the data storage
(XML, JSON, or MySQL). The interface needs to be modified to allow users to indicate what activity they
would like to accomplish (Insert, Update, or Delete). It also needs to allow users to pick a current dog if the
process involves updating or deletion. This should, hopefully, indicate that you will need a list box that is
populated with information on the dogs currently located in the shelter.
Electronic supplementary material The online version of this chapter (doi:10.1007/978-1-4842-1730-6_8)
contains supplementary material, which is available to authorized users.
© Steve Prettyman 2015
S. Prettyman, Learn PHP 7, DOI 10.1007/978-1-4842-1730-6_8
249Chapter 8 ■ Multifunctional Interfaces
You will look at the PHP changes necessary in later sections of this chapter. For now, let’s assume that
dog_interface (interface tier) will return this information, which was retrieved from dog_data (data tier) via
the dog methods (business rules tier). You will also assume that similar coding to the dog_breeds program
(Chapter 4) will be created to produce a dogs list box.
In addition, lab.php needs access to all the information from a particular dog that has been selected.
The code will need to place all the information in the dog_name and dog_weight text boxes, the dog_breeds
list box, and the dog_color radio buttons. You could accomplish this task in two ways. One is to allow the
users to select the dog from the list box and then recall the dog_interface program to request the particular
dog from the dog class, which in turn will request the information from the dog_data class. However, this
is requiring an additional, unnecessary, call across the Internet to request the information. Instead, you
can gather all the necessary information (dog_breed list box information, dogs list box information, and
complete information of all dogs in the current data storage) when the user first calls the lab.php interface.
You can use the current JavaScript AJAX code (Chapter 4) with just a couple of changes to retrieve all the
necessary information.
You must make sure that the user indicates what type of operation is requested (at least if it is an insert
or change/delete) before you populate the form objects (text boxes, list box, and radio button). You can
accomplish this by not displaying the form objects until a selection has been made. You can make a slight
adjustment to the combination of JavaScript code and CSS code, used in Chapter 4, to require the users to
select from a dogs list box before the form is displayed.
■■Note The process you are about to look at is a very common practice used in web applications. Many web
applications return data in an array, JSON, or XML format. The interface (in this example, lab.php) then can use
JavaScript to retrieve the information needed.
Programming note—Shopping carts use a similar technique. As the customers select items
to purchase, the items are placed in a data object (probably a JSON object) on the client
machine. When the customer begins the process of checking out, the data is transferred to
the server. This allows the customer to make changes that will not cause additional calls to
the server. Since the purchase information is not considered a security risk, this is usually a
safe procedure. Of course, this would not be a good way to handle credit card information.
Using the format shown in Figure 8-1, the user is forced to select NEW or a dog from list box before
proceeding. Once the user has made a choice, the HTML form can be displayed with the default values (for
an insert) or the current values for the dog selected. CSS code will initially turn the display of the buttons
(and the form) to "none". JavaScript code (which you will look at soon) will change the display of the correct
button(s) and the form to "inline" to display at the proper time.
250Chapter 8 ■ Multifunctional Interfaces
Figure 8-1. The lab.php file with dogs list box
Figure 8-2 demonstrates the results when the user selects NEW. The same defaults are provided as
shown in previous chapters. The only visual change is the text of the input button. The weakness of this
approach occurs when the users do not have JavaScript enabled. For this example, if JavaScript is not
enabled, you will require that all information be entered. You could request the individual dog information
from the dog_data class (via the Dog class). While this approach is not as efficient as the JavaScript approach
you are about to use, it is more customer friendly than requiring the entry of all the information.
251Chapter 8 ■ Multifunctional Interfaces
Figure 8-2. The lab.php file with NEW selected
Figure 8-3 displays the results when an existing dog has been selected. The list box displays the dog’s
name and its breed (to make it as unique as possible). In addition a dog ID could have also been provided to
identify the particular dog. When the dog is selected, the dog information (dog_name, dog_color, dog_weight,
and dog_breed) is populated into the form. The users then can update or delete the dog information.
252Chapter 8 ■ Multifunctional Interfaces
Figure 8-3. The lab.php file with a dog selected
■■Note As mentioned in previous chapters, the code provided in this example does not restrict duplicate
entries. Thus, in a live environment, an additional field (dog ID) will need to be used to make the dogs unique.
253Chapter 8 ■ Multifunctional Interfaces
Previously when an insert occurred, the system would display a message to indicate the change was
successful. The user was then required to reload the lab.php file if another change was required. You can
fix this problem by having the dog_interface program set a session property with the message to be
returned. The dog_interface can then call the lab.php file, which in turn can check to see if there is a
message to be displayed.
Figure 8-4. The lab.php file handling message from dog_interface
You will use a combination of PHP code, JavaScript code, and CSS code to create the desired results.
Let’s break it down.
<?php
session_start();
if ((!isset($_SESSION['username'])) || (!isset($_SESSION['password']))) {
echo "You must login to access the ABC Canine Shelter Reservation System";
echo "<p>";
echo "<a href='e8login.php'>Login</a> | <a href='e8register.php'>Create an account</a>";
echo "</p>";
}
else if(($_SERVER['HTTP_REFERER'] == 'http://127.0.0.1:8080/mysite/bgchapter8/ExampleFile8/
e8login.php') || ($_SERVER['HTTP_REFERER'] == 'http://127.0.0.1:8080/mysite/bgchapter8/
ExampleFile8/e8lab.php'))
{
if (isset($_SESSION['message'])) {
echo $_SESSION['message'];
}
else {
echo "<p>Welcome back, " . $_SESSION['username'] . "</p>";
}
?>
254Chapter 8 ■ Multifunctional Interfaces
The PHP code at the top of the lab program will now include an additional check to determine if a
message has been returned. While the if part of the statement will not require any changes, the else part
has a few additional changes. Note that the new if statement checks to see if the lab program has been
called by itself. The $_SERVER['HTTP_REFERER'] method returns lab.php as the calling program when
dog_interface uses the header method to recall lab.php. In addition, the same if statement also checks to
see if login.php has called lab. These are now the only two legitimate calls than can be made to the lab.php
program.
Another if statement in the else block checks to see if a $_SESSION['message'] has been returned
by using the isset method. If it has been returned, then lab.php was called by dog_interface, because
login does not return a $_SESSION['message']. The lab program now displays the message. If there is no
$_SESSION['message'], the welcome message is displayed.
Let’s now jump to the HTML code in lab.php. Then you’ll take a look at the CSS and JavaScript code.
<body onload="checkJS();">
<h1>ABC Canine Shelter Reservation System</h1>
<div id="JS">
<script>
AjaxRequest('e8dog_interface.php');
</script>
<h3>Pick the dog name and breed to change from the dropdown box, then click the
button.<br>For new dog information select 'NEW'.</h3>
Select 'NEW' or Dog's Name/Breed <div id="AjaxReturnValue"></div>
<input type="button" name="selected" id="selected" value="Click to select" onclick="process_
select()" /><br><br>
<div id="input_form">
<form method="post" action="e8dog_interface.php" onSubmit="return validate_input(this)">
<h3>Please note the required format of information.</h3>
<hr>
Enter Your Dog's Name (max 20 characters, alphabetic) <input type="text" pattern="[a-zA-Z]*"
title="Up to 20 Alphabetic Characters" maxlength="20" name="dog_name" id="dog_name"
required/><br /><br />
Select Your Dog's Color:<br />
<input type="radio" name="dog_color" id="dog_color" value="Brown">Brown<br />
<input type="radio" name="dog_color" id="dog_color" value="Black">Black<br />
<input type="radio" name="dog_color" id="dog_color" value="Yellow">Yellow<br />
<input type="radio" name="dog_color" id="dog_color" value="White">White<br />
<input type="radio" name="dog_color" id="dog_color" value="Mixed" checked >Mixed<br /><br />
Enter Your Dog's Weight (numeric only) <input type="number" min="1" max="120" name="dog_
weight" id="dog_weight" required /><br /><br />
<input type="hidden" name="dog_app" id="dog_app" value="dog" />
Select Your Dog's Breed <div id="AjaxResponse"></div><br />
<input type="hidden" name="index" id="index" value="-1"/>
<input type="submit" name="insert" id="insert" value="Click to create your dog info" />
<input type="submit" name="delete" id="delete" value="Click to remove your selected dog
info" />
<input type="submit" name="update" id="update" value="Click to update your selected dog
info" />
<hr>
</form>
</div>
</div>
255Chapter 8 ■ Multifunctional Interfaces
In addition to some minor display message changes, a new div tag with an ID of AjaxReturnValue has
been created to hold the dogs list box (which will provide the user a selection of dogs to choose). An HTML
button (not a Submit button) follows. When clicked, it will cause a JavaScript function (process_select) to
execute. Another div tag has been added which contains the HTML form. This form is to be hidden until the
user clicks the button.
CSS code (#input_form { display:none; }) is included at the top of the program to keep the form from
displaying. Additional CSS code also keeps the buttons from displaying. This code is very similar to the CSS
code to keep the non-JS form from displaying if the user does not have JavaScript activated in the browser.
At the bottom of the form, a hidden property (index) has been created to hold the index (from the dogs
array) of the dog selected. The initial value is set to -1. This property will be changed when the user selects a
dog. The original Submit button is replaced by three Submit buttons (one for insert, one for delete, and one
for update). Whichever button is clicked will cause a property to be created (insert, delete, or update) and
set to a value. The property name is the ID of the button, and the contents in the property are the contents
of the value attribute of the button selected. This will help dog_interface determine which type of changes
the user is requesting. These buttons are also included on the non-JavaScript enabled form. Remember,
in this example, non-JavaScript enabled browsers will be require users to enter all information needed to
successfully accomplish an insert, delete, or update.
Hopefully, the changes you just looked at are pretty understandable. You are now going to look at some
JavaScript code to handle this data. As mentioned, the manipulation of data by JavaScript is a common task
in web applications. While this is not a JavaScript book, it is important that any web applications developer
be familiar with JavaScript. I think you will see that the structure of the JavaScript language is similar to the
structure of the PHP language.
First you will look at the changes to the get_breeds.js file (from Chapter 4). The file is renamed to
getlists.js to reflect that it will now handle the getBreeds and dogs list boxes.
function HandleResponse(response)
{
var responsevalues = response.split('|');
document.getElementById('AjaxResponse').innerHTML = responsevalues[0];
document.getElementById('AjaxReturnValue').innerHTML = responsevalues[1];
obj = JSON.parse(responsevalues[2]);
}
All the code changes are in the HandleResponse method of the JavaScript file. Previously the values in
the response property (passed to the method) were directly passed into the div tag with the AjaxResponse
ID. At that point, only the list box code for the breeds was returned. Now the method will accept three types
of information (the breeds list box, the dogs list box, and the dogs array). To reduce the number of calls
to the web server, one AJAX call is made. It returns all the information into the response property. The
information will be separated by using the pipeline (|) symbol. Soon you will see that the formation of this
string will occur in the dog_interface program.
You will need to break the data in a similar way that you broke previous data using the PHP explode
method. In JavaScript, the split method will break a string into an array using a parameter provided (|). In
the example, this will create the array responsevalues. var creates this array as local to the method. It will be
destroyed, because it will no longer be needed, when the method closes (hits the } symbol). The array now
has three rows. The first row ([0]) contains the getBreeds list box code. The second row ([1]) contains the
dogs list box code. The third row (I bet you guessed that one) contains the complete dogs array.
256Chapter 8 ■ Multifunctional Interfaces
Security and performance—In this application, the dogs information is not highly sensitive.
Also, the information is displayed to the users. This allows the users to see and fix any
data that might have been corrupted. For more sensitive information, the array should be
declared using var to keep the data accessable only to the current method (function).
The subscripts (0, 1, and 2) can now be used to pull each part of the array and release it to the proper
place. responsevalues[0] is placed in AjaxResponse to display the getBreeds list. responsevalues[1] is
placed in AjaxReturnValue to display the dogs list box. The dogs array, since you won’t know yet which dog
the user has selected, will be placed in a JSON object (obj). As you have seen, JSON data includes named
indexes and values, which are very similar to associate arrays in PHP. The var statement is not used because
this object must be public and available to the complete application.
If you remember from previous chapters, arrays cannot be directly formatted into strings. Arrays
must be serialized. However, JSON data can also be passed in a string. You will soon see that the “array”
in responsevalues[3] has been formatted as JSON data by the dog_interface program. JavaScript’s
JSON.parse method has the ability to look at data and, if it is valid, transform it into a JSON object. This is
very similar to the PHP method json_encode.
Now let’s look at how you can populate the form when the user picks a dog from the dogs list box.
The JavaScript method process_select (called by the HTML button after the user picks from the dogs list)
has been placed at the top of the code in the lab.php file. It could have also been placed in its own JS file and
imported in the same way as the getlists.js file. This new method use the information contained in OBJ
(the JSON dogs object containing all the dogs) to populate the text boxes (dog_name and dog_weight), radio
buttons (dog_color), and list box (dog_breed) with the information for the dog the user selects in the list box.
function process_select() {
var colorbuttons = document.getElementsByName('dog_color');
First, all the color values from the radio buttons will be pulled from the HTML form and placed into an
array called colorbuttons using the JavaScript method getElementsByName. dog_color (the name of each
radio button) is passed into the method. This process will create an array of the radio buttons with the same
indexes as the radio button subscripts for the color. For instance, the 0 position of the array will now contain
brown, which is the first radio button displayed in the HTML form. This will allow you to set the proper color
radio button by referencing its position (such as colorbuttons[0] to set brown).
if(!(document.getElementById('dogs').value == -1))
{
index = document.getElementById('dogs').selectedIndex -1;
document.getElementById('index').value = index;
document.getElementById('dog_name').value = obj.dogs[index].dog_name;
document.getElementById('dog_weight').value = obj.dogs[index].dog_weight;
HTML list boxes include both text and values. The text is what the user sees; the value is what it
represents. This is very similar to PHP associative arrays—keys (indexes) and values. The if statement
checks the dogs array to determine its current value. If the value is -1, this indicates that the users did not
select anything, or they selected NEW. The JavaScript ! symbol works the same as the PHP ! symbol. The
symbol changes the if portion of the statement to execute when the value for 'dogs' is not -1. Thus, the
code will execute if the user has selected a dog from the dogs list box.
The selectedIndex property of a list box indicates the index selected by the user. However, the HTML
list box is numbered starting at 1. JavaScript arrays and JSON objects indexes start at 0. This causes the
selectedIndex to be one more than the position in a JavaScript array or JSON object. The code, in the
example, subtracts 1 to balance out the relationship. This value is placed in index. It is also saved in the
257Chapter 8 ■ Multifunctional Interfaces
hidden property (on the HTML form) with the same name (index). Since index is a property and not a div
tag, the JavaScript value property must be used to set the value of index.
obj is the JSON object (with all the dogs) that was created when the AJAX call occurred. Information
can be retrieved from a JSON object in a very similar way as PHP associative arrays. The obj object is similar
to the multidimensional dogs array shown in previous chapters. The top array is the dogs “array”. In the
dogs array are the “arrays” for each individual dog. These do not have an associated key name, but have a
numerical index. Each dog array contains the individual elements (dog_name, dog_color, dog_breed, and
dog_weight). The index property, set in the previous code line, contains the dog index selected by the user.
It will be used to pull the selected dog information from obj to populate the form objects.
Since you know the exact location of the data to be retrieved (in index), loops are not needed.
obj.dogs[index].dog_name uses the JSON object name (obj), the top array name (dogs), the number
of the dog array needed (index), and the name of the field required (dog_name) to access the required
information. Again, the format is similar to pulling information from a PHP associative array. The dog_name
and dog_weight values use this dot notation format to pull the information from the obj JSON object and
place it in the appropriate text box on the HTML form.
dog_color = obj.dogs[index].dog_color;
if(dog_color == "Brown")
{
colorbuttons[0].checked = true;
} else if (dog_color == "Black")
{
colorbuttons[1].checked = true;
} else if (dog_color == "Yellow")
{
colorbuttons[2].checked = true;
} else if (dog_color == "White")
{
colorbuttons[3].checked = true;
}
Setting the color requires a little more work. The dog_color is pulled from the obj object
(dog_color = obj.dogs[index].dog_color;) and placed into a property (dog_color). An if statement
is then used to determine what color exists in this property. (Yes, JavaScript has a case statement that you
could have also used). The if statement sets the checked property of the correct radio button to true,
causing the radio button to be selected. Notice that the default value ('mixed') is not included in the if
statement. If the dog is 'mixed', or somehow the color did not have a value in the object, there is no reason
to change from the default value ('mixed').
dog_breed = obj.dogs[index].dog_breed;
document.getElementById('dog_breed').value = dog_breed;
document.getElementById('update').style.display = "inline";
document.getElementById('delete').style.display = "inline";
document.getElementById('insert').style.display = "none";
}
258Chapter 8 ■ Multifunctional Interfaces
The breeds list box is set using the same code style as setting the text boxes. The value property sets the
list box text viewed by the users. The users can then change the value if desired. The "update" and "delete"
buttons are set to "inline" to be displayed. "Insert" is set to "none".
else
{
colorbuttons[4].checked = true;
document.getElementById('dog_name').value = "";
document.getElementById('dog_weight').value = "";
document.getElementById('dog_breed').value = "Select a dog breed";
document.getElementById('insert').style.display = "inline";
document.getElementById('update').style.display = "none";
document.getElementById('delete').style.display = "none";
}
The else portion of the if statement executes if the index is -1 (NEW is selected, or nothing was
selected). The defaults are set, as previously shown in other chapters, with the color set to 'mixed', the name
and weight text boxes being empty, and the breeds list box set to requesting the user to Select a dog breed.
The "insert" button is displayed (using "inline"). The other buttons are not displayed (using "none").
document.getElementById('input_form').style.display = "inline";
}
Finally, the display of the form itself (now called input_form') is set to 'inline', which will allow the
users to see the complete form and its values, as set in the previous code. Let’s take a look at the complete code.
Example 8-1. The getlists.js file
function AjaxRequest(value)
{
var xmlHttp = getXMLHttp();
xmlHttp.onreadystatechange = function()
{
if(xmlHttp.readyState == 4)
{
HandleResponse(xmlHttp.responseText);
}
}
xmlHttp.open("GET", value, true);
xmlHttp.send(null);
}
function HandleResponse(response)
{
var responsevalues = response.split('|');
document.getElementById('AjaxResponse').innerHTML = responsevalues[0];
document.getElementById('AjaxReturnValue').innerHTML = responsevalues[1];
obj = JSON.parse(responsevalues[2]);
}
259Chapter 8 ■ Multifunctional Interfaces
function getXMLHttp()
{
var xmlHttp;
try {
xmlHttp = new XMLHttpRequest();
}
catch(e)
{
//Internet Explorer is different than the others
Try {
xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
}
catch(e) {
try {
xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
}
catch(e)
{
alert("Old browser? Upgrade today so you can use AJAX!")
return false;
}
}
}
return xmlHttp;
}
Example 8-2. The lab.php file with update, insert, and delete
<?php
session_start();
if ((!isset($_SESSION['username'])) || (!isset($_SESSION['password']))) {
echo "You must login to access the ABC Canine Shelter Reservation System";
echo "<p>";
echo "<a href='elogin.php'>Login</a> | <a href='eregister.php'>Create an account</a>";
echo "</p>";
}
else if(($_SERVER['HTTP_REFERER'] == 'http://127.0.0.1:8080/mysite/bgchapter8/login.php') ||
($_SERVER['HTTP_REFERER'] == 'http://127.0.0.1:8080/mysite/bgchapter8/lab.php'))
{
if (isset($_SESSION['message']))
{
echo $_SESSION['message'];
}
else
{
echo "<p>Welcome back, " . $_SESSION['username'] . "</p>";
}
?>
260Chapter 8 ■ Multifunctional Interfaces
<!DOCTYPE html>
<html lan="en">
<head>
<title>ABC Canine Shelter Reservation System</title>
<script src="getlists.js"></script>
<script src="validator.js"></script>
<style type="text/css">
#JS { display:none; }
#insert {display: none; }
#delete {display: none; }
#update {display: none; }
#input_form { display:none; }
</style>
<script>
function checkJS() {
document.getElementById('JS').style.display = "inline"; }
function process_select() {
var colorbuttons = document.getElementsByName('dog_color');
if(!(document.getElementById('dogs').value == -1)) {
index = document.getElementById('dogs').selectedIndex -1;
document.getElementById('index').value = index;
document.getElementById('dog_name').value = obj.dogs[index].dog_name;
document.getElementById('dog_weight').value = obj.dogs[index].dog_weight;
dog_color = obj.dogs[index].dog_color;
if(dog_color == "Brown") {
colorbuttons[0].checked = true;
} else if (dog_color == "Black") {
colorbuttons[1].checked = true;
} else if (dog_color == "Yellow") {
colorbuttons[2].checked = true;
} else if (dog_color == "White") {
colorbuttons[3].checked = true;
}
dog_breed = obj.dogs[index].dog_breed;
document.getElementById('dog_breed').value = dog_breed;
document.getElementById('update').style.display = "inline";
document.getElementById('delete').style.display = "inline";
document.getElementById('insert').style.display = "none";
} else {
colorbuttons[4].checked = true;
document.getElementById('dog_name').value = "";
document.getElementById('dog_weight').value = "";
document.getElementById('dog_breed').value = "Select a dog breed";
document.getElementById('insert').style.display = "inline";
document.getElementById('update').style.display = "none";
document.getElementById('delete').style.display = "none";}
document.getElementById('input_form').style.display = "inline"; }
</script>
</head>
261Chapter 8 ■ Multifunctional Interfaces
<body onload="checkJS();">
<h1>ABC Canine Shelter Reservation System</h1>
<div id="JS">
<script>
AjaxRequest('e8dog_interface.php');
</script>
<h3>Pick the dog name and breed to change from the dropdown box, then click the
button.<br>For new dog information select 'NEW'.</h3>
Select 'NEW' or Dog's Name/Breed <div id="AjaxReturnValue"></div>
<input type="button" name="selected" id="selected" value="Click to select"
onclick="process_select()" /><br><br>
<div id="input_form">
<form method="post" action="dog_interface.php" onSubmit="return validate_input(this)">
<h3>Please note the required format of information.</h3>
<hr>
Enter Your Dog's Name (max 20 characters, alphabetic) <input type="text" pattern="[a-zA-Z]*"
title="Up to 20 Alphabetic Characters" maxlength="20" name="dog_name" id="dog_name"
required/><br /><br />
Select Your Dog's Color:<br />
<input type="radio" name="dog_color" id="dog_color" value="Brown">Brown<br />
<input type="radio" name="dog_color" id="dog_color" value="Black">Black<br />
<input type="radio" name="dog_color" id="dog_color" value="Yellow">Yellow<br />
<input type="radio" name="dog_color" id="dog_color" value="White">White<br />
<input type="radio" name="dog_color" id="dog_color" value="Mixed" checked >Mixed<br /><br />
Enter Your Dog's Weight (numeric only) <input type="number" min="1" max="120" name="dog_
weight" id="dog_weight" required /><br /><br />
<input type="hidden" name="dog_app" id="dog_app" value="dog" />
Select Your Dog's Breed <div id="AjaxResponse"></div><br />
<input type="hidden" name="index" id="index" value="-1"/>
<input type="submit" name="insert" id="insert" value="Click to create your dog info" />
<input type="submit" name="delete" id="delete" value="Click to remove your selected dog info" />
<input type="submit" name="update" id="update" value="Click to update your selected dog info" />
<hr>
</form>
</div>
</div>
<noscript>
<div id="noJS">
<form method="post" action="dog_interface.php">
<h3>For Updates please enter all fields. For Deletions enter at least the dog name and
breed. Then click the button.<br>For new dog information enter the requested information,
Then click the button.<br> Please note the required format of information.</h3>
Enter Your Dog's Name (max 20 characters, alphabetic) <input type="text" pattern="[a-zA-Z ]*"
title="Up to 20 Alphabetic Characters" maxlength="20" name="dog_name" id="dog_name"
required/><br /><br />
Select Your Dog's Color:<br />
<input type="radio" name="dog_color" id="dog_color" value="Brown">Brown<br />
<input type="radio" name="dog_color" id="dog_color" value="Black">Black<br />
<input type="radio" name="dog_color" id="dog_color" value="Yellow">Yellow<br />
<input type="radio" name="dog_color" id="dog_color" value="White">White<br />
<input type="radio" name="dog_color" id="dog_color" value="Mixed" checked >Mixed<br /><br />
262Chapter 8 ■ Multifunctional Interfaces
Enter Your Dog's Weight (numeric only) <input type="number" min="1" max="120" name="dog_
weight" id="dog_weight" required /><br /><br />
Enter Your Dog's Breed (max 35 characters, alphabetic) <input type="text" pattern="[a-zA-Z ]*"
title="Up to 15 Alphabetic Characters" maxlength="35" name="dog_breed" id="dog_breed"
required /><br />
<input type="hidden" name="dog_app" id="dog_app" value="dog" />
<input type="submit" name="input" id="input" value="Click to create your dog info" />
<input type="submit" name="delete" id="delete" value="Click to remove your selected dog info" />
<input type="submit" name="update" id="update" value="Click to update your selected dog info" />
</form>
</div>
</noscript>
</body>
</html>
The only change shown previously that was not mentioned previously is the removal of session_
destroy at the end of the code. Since you want the ability for dog_interface to recall lab.php, the session
needs to be active until the users complete the changes. You will create a logout routine that will close the
session later in this chapter.
Do It
1.Explain how PHP code can be used to replace the process that the JavaScript
code uses to display the list boxes, determine which dog was selected, and
populate the form objects with the information from the dog selected. This
process would be necessary for any browsers that do not have JavaScript
enabled. Hint: The PHP code will work in a very similar way to the JavaScript
code. What changes would be necessary to the dog_interface.php, dog.php,
and dog_data.php programs to accomplish this task?
2.Download the code for this section from the book’s web site. Adjust the code to
handle dog information that will include the following additional fields: dog_ID
(unique for each dog) and dog_gender. Assume that the dog_interface.php,
dog.php, and dog_data.php file will return these fields. You won’t be able to
completely test this assignment until you read about the changes to these programs.
Updating, Deleting, and Inserting in the Interface Tier
It’s time to look at the changes to the programs in the interface and business rules tiers. There are very few
required changes in the data tier, since previously the dog_data program was created to handle display,
update, insert, and deletion of dog information. Doing this ahead of time makes the total amount of changes
necessary to the other tiers much easier.
As mentioned throughout the book, the interface tier is responsible for formatting information for
display and for requesting or processing information from the business rules tier. The dog_interface
program should accept the dogs array information from the data tier and, if needed, format it for use in the
lab.php program. It should also accept the dogs information for the dogs list box, provide any format for it,
and send it to lab.php for display. In addition, dog_interface must accept requests from lab.php for insert,
update, and delete of dog information and pass these requests on to the data tier for processing. This may
sound like a lot, but as you will see, most of the coding already exists in these programs.
263Chapter 8 ■ Multifunctional Interfaces
First let’s look at passing the request for insert or update to the data tier.
$dog_color = clean_input($_POST['dog_color']);
$dog_weight = clean_input($_POST['dog_weight']);
$dog_index = clean_input($_POST['index']);
The lab.php file will be sending a property ('index') to dog_interface. This property will be accepted
and cleaned in the same manner as the other properties that are passed.
The type of information passed for a request to insert or update is almost exactly the same (all the dog
properties plus 'index'). Thus, the processes are very similar. You do need a way to indicate to the type of
request (update or insert).
if ((isset($_POST['insert'])) || (isset($_POST['update'])))
{
if (isset($_POST['insert']))
{
$insert = TRUE;
}
else
{
$insert = FALSE;
}
You can do this by creating a property. In this example, $insert will be set to TRUE if it is an insert
request and FALSE if it is an update request. If the request is an update or insert, the properties array must
be populated.
$properties_array = array($dog_name,$dog_breed,$dog_color,$dog_weight,$breedxml,$insert,$dog_index);
You can create the $properties_array as you have done in many examples before. Once created
it will be passed into an instance of the dog class. The only real changes are the addition of $insert and
$dog_index. The update procedure will use $dog_index to indicate which record to change. It will be set to
-1 (by lab.php) when there is an insert because all records are inserted at the end of the data. (You could
have used -1 as an indicator of an insert, instead of creating $Insert.)
$lab = $container->create_object($properties_array);
Using $container (which is an instance of dog_container already created in the code), the
create_object method creates an instance of the dog class and passes the property array into it. You will
make a slight change to the dog class, in a moment, to use the property array to determine if the insert or
update methods from dog_data should be called to complete the request.
$_SESSION['message'] = "Dog $dog_name Insert/Update was successful<br />";
264Chapter 8 ■ Multifunctional Interfaces
If everything was successful with the update, instead of using echo or print to display a message, the
program will set $_SESSION['message'] with the message, which will then be displayed by lab.php.
header("Location: lab.php");
The application is then redirected back to lab.php. lab.php will verify that is was called from
dog_interface and then display "Dog $dog_name Insert/Update was successful<br />" at the top of the
page. ($dog_name is replaced with the actual dog name.)
If the request is delete, a similar process occurs.
else if($_POST['delete'])
{
$properties_array = $dog_index;
The dog_data delete method only needs the position in the array to determine what to remove. Thus,
$properties_array is set to the value in $dog_index. Even though $properties_array is now a string and
not an array, the processRecords method in dog_data uses polymorphism to accept an array or a string.
This allows the code to be very similar to the update and insert code.
$lab = $container->create_object($properties_array);
$_SESSION['message'] = "Dog $dog_name Deletion was successful<br />";
header("Location: lab.php");
As seen with update and delete, $container (which is an instance of dog_container already created)
calls the create_object method to create an instance of the dog class and pass $properties_array (which
is really a string). If the delete is successful, $_SESSION['message'] is set with the delete message. Then the
lab.php program is called. lab.php will verify that dog_container called it and then display "Dog $dog_name
Deletion was successful<br />" at the top of the page. ($dog_name is replaced with the actual dog name.)
These are the only code changes needed in the dog_interface program in order to handle the request
to insert, update, or delete. dog_interface must also accept the dogs list box and complete dogs array from
the data tier to format and send to lab.php.
dog_interface must request the dogs array information by calling the display method in dog_data.php.
$container = NULL;
The container pointer, $container, can be reused after the request to return the breeds list has been
processed. By setting it to NULL, it will free up the current container (an instance of dog_container with
properties set for retrieving the breeds information).
$container = new dog_container("dog");
A new instance of the dog_container passes "dog" instead of "selectbox". This lets the container know
than an instance of the dog class will be created, not an instance of the breeds class.
$properties = "dog";
$lab = $container->create_object($properties);
265Chapter 8 ■ Multifunctional Interfaces
When an instance of the dog class is created by create_object, dog is again passed in to indicate that
an instance of the dog class is needed.
$container->set_app("dog");
$dog_app = $container->get_dog_application("dog");
$method_array = get_class_methods($lab);
$last_position = count($method_array) - 1;
$method_name = $method_array[$last_position];
$returned_array = $lab->$method_name("ALL");
The same code that was used to call the delete, insert, and update methods in dog_data is used to
call the display method. However, ALL is passed in instead of the properties array. ALL tells the dog_data
display method to return all the dog records. All the records that are returned by dog_data are dropped into
$return_array.
Now that the dog_interface has all the records (in $return_array), it can format the code to display
the dogs list box. The code used is similar to the code to create the breeds list box.
$resultstring = "<select name='dogs' id='dogs'>";
$resultstring = $resultstring . "<option value='-1' selected>NEW</option>";
The property $resultstring will hold all the code for the list box. First the HTML select tag is created
with an ID of 'dogs'. Then the first row of the list box is created for the user to select NEW if they want to
insert a new dog. Notice that the value for NEW is -1. That’s also the default value for the hidden property
'index' on the HTML form in lab.php. The code you looked at early in this chapter will determine that -1
is an indication to fill the HTML form objects with the default settings for the dog information. This is true
either if the user selects NEW or does not select anything in the dogs list box.
foreach ($returned_array as $column => $column_value)
{
$resultstring = $resultstring . "<option value='$column'>" . $column_value['dog_name'];
$resultstring .= “&nbsp;&nbsp;&nbsp;" . $column_value['dog_breed'] . "</option>";
}
$resultstring = $resultstring . "</select>";
A foreach loop will loop through the dogs array (contained in $returned_array) and build the
remaining rows of the list box using the dog_name and dog_breed from each of the dog entries in the array.
After all dogs have been placed in the list box, the list box is closed using the HTML </select> tag.
print $result . "|" . $resultstring . "|" . '{ "dogs" : ' . json_encode($returned_array) . "}";
lab.php expects to receive the breeds list box code in the first position, the dogs list box code in the
second position, and the complete dogs array in the third position. $result already contains the complete
breeds list box. $resultstring contains the new dogs list box. $return_array still contains all the dog
records. lab.php expects the outer array of the dogs array to be labeled as 'dogs'. The display method from
dog_data does not pass the outer array back. The previous code will create a dogs array that holds all the
individual dog arrays in it. Notice that the $return_array has been converted to JSON code when returned.
The JavaScript code in lab.php will verify that it is properly formatted JSON code when it is received.
Let’s look at the complete dog_interface program.
266Chapter 8 ■ Multifunctional Interfaces
Example 8-3. The dog_interface.php file with update, insert, and delete
<?php
session_start();
const USER_ERROR_LOG = "User_Errors.log";
const ERROR_LOG = "Errors.log";
function clean_input($value)
{
$value = htmlentities($value);
// Removes any html from the string and turns it into &lt; format
$value = strip_tags($value);
if (get_magic_quotes_gpc())
{
$value = stripslashes($value);
// Gets rid of unwanted slashes
}
$value = htmlentities($value);
// Removes any html from the string and turns it into &lt; format
$bad_chars = array( "{", "}", "(", ")", ";", ":", "<", ">", "/", "$" );
$value = str_ireplace($bad_chars,"",$value);
return $value;
}
class setException extends Exception {
public function errorMessage() {
list($name_error, $breed_error, $color_error, $weight_error) = explode(',',
$this->getMessage());
$name_error == 'TRUE' ? $eMessage = '' : $eMessage = 'Name update not successful<br/>';
$breed_error == 'TRUE' ? $eMessage .= '' : $eMessage .= 'Breed update not successful<br/>';
$color_error == 'TRUE' ? $eMessage .= '' : $eMessage .= 'Color update not successful<br/>';
$weight_error == 'TRUE' ? $eMessage .= '' : $eMessage .= 'Weight update not successful<br/>';
return $eMessage;
}
}
function get_dog_app_properties($lab)
{
print "Your dog's name is " . $lab->get_dog_name() . "<br/>";
print "Your dog weights " . $lab->get_dog_weight() . " lbs. <br />";
print "Your dog's breed is " . $lab->get_dog_breed() . "<br />";
print "Your dog's color is " . $lab->get_dog_color() . "<br />";
}
//----------------Main Section-------------------------------------
try {
if ( file_exists("e8dog_container.php"))
{
Require_once("e8dog_container.php");
}
else
{
throw new Exception("Dog container file missing or corrupt");
}
267Chapter 8 ■ Multifunctional Interfaces
if (isset($_POST['dog_app']))
{
if ((isset($_POST['dog_name'])) && (isset($_POST['dog_breed'])) && (isset($_POST['dog_
color'])) && (isset($_POST['dog_weight'])))
{
$container = new dog_container(clean_input($_POST['dog_app']));
$dog_name = clean_input(filter_input(INPUT_POST, "dog_name"));
$dog_breed = clean_input($_POST['dog_breed']);
$dog_color = clean_input($_POST['dog_color']);
$dog_weight = clean_input($_POST['dog_weight']);
$dog_index = clean_input($_POST['index']);
$breedxml = $container->get_dog_application("breeds");
if ((isset($_POST['insert'])) || (isset($_POST['update'])))
{
if (isset($_POST['insert']))
{
$insert = TRUE;
}
else
{
$insert = FALSE;
}
$properties_array = array($dog_name,$dog_breed,$dog_
color,$dog_weight,$breedxml,$insert,$dog_index);
$lab = $container->create_object($properties_array);
$_SESSION['message'] = "Dog $dog_name Insert/Update was
successful<br />";
header("Location: e8lab.php");
//print "Dog $dog_name Insert/Update was successful<br />";
//get_dog_app_properties($lab);
}
else
{
$insert = FALSE;
}
$properties_array = array($dog_name,$dog_breed,$dog_color,$dog_
weight,$breedxml,$insert,$dog_index);
$lab = $container->create_object($properties_array);
$_SESSION['message'] = "Dog $dog_name Insert/Update was successful<br />";
header("Location: e8lab.php");
//print "Dog $dog_name Insert/Update was successful<br />";
}
else if($_POST['delete'])
{
$properties_array = $dog_index;
$lab = $container->create_object($properties_array);
$_SESSION['message'] = "Dog $dog_name Deletion was successful<br />";
header("Location: e8lab.php");
268Chapter 8 ■ Multifunctional Interfaces
//print "Dog $dog_name Deletion was successful<br />";
}
}
else
{
print "<p>Missing or invalid parameters. Please go back to the dog.php page to enter
valid information.<br />";
print "<a href='e8lab.php'>Dog Creation Page</a>";
}
}
else // breeds select box
{
$container = new dog_container("selectbox");
$properties_array = array("selectbox");
$lab = $container->create_object($properties_array);
$container->set_app("breeds");
$dog_app = $container->get_dog_application("breeds");
$method_array = get_class_methods($lab);
$last_position = count($method_array) - 1;
$container = NULL;
$result = $lab->$method_name($dog_app);
$container = NULL;
// read dog_data array
$container = new dog_container("dog");
$properties = "dog";
$lab = $container->create_object($properties);
$container->set_app("dog");
$dog_app = $container->get_dog_application("dog");
$method_array = get_class_methods($lab);
$last_position = count($method_array) - 1;
$method_name = $method_array[$last_position];
// return dogs from data
$returned_array = $lab->$method_name("ALL");
// format dogs list box
$resultstring = "<select name='dogs' id='dogs'>";
$resultstring = $resultstring . "<option value='-1' selected>NEW</option>";
foreach ($returned_array as $column => $column_value)
{
$resultstring = $resultstring . "<option value='$column'>" . $column_value['dog_name'] .
"&nbsp;&nbsp;&nbsp;" ;
$resultstring = $resultstring . $column_value['dog_breed'] . "</option>";
}
$resultstring = $resultstring . "</select>";
print $result . "|" . $resultstring . "|" . '{ "dogs" : ' . json_encode($returned_
array) . "}";
}
}
269Chapter 8 ■ Multifunctional Interfaces
catch(setException $e)
{
echo $e->errorMessage(); // displays to the user
$date = date('m.d.Y h:i:s');
$errormessage = $e->errorMessage();
$eMessage = $date . " | User Error | " . $errormessage . "\n";
error_log($eMessage,3,USER_ERROR_LOG); // writes message to user error log file
}
catch(Exception $e)
{
echo "The system is currently unavailable. Please try again later."; // displays
message to the user
$date = date('m.d.Y h:i:s');
$eMessage = $date . " | System Error | " . $e->getMessage() . " | " . $e->getFile()
. " | ". $e->getLine() . "\n";
error_log($eMessage,3,ERROR_LOG); // writes message to error log file
error_log("Date/Time: $date - Serious System Problems with Dog Application.
Check error log for details", 1, "noone@helpme.com", "Subject: Dog Application
Error \nFrom: System Log <systemlog@helpme.com>" . "\r\n");
// e-mails personnel to alert them of a system problem
}
?>
Do It
1.Download the code for this section from the book’s web site. The example code
(Example 6-3) could be broken into several methods to handle the creation of
the list boxes and the dogs array. Create methods and move the code in these
methods to process this information. Call the methods from the previous
location of the code.
2.Download the code for this section from the book’s web site. Adjust the code
to handle dog information that will include the following additional fields:
dog_ID (unique for each dog) and dog_gender. Assume that the dog.php and
dog_data.php files will return these fields. You won’t be able to completely test
this assignment until you read about the changes to these programs. Note: If you
did not previously complete the earlier Do It, complete that assignment along
with this one.
Updating, Deleting, and Inserting in the Business Rules Tier
You are getting very close to completing the ABC Canine Shelter Reservation System. A few changes need
to be made to the Dog class to determine why the class was called (insert, delete, or update). Then the
information can be passed to the correct method in the dog_data class. As mentioned, no changes will be
needed to the dog_data class, as the methods for insert, update, and delete already exist. Also, the dog
class must retrieve all the dog records from dog_data to send to the dog_interface.
270Chapter 8 ■ Multifunctional Interfaces
<?php
class Dog
{
// ----------------------------------------- Properties ------------------------------------
private $dog_weight = 0;
private $dog_breed = "no breed";
private $dog_color = "no color";
private $dog_name = "no name";
private $error_message = "??";
private $breedxml = "";
private $insert = FALSE;
private $index = -1;
At the top of the Dog class properties, $insert and $index are created to hold the values passed from
the properties_array by the dog_interface program. $index is initially set to -1, indicating the default of
assuming that the user either selected NEW or did not select a dog from the dogs list box (in lab.php).
if((is_bool($properties_array[5])) && ($properties_array[6] > -1))
{ // confirms true or false and valid index or takes default
$this->insert = $properties_array[5];
$this->index = $properties_array[6];
}
$this->change_dog_data("Insert/Update");
}
if(is_numeric($properties_array))
{
// confirms valid index don't delete if not valid
$this->index = $properties_array;
$this->change_dog_data("Delete");
}
In the constructor, after the dog values (dog_name, dog_breed, dog_weight, and dog_color) have been
validated, the insert and index values also need to be validated. The if statement shown uses the PHP method
is_bool to determine if the value in $properties_array[5] is TRUE or FALSE. $properties_array[5] is
the location of the value from the insert property. (It’s set to TRUE if it is an insert and set to FALSE if it is an
Update). The if statement also determines if the value in $properties_array[6] is greater than -1. A value
greater than -1 indicates an update or deletion. A value of -1 indicates an insertion request. If valid, the
values are placed into $this->insert and $this->index. Then the private method called change_dog_data
is called passing in “insert/update”.
The next if statement uses the PHP method is_numeric to determine if $properties_array is
not actually an array and that it contains a number. If this is true, the index of the dog to be removed has
been passed. If this is the case, then $property_array (containing the index to be deleted) is placed in
$this->index and the private method called change_dog_data is called passing in “delete”.
private function change_dog_data($type)
{
if ( file_exists("e8dog_container.php")) {
require_once("e8dog_container.php"); // use chapter 5 container w exception handling
} else
{
throw new Exception("Dog container file missing or corrupt");
}
271Chapter 8 ■ Multifunctional Interfaces
$container = new dog_container("dogdata"); // sets the tag name to look for in XML file
$properties_array = array("dogdata"); // not used but must be passed into create_object
$dog_data = $container->create_object($properties_array); // creates dog_data object
The new change_dog_data method (called in the previous code) will use code very similar to the
display_dog_data method shown in a previous chapter. First the method verifies that the dog_container
exists. If the container exists, an instance of the container ($container) is created passing "dogdata" which
tells the container that this request will be using the dogs XML file. Next $properties_array is created
with a simple array containing "dogdata". This array will not actually be used. However, the dog_data class
requires that something be passed into the constructor. An instance of dog_data ($dog_data) is now created
using the create_object method of the container.
$method_array = get_class_methods($dog_data);
$last_position = count($method_array) - 1;
$method_name = $method_array[$last_position];
As seen in previous code, the change_dog_data method uses the PHP get_class_methods to create
an array of methods contained in the dog_data object ($dog_data). The last method in dog_data is the
processRecords method, which uses a case statement to call the correct private method.
if (($this->index > -1) && ($type == "Delete"))
{
$record_Array = $this->index;
$dog_data->$method_name("Delete",$record_Array);
}
If the index is greater than -1 and the type is "delete" then the change_dog_data method calls the
processRecords method of the dog_data object and passes "delete" and the index to be deleted.
else if (($this->index == -1) && ($type == "Insert/Update"))
{
$record_Array = array(array('dog_name'=>"$this->dog_name", 'dog_weight'=>"$this->
dog_weight", 'dog_color'=>"$this->dog_color", 'dog_breed'=>"$this->dog_breed"));
$dog_data->$method_name("Insert",$record_Array);
}
If the index is -1 and the type is "insert/update" then the user has requested an “insert”. An array
is created containing all the dog properties (dog_name, dog_weight, dog_color, and dog_breed). Then
“insert” and the array are passed into the processRecords method of the dog_object.
else if ($type == "Insert/Update")
{
$record_Array = array($this->index => array('dog_name'=>"$this->dog_name",
'dog_weight'=>"$this->dog_weight", 'dog_color'=>"$this->dog_color",
'dog_breed'=>"$this->dog_breed"));
$dog_data->$method_name("Update",$record_Array);
}
$dog_data = NULL;
}
272Chapter 8 ■ Multifunctional Interfaces
If the index is not -1 and the type is "insert/update", then the user has requested an update of
information. The same array as shown with an insert is created, with one exception. The index of the array
(array($this->index => ) is set to the index of the record to be updated. The array and “update” are then
passed to the processRecords method of the dog_data object.
After the record has been inserted, updated, or deleted, the dog_data object ($dog_data) is set to NULL.
As stated in previous chapters, the dog_data object first updates the associate array, which contains each
dog’s information. When the destructor of the dog_data object is called, the information is then updated to
the dog_data XML file. Setting $dog_data to NULL releases the dog_data object, which calls its destructor.
That completes all the changes to the business rules tier. Let’s put it all together.
Example 8-4. The dog.php file with update, insert, and delete
<?php
class Dog
{
// ----------------------------------------- Properties ------------------------------------
private $dog_weight = 0;
private $dog_breed = "no breed";
private $dog_color = "no color";
private $dog_name = "no name";
private $error_message = "??";
private $breedxml = "";
private $insert = FALSE;
private $index = -1;
// ---------------------------------- Constructor ------------------------------------------
function __construct($properties_array)
{
if (method_exists('dog_container', 'create_object')) {
if (is_array($properties_array)) {
$this->breedxml = $properties_array[4];
$name_error = $this->set_dog_name($properties_array[0]) == TRUE ? 'TRUE,' : 'FALSE,';
$color_error = $this->set_dog_color($properties_array[2]) == TRUE ? 'TRUE,' : 'FALSE,';
$weight_error= $this->set_dog_weight($properties_array[3]) == TRUE ? 'TRUE' : 'FALSE';
$breed_error = $this->set_dog_breed($properties_array[1]) == TRUE ? 'TRUE,' : 'FALSE,';
$this->error_message = $name_error . $breed_error . $color_error . $weight_error;
if(stristr($this->error_message, 'FALSE'))
{
throw new setException($this->error_message);
}
if((is_bool($properties_array[5])) && ($properties_array[6] > -1))
{ // confirms true or false and valid index or takes default
$this->insert = $properties_array[5];
$this->index = $properties_array[6];
}
$this->change_dog_data("Insert/Update");
}
if(is_numeric($properties_array))
{
// confirms valid index don't delete if not valid
$this->index = $properties_array;
$this->change_dog_data("Delete");
}
}
273Chapter 8 ■ Multifunctional Interfaces
else
{
exit;
}
}
function clean_input() { }
function set_dog_name($value)
{
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 20) ? $this->dog_name = $value : $this->error_
message = FALSE;
return $this->error_message;
}
function set_dog_weight($value)
{
$error_message = TRUE;
(ctype_digit($value) && ($value > 0 && $value <= 120)) ? $this->dog_weight = $value : $this-
>error_message = FALSE;
return $this->error_message;
}
function set_dog_breed($value)
{
$error_message = TRUE;
($this->validator_breed($value) === TRUE) ? $this->dog_breed = $value : $this->error_message = FALSE;
return $this->error_message;
}
function set_dog_color($value){
$error_message = TRUE;
(ctype_alpha($value) && strlen($value) <= 15) ? $this->dog_color = $value : $this->error_
message = FALSE;
return $this->error_message; }
/ -------------------------------- Get Methods ---------------------------------------------
function get_dog_name()
{
return $this->dog_name;
}
function get_dog_weight()
{
return $this->dog_weight;
}
function get_dog_breed()
{
return $this->dog_breed;
}
function get_dog_color()
{
return $this->dog_color;
}
function get_properties()
{
return "$this->dog_name,$this->dog_weight,$this->dog_breed,$this->dog_color.";
}
274Chapter 8 ■ Multifunctional Interfaces
// ----------------------------General Methods---------------------------------------------
private function validator_breed($value)
{
$breed_file = simplexml:load_file($this->breedxml);
$xmlText = $breed_file->asXML();
if(stristr($xmlText, $value) === FALSE)
{
return FALSE;
}
else
{
return TRUE;
}
}
private function change_dog_data($type)
{
if ( file_exists("e8dog_container.php")) {
require_once("e8dog_container.php"); // use chapter 5 container w exception
handling
} else {
throw new Exception("Dog container file missing or corrupt");
}
$container = new dog_container("dogdata"); // sets the tag name to look for in XML file
$properties_array = array("dogdata"); // not used but must be passed into create_object
$dog_data = $container->create_object($properties_array); // creates dog_data object
$method_array = get_class_methods($dog_data);
$last_position = count($method_array) - 1;
$method_name = $method_array[$last_position];
if (($this->index > -1) && ($type == "Delete"))
{
$record_Array = $this->index;
$dog_data->$method_name("Delete",$record_Array);
}
else if (($this->index == -1) && ($type == "Insert/Update"))
{
$record_Array = array(array('dog_name'=>"$this->dog_name", 'dog_weight'=>"$this->
dog_weight", 'dog_color'=>"$this->dog_color", 'dog_breed'=>"$this->dog_breed"));
$dog_data->$method_name("Insert",$record_Array);
}
else if ($type == "Insert/Update")
{
$record_Array = array($this->index => array('dog_name'=>"$this->dog_name",
'dog_weight'=>"$this->dog_weight", 'dog_color'=>"$this->dog_color",
'dog_breed'=>"$this->dog_breed"));
$dog_data->$method_name("Update",$record_Array);
}
$dog_data = NULL;
}
275Chapter 8 ■ Multifunctional Interfaces
function display_dog_data($record)
{
if ( file_exists("e8dog_container.php")) {
require_once("e8dog_container.php"); // use chapter 5 container w exception handling
} else {
throw new Exception("Dog container file missing or corrupt");
}
$container = new dog_container("dogdata"); // sets the tag name to look for in XML file
$properties_array = array("dogdata"); // not used but must be passed into create_object
$dog_data = $container->create_object($properties_array); // creates dog_data object
$method_array = get_class_methods($dog_data);
$last_position = count($method_array) - 1;
$method_name = $method_array[$last_position];
$record_Array = $record;
return $dog_data->$method_name("Display",$record_Array);
}
}
?>
As you’ve read, there are no required changes to the dog_data.php file because it already contains
insert, update, and delete methods.
Do It
1.Download the code for this section from the book’s web site. Run the (almost)
completed program. Try to “break” the program. Did you accomplish the task? If
so, what broke? Attempt to fix any problems you might discover.
2.Download the code for this section from the book’s web site. Adjust the code to
handle dog information that will include the following additional fields: dog_ID
(unique for each dog) and dog_gender. Adjust the dog.php and dog_data.php
programs to return these fields. You should now be able to test the complete
application. Note: If you did not previously complete the Do Its earlier in this
chapter, complete these assignments along with this one.
Final Touches
You will finish the coding of the ABC Canine Shelter Reservation System in this section (finally!). You will use
some CSS code from Chapter 2 to help make the application look more professional. In addition, you will
add a menu that will allow the users to read the errors logs and sign out of the application (close the session).
The CSS code from Chapter 2 uses the HTML tag (<div id='wrapper'>) to control the contents of
the body section. This tag is therefore added directly after the body tag (and closed right before the closing
body tag).
<body onload="checkJS();">
<div id="wrapper">
<div id="header"><h1><img src="brody.jpg"> ABC Canine Shelter Reservation System</h1>
276Chapter 8 ■ Multifunctional Interfaces
The CSS code also uses the HTML tag (<div id='header'>) to format the header (title) of the page. The
code has also been adjusted to include an image of a dog using the HTML img tag.
<a href="e8readerrorlog.php">Manage Error Logs</a> | <a href="e75changepassword.php">Change
Password</a> | <a href="e8lab.php?logoff=True">Log Off</a>
</div>
A simple menu is also included in the header section, which will allow the users to read the error log,
change their passwords, or log off the application. Notice that the code to log off the system will recall the
lab.php program and create a property "logoff" with a value of "True". You will make just a sight final
adjustment to the lab.php code to handle this selection.
All the remaining contents of the body section are placed in the HTML tag (<div ='contents'>).
<head>
<title>ABC Canine Shelter Reservation System</title>
<link href="e8dogstylesheet.css" rel="stylesheet">
The CSS code from Chapter 2 will be pulled into the file in the head section. The file has been renamed.
The contents of the file remain unchanged except for adding a float: top to the wrapper to align the display
with the top of the browser and text-align: center to the header to center the title of the application.
These changes provide a better look and feel for the application.
The last code you need to look at in the lab.php program is the logoff routine.
session_start();
if (isset($_GET['logoff']))
{
session_destroy();
}
if ((!isset($_SESSION['username'])) || (!isset($_SESSION['password'])) || (isset($_GET['logoff']))) {
At the top of the code for lab.php an if statement is added to determine if logoff has been set (via GET).
If it has, the session is destroyed. The if statement to determine if the user ID and password has not been
set, and is also modified to include checking if logoff has been set. If it has been set, then (at this point) the
user is no longer logged in to the system.
echo "<html><head><title>ABC Canine Shelter Reservation System</title>";
echo "<link href= 'e8dogstylesheet.css' rel='stylesheet'><style type='text/css'>img {
height: 100px; width: 140px; }</style></head><body>";
echo "<div id='wrapper'><div id='header'><h1><img src='brody.jpg'>ABC Canine Shelter
Reservation System</h1></div>";
echo "<div id='content'>";
echo "You must login to access the ABC Canine Shelter Reservation System";
echo "<p>";
echo "<a href='e74login.php'>Login</a> | <a href='e73registration.php'>Create an account</a>";
echo "</p>";
echo "</div><div id='footer'>Copyright &copy; 2015 Little Ocean Waves Publishing - Steve
Prettyman</div></div>";
echo "</body></html>";
277Chapter 8 ■ Multifunctional Interfaces
The user is then redirected to either log in or create an account. Also notice that the code has been
modified to include the same div tags for wrapper, header, content, and footer. This will give the page the
same look as the lab.php file.
In addition, any page displayed to the users should have this look. The displayRecords method of the
readerrorlog program has also been modified (as shown here) to include the same div tags.
echo "<html><head><title>ABC Canine Shelter Reservation System</title>";
echo "<link href=' e8dogstylesheet.css' rel='stylesheet'>";
echo "<style> table { border: 2px solid #5c744d;}";
echo "img { height: 100px; width: 140px; } </style>";
echo "</head><body>";
echo "<div id='wrapper'><div id='header'><h1><img src='brody.jpg'> ABC Canine Shelter
Reservation System</h1></div><div id='content'>";
echo "<table>";
echo "<caption>Log File: " . ERROR_LOG . "</caption>";
echo "<tr><th></th><th>Date/Time</th><th>Error Type</th><th>Error Message</th></tr><tr>";
for ($J=$row_Count; $J >= 0; $J--)
{
echo "<td><a href='e58readlogfile.php?rn=$J'>Delete</a></td>";
for($I=0; $I < 3; $I++)
{
echo "<td> " . $error_Array[$J][$I] . " </td> ";
}
echo "</tr>";
}
echo "</table>";
echo "</div><div id='footer'>Copyright &copy; 2015 Little Ocean Waves Publishing - Steve
Prettyman</div></div>";
echo "</body></html>";
Let’s look at the final version of lab.php in Example 8-5.
Example 8-5. The complete lab.php file
<?php
session_start();
if (isset($_GET['logoff']))
{
session_destroy();
}
if ((!isset($_SESSION['username'])) || (!isset($_SESSION['password'])) || (isset($_GET['logoff']))) {
echo "<html><head><title>ABC Canine Shelter Reservation System</title>";
echo "<link href='e8dogstylesheet.css' rel='stylesheet'><style type='text/css'>img { height:
100px; width: 140px; }</style></head><body>";
echo "<div id='wrapper'><div id='header'><h1><img src='brody.jpg'>ABC Canine Shelter
Reservation System</h1></div>";
echo "<div id='content'>";
echo "You must login to access the ABC Canine Shelter Reservation System";
echo "<p>";
echo "<a href='e74login.php'>Login</a> | <a href='e73registration.php'>Create an account</a>";
echo "</p>";
278Chapter 8 ■ Multifunctional Interfaces
echo "</div><div id='footer'>Copyright &copy; 2015 Little Ocean Waves Publishing - Steve
Prettyman</div></div>";
echo "</body></html>";
}
else if(($_SERVER['HTTP_REFERER'] == 'http://127.0.0.1:8080/mysite/bgchapter8/
ExampleFile7.4/e74login.php') || ($_SERVER['HTTP_REFERER'] == 'http://127.0.0.1:8080/mysite/
bgchapter8/ExampleFile7.4/e8lab.php'))
{
?>
<!DOCTYPE html>
<html lan="en">
<head>
<title>ABC Canine Shelter Reservation System</title>
<link href=" e8dogstylesheet.css" rel="stylesheet">
<script src="e8getlists.js"></script>
<script src="e5validator.js"></script>
<style type="text/css">
#JS { display:none; }
#input_form { display:none; }
#insert {display: none; }
#delete {display: none; }
#update {display: none; }
img { height: 100px; width: 140px; }
</style>
<script>
function checkJS() {
document.getElementById('JS').style.display = "inline";
}
function process_select() {
var colorbuttons = document.getElementsByName('dog_color');
if(!(document.getElementById('dogs').value == -1))
{
index = document.getElementById('dogs').selectedIndex -1;
document.getElementById('index').value = index;
document.getElementById('dog_name').value = obj.dogs[index].dog_name;
document.getElementById('dog_weight').value = obj.dogs[index].dog_weight;
dog_color = obj.dogs[index].dog_color;
if(dog_color == "Brown")
{
colorbuttons[0].checked = true;
} else if (dog_color == "Black")
{
colorbuttons[1].checked = true;
} else if (dog_color == "Yellow")
{
colorbuttons[2].checked = true;
}
else if (dog_color == "White")
{
colorbuttons[3].checked = true;
}
279Chapter 8 ■ Multifunctional Interfaces
dog_breed = obj.dogs[index].dog_breed;
document.getElementById('dog_breed').value = dog_breed;
document.getElementById('update').style.display = "inline";
document.getElementById('delete').style.display = "inline";
document.getElementById('insert').style.display = "none";
}
else
{
colorbuttons[4].checked = true;
document.getElementById('dog_name').value = "";
document.getElementById('dog_weight').value = "";
document.getElementById('dog_breed').value = "Select a dog breed";
document.getElementById('insert').style.display = "inline";
document.getElementById('update').style.display = "none";
document.getElementById('delete').style.display = "none";
}
document.getElementById('input_form').style.display = "inline";
}
</script>
</head>
<body onload="checkJS();">
<div id="wrapper">
<div id="header"><h1><img src="brody.jpg"> ABC Canine Shelter Reservation System</h1>
<a href="e8readerrorlog.php">Manage Error Logs</a> | <a href="e75changepassword.php">Change
Password</a> | <a href="e8lab.php?logoff=True">Log Off</a>
</div>
<div id="content">
<?php
if (isset($_SESSION['message']))
{
echo "<p>" . $_SESSION['message'] . "</p>";
}
else
{
echo "<p> Welcome back, " . $_SESSION['username'] . "</p>";
}
?>
<div id="JS">
<script>
AjaxRequest('e8dog_interface.php');
</script>
<h3>Pick the dog name and breed to change from the dropdown box, then click the
button.<br>For new dog information select 'NEW'.</h3>
Select 'NEW' or Dog's Name/Breed <div id="AjaxReturnValue"></div>
<input type="button" name="selected" id="selected" value="Click to select" onclick="process_
select()" /><br><br>
<div id="input_form">
<form method="post" action="e8dog_interface.php" onSubmit="return validate_input(this)">
<h3>Please note the required format of information.</h3>
<hr>
280Chapter 8 ■ Multifunctional Interfaces
Enter Your Dog's Name (max 20 characters, alphabetic) <input type="text" pattern="[a-zA-Z]*"
title="Up to 20 Alphabetic Characters" maxlength="20" name="dog_name" id="dog_name"
required/><br /><br />
Select Your Dog's Color:<br />
<input type="radio" name="dog_color" id="dog_color" value="Brown">Brown<br />
<input type="radio" name="dog_color" id="dog_color" value="Black">Black<br />
<input type="radio" name="dog_color" id="dog_color" value="Yellow">Yellow<br />
<input type="radio" name="dog_color" id="dog_color" value="White">White<br />
<input type="radio" name="dog_color" id="dog_color" value="Mixed" checked >Mixed<br /><br />
Enter Your Dog's Weight (numeric only) <input type="number" min="1" max="120"
name="dog_weight" id="dog_weight" required /><br /><br />
<input type="hidden" name="dog_app" id="dog_app" value="dog" />
Select Your Dog's Breed <div id="AjaxResponse"></div><br />
<input type="hidden" name="index" id="index" value="-1"/>
<input type="submit" name="insert" id="insert" value="Click to create your dog info" />
<input type="submit" name="delete" id="delete" value="Click to remove your selected dog info" />
<input type="submit" name="update" id="update" value="Click to update your selected dog info" />
<hr>
</form>
</div> </div>
<noscript>
<div id="noJS">
<form method="post" action="e8dog_interface.php">
<h3>For Updates please enter all fields. For Deletions enter at least the dog name and
breed. Then click the button.<br>For new dog information enter the requested information,
Then click the button.<br> Please note the required format of information.</h3>
Enter Your Dog's Name (max 20 characters, alphabetic) <input type="text" pattern="[a-zA-Z ]*"
title="Up to 20 Alphabetic Characters" maxlength="20" name="dog_name" id="dog_name"
required/><br /><br />
Select Your Dog's Color:<br />
<input type="radio" name="dog_color" id="dog_color" value="Brown">Brown<br />
<input type="radio" name="dog_color" id="dog_color" value="Black">Black<br />
<input type="radio" name="dog_color" id="dog_color" value="Yellow">Yellow<br />
<input type="radio" name="dog_color" id="dog_color" value="White">White<br />
<input type="radio" name="dog_color" id="dog_color" value="Mixed" checked >Mixed<br /><br />
Enter Your Dog's Weight (numeric only) <input type="number" min="1" max="120"
name="dog_weight" id="dog_weight" required /><br /><br />
Enter Your Dog's Breed (max 35 characters, alphabetic) <input type="text" pattern="[a-zA-Z ]*"
title="Up to 15 Alphabetic Characters" maxlength="35" name="dog_breed" id="dog_breed"
required /><br />
<input type="hidden" name="dog_app" id="dog_app" value="dog" />
<input type="submit" name="input" id="input" value="Click to create your dog info" />
<input type="submit" name="delete" id="delete" value="Click to remove your selected dog info" />
<input type="submit" name="update" id="update" value="Click to update your selected dog info" />
</form>
</div>
</noscript>
</div>
281Chapter 8 ■ Multifunctional Interfaces
<div id="footer">Copyright &copy; 2015 Little Ocean Waves Publishing - Steve Prettyman</div>
</div>
</body> </html>
<?php
} ?>
Example 8-6. The complete readerrorlog.php file
<?php
session_start();
function deleteRecord($recordNumber, &$row_Count, &$error_Array)
{
for ($J=$recordNumber; $J < $row_Count - 1; $J++)
{
for($I=0; $I < 3; $I++)
{
$error_Array[$J][$I] = $error_Array[$J + 1][$I];
}
}
unset($error_Array[$row_Count]);
$row_Count--;
}
function saveChanges($row_Count,$error_Array,$log_File)
{
$logFile = fopen($log_File, "w");
for($I=0; $I < $row_Count; $I++)
{
$writeString = $error_Array[$I][0] . " | " . $error_Array[$I][1] . " | " .
$error_Array[$I][2];
fwrite($logFile, $writeString);
}
fclose($logFile);
}
function displayRecords($row_Count, $error_Array)
{
echo "<html><head><title>ABC Canine Shelter Reservation System</title>";
echo "<link href= 'e8dogstylesheet.css' rel='stylesheet'>";
echo "<style> table { border: 2px solid #5c744d;}";
echo "img { height: 100px; width: 140px; } </style>";
echo "</head><body>";
echo "<div id='wrapper'><div id='header'><h1><img src='brody.jpg'> ABC Canine Shelter
Reservation System</h1></div><div id='content'>";
echo "<table>";
echo "<caption>Log File: " . ERROR_LOG . "</caption>";
echo "<tr><th></th><th>Date/Time</th><th>Error Type</th><th>Error Message</th></tr><tr>";
echo "<tr><th></th><th>Date/Time</th><th>Error Type</th><th>Error Message</th></tr><tr>";
for ($J=$row_Count; $J >= 0; $J--)
{
echo "<td><a href='e58readlogfile.php?rn=$J'>Delete</a></td>";
for($I=0; $I < 3; $I++)
282Chapter 8 ■ Multifunctional Interfaces
{
echo "<td> " . $error_Array[$J][$I] . " </td> ";
}
echo "</tr>";
}
echo "</table>";
echo "</div><div id='footer'>Copyright &copy; 2015 Little Ocean Waves Publishing - Steve
Prettyman</div></div>";
echo "</body></html>";
}
const ERROR_LOG = "Errors.log";
if ((!isset($_SESSION['username'])) || (!isset($_SESSION['password']))) {
echo "<html><head><title>ABC Canine Shelter Reservation System</title>";
echo "<link href='e8dogstylesheet.css' rel='stylesheet'><style type='text/css'>img { height:
100px; width: 140px; }</style></head><body>";
echo "<div id='wrapper'><div id='header'><h1><img src='brody.jpg'>ABC Canine Shelter
Reservation System</h1></div>";
echo "<div id='content'>";
echo "You must login to access the ABC Canine Shelter Reservation System";
echo "<p>";
echo "<a href='e74login.php'>Login</a> | <a href='e73registration.php'>Create an account</a>";
echo "</p>";
echo "</div><div id='footer'>Copyright &copy; 2015 Little Ocean Waves Publishing - Steve
Prettyman</div></div>";
echo "</body></html>";
}
else
{
$logFile = fopen(ERROR_LOG, "r");
$row_Count = 0;
while(!feof($logFile))
{
$error_Array[$row_Count] = explode(' | ', fgets($logFile));
$row_Count++;
}
$row_Count--;
fclose($logFile);
if(isset($_GET['rn']))
{
deleteRecord($_GET['rn'], $row_Count, $error_Array);
saveChanges($row_Count,$error_Array,ERROR_LOG);
}
displayRecords($row_Count,$error_Array);
}
?>
283Chapter 8 ■ Multifunctional Interfaces
Do It
1.
Download the code for this section from the book’s site. Also, download the
displaychangelog.php program from Chapter 6 (in Example 6-4) along with a
change log if you don’t already have one. Update the menu provided in the lab.
php program to provide a link to the displaychangelog.php program. Add code
to the displaychangelog.php program to require the users to log in. Redirect
the users to the choice of login or registration (as shown in the examples) if they
are not logged in. Also update the HTML in the displaychangelog.php file to
use the e8dogstylesheet.css file to display the change log page and the login/
registration selection page in the same format as shown in Figure 8-5.
Figure 8-5. The complete lab.php file
284
2.Download the code for this section from the book’s web site. Adjust the code to
handle dog information that will include the following additional fields: dog_ID
(unique for each dog) and dog_gender. Adjust all programs necessary (including
the readerrorlog and displaychangelog (in Example 6-4)). You should now be
able to test the complete application.
3.Download the code for this section from the book’s site. Add a menu for the users
to return to the shelter registration page (lab.php) or log off when they are using
the readerrorlog.php file. Add the code needed to the readerrorlog.php file to
log off the user. If you have not already done so, include changes need to format
the display of the readerrorlog.php file as shown in Figure 8-5. Also these
changes in the displaychangelog.php file (if you did #1).Chapter 8 ■ Multifunctional Interfaces
ABC Canine Shelter Reservation System Logical Design
The final logical design of the ABC Canine Shelter Reservation System shows the application with four tiers
(authentication, interface, business rules, and data). Additional tiers could also be used to break a large
application across multiple servers.
Figure 8-6. The complete ABC Canine Shelter Reservation System
In addition to the tiers, maintenance programs (readerrorlog and readchangelog) provide the ability
to tighten security, fix errors, and provide backup and recovery.
Limitations
The ABC Canine Shelter Reservation System has been used as a teaching tool in this book. However,
the system is not complete and ready for the real world. Many of the limitations of the system have been
addressed in this book and used as exercises for you to gain further PHP programming skills. The changes
shown next should be made to the system to improve the user experience, security, and performance. In
addition, user testing is critical to ensure that the users of the system are satisfied. Users who are not happy
with the design and performance of the system are not likely to use it.
285Chapter 8 ■ Multifunctional Interfaces
lab.php
•A Dog_ID or some other type of unique field needs to be included to determine the
difference between dogs with the same name and breed.
•The form for users not using JavaScript needs to use PHP to call and retrieve needed
information for update and delete ability.
•A link to displaychangelog.php needs to be provided in the menu selection.
•A Dog_Gender field needs to exist. It would also be good if dog pictures existed.
•The program needs to handle and respond to users attempt to insert a dog that
already exists.
dog_interface.php
•Dog_ID information (update/insert) needs to be accepted from the Dog class and
passed to lab.php.
•Code is needed to return requests to lab.php for the complete dogs array and a
specific dog for the non_JavaScript-enabled browsers. The information will be
retrieved from dog.php.
•The Dog_Gender field needs to be pulled from dog.php and passed to lab.php.
•A session message must be passed to the lab.php program when the user attempts
to enter a dog that is already in the data. The message is created in a catch block.
dog.php
•The Dog_ID information needs to be pulled from dog_data.php and passed to
dog_interface.php.
•The Dog_Gender needs to be pulled from dog_data.php and passed to
dog_interface.php.
dog_data.php
•The Dog_ID needs to be passed to dog.php. The ability to insert and update this field
needs to be included.
•The Dog_Gender needs to be passed to dog.php. The ability to insert and updated this
field needs to be included.
register.php
•This program needs to include a unique field (customerID) to determine duplicate
user IDs. This field will be generated and not entered by the users.
•This program needs to detect users attempting to create a duplicate ID. Code could
even make suggestions for user ID names based on what the user attempted to
create (such as adding numbers to the end of the user ID).
•This program needs to require the user to also use a special symbol for the password.
•This program needs security questions in case the user forgets his password.
•Additional fields are needed, such as name, e-mail, and address.
login.php
•
286
This program needs to be able to create a temporary password for users who forget
their passwords but remember answers to their security questions.Chapter 8 ■ Multifunctional Interfaces
Overall
•You need to consider moving more program (file) names to XML files for easier
version changes.
•You need to consider adding levels of access and approval for new user IDs.
Chapter Terms
$_SERVER['HTTP_REFERER']HTML button
splitvar
JSON objectJSON.parse
getElementsByNameHTML list boxes
selectedIndexvalue
dot notation formatchecked property
is_boolimg
float: toptext-align: center
Four Tier Application
Chapter Questions and Projects
Multiple Choice
1.
2.
3.
Which JavaScript method accomplishes a similar task as the PHP method
explode?
a.explode
b.slice
c.split
d.None of these
Which JavaScript method accomplishes a similar task as the PHP method json_
decode?
a.JSON.scan
b.JSON.parse
c.JSON.decode
d.None of these
A JSON object is similar to which PHP object?
a.An array
b.A multidimensional array
c.An associative array
d.None of these
287Chapter 8 ■ Multifunctional Interfaces
4.
5.
An HTML button can be used to do what?
a.Can be used to call a JavaScript method
b.Can submit a form
c.Can display a form
d.All of the above
The private word is used to create a private object in PHP. What word is used in
JavaScript to accomplish the same?
a.private
b.No additional word is needed; they are private by default
c.var
d.None of these
True/False
1.JavaScript is commonly used to retrieve and use data passed from other program languages.
2.The CSS code display: form is used to display a form that has been hidden from the user.
3.The CSS code p {float: top } will cause everything in all paragraph tags to
float to the top of the browser window.
4.getElementsByName can be used to create an array from a grouping of radio buttons.
5.is_numeric could be used to determine if an object is not an array.
Short Answer/Essay
1.Explain why and how initially hiding a form from the users will force them to
make a selection from a list box.
2.Explain how each program in the ABC Canine Shelter Reservation System uses -1
to indicate a request for insert.
3.Explain each tier of a four-tier application.
4.What changes would need to occur in the ABC Canine Shelter Reservation
System to convert it to a Feline Shelter Reservation System?
5.Give an example of three algorithms (blocks of code) that have been
continuously reused in the ABC Canine Shelter Reservation System.
Projects
1.
Go back to the section entitled “Limitations” in this chapter and view the list
again. Download the complete code from this chapter and fix one (or more) of
these limitations. Make sure to fix the limitation in all the applicable files.
Term Project
1.
288
Update the ABC Computer Parts Inventory application to provide complete delete,
update, and insert capabilities (as shown in this chapter). Add CSS to each program
in the application interface to provide a more professional display of the information.
Add any code needed to ensure that the users are logged in to access any part of the
application. List any limitations that still exist in this application.Index

       
A
ABC Canine Shelter Reservation System
application, 285
limitations
dog_data.php, 286
dog_interface.php, 286
dog.php, 286
lab.php, 286
login.php, 286
register.php, 286
AjaxRequest method, 146
allalphabetic method, 117
Application Program Interface (API), 40
Application servers, 61
Asynchronous JavaScript and XML (AJAX), 47
ajaxdemo.html, 49, 51–52
code, 47
container development, 47
CSS file, 50
HTML, 50
JavaScript.js, 48
myfirstprogram.php file, 52
Authentication
logging in
attempts tag, 238
JSON data, 242
login.php file, 238
MySQL data, 242
PHP method strtotime, 238
timeout period, 237
password change
changepassword.php file, 243
datestamp tag, 243
JSON data, 246
MySQL data, 246
registration
file_get_contents, 234
JSON data, 236
MySQL data, 237
PHP strlen method, 234
PHP strlen method, 234
© Steve Prettyman 2015
S. Prettyman, Learn PHP 7, DOI 10.1007/978-1-4842-1730-6
$output string, 235
registration.php file, 235
verification and sessions
dogdata.php program, 229
else statement, 226
JSON Data, 232
json_decode method, 230
in_array method, 228, 230
lab.php file, 225
login.phpfile, 230
MySQL Data, 232
password_hash method, 229
password_verify method, 229
PHP code, 226
PHP isset method, 224
session_start method, 224, 227
sign-in process, 223
userid/password properties, 224

       
B
Business rules tier, 58, 61, 67, 84

       
C
Cascading Style Sheets (CSS), 51
clean_input method, 120, 122–123, 138
Constructor method
__construct function, 97
Dog class, 97, 101
error_message property, 99
get_properties method, 97, 99
lab.php file, 99
object, 97
security and performance, 100
set and get methods, 100
__toString method, 98
TRUE and FALSE, 98
create_breed_app methods, 142
create_object method, 137, 139–140
ctype method, 89
289■ index

       
D
Database management system (DBMS), 60
Data objects
backup and recovery
count method, 207
delete method, 200
delete_Process method, 208
displaychangelog.php file, 209
displayRecords, 207
dogdata.php file, 202
error_log method, 201
file_put_contents method, 201
JSON data, 211
load_Array method, 206, 208
MySQL data, 211
PHP glob method, 206
preg_replace method, 201
processRecords method, 200, 209
readchangelog file, 205
rename method, 201
saveChanges method, 208
select_File_Process method, 205
setChangeLogFile method, 202
unserialize method, 201, 209
update_XML_File_Process
method, 205, 208
data class
$column, 190
deleteRecord method, 191
dog_array, 192
dog_data.php file, 194–196
foreach loop, 190
get_dog_application method, 188, 190
insertRecords method, 192–193
JSON data, 197
libxml:user_internal_
errors(true) method, 191
multidimensional associate array, 189
MySQL data, 197
PHP file_get_contents method, 188
PHP file_put_contents method, 190
PHP json_encode method, 189
PHP simplexml:load_string method, 188
PHP unset method, 192
readRecords method, 192
testdata.php file, 196
update method, 193
data tier
dependency injection, 216
dog_container class, 215
dog_data class, 214
dog.php file, 216
record_Array, 216
three-tier dog application, 219
290
Dataset, 62
Data tier, 58, 63, 67
datefmt_set_timezone method, 167
datefmt_set_timezone_id method, 167
delete_Process method, 208
deleteRecord method, 191
Dependency injection, 70
displayRecords method, 181, 192, 278

       
E
Encapsulation, 79
error_check_dog_app method, 145, 166
errorHandler method, 158
error_log method, 201
Exception class getMessage method, 160
Extensible Markup
Language (XML), 63

       
F
Facebook
API, 40
code, 43
dashboard, 46
developer’s page, 42
open app failure, 45
Open App page, 44
Quick Start page, 43
settings page, 46
sign in, 42
URL, 47
web page, 41
working app, 47
file_exists method, 144
file_put_contents method, 201

       
G
Get method, 79, 93, 100
get_class_methods, 146
getCode(), 155
get_dog_application
method, 139–140, 146, 188, 190, 215
get_dog_app_properties method, 145
getElementsByTagName method, 139
getFile(), 155
GET HTTP Request, 16
getLine(), 155
getMessage method, 155
get_properties method, 88, 91, 97, 99
get_select method, 146
getTrace(), 155
getTraceAsString(), 155
Graphical User Interface (GUI), 59■ Index

       
H
Handling exceptions
Dog application, 154, 158
EngineException object, 158
errorHandler method, 158
errors, 154
getMessage method, 155
handleerror program, 160
vs. If/Else conditions
dog.class, 161
dog_container.php file, 163
dog_interface.php file, 164
error_check_dog_app method, 166
GetBreeds class, 163
setException catch block, 166
__toString method, 162
require_once statement, 160
set_error_handler method, 158
switch statement, 156
testerror class, 160
testerror.php, 159
throwexception method, 160
try-catch block, 154
zeroException class, 156–157
htmlentities method, 122
Hypertext markup
language (HTML), 50, 54–55

       
I
insertRecords method, 192–193
Interface tier (IT), 58–59, 65
isset method, 56, 121, 124

       
J, K
JavaScript Object Notation (JSON), 61, 63, 189,
196–197, 211, 232, 236, 242, 246, 252
JavaScript’s JSON.parse method, 257
json_encode method, 189

       
L
libxml:user_internal_errors(true) method, 191
load_Array method, 206
Logging exceptions
Apache httpd config file, 167
date.timezone, 167
dog_inteface.php file, 170
error_log method, 168
Exception catch block, 173
log user errors, 168
php.ini file, 167
reading log and text files
delete method, 178
deleteRecord method, 180
displayRecords method, 180–181
echo statement, 177
error_log method, 174
Explode method, 175–176
fopen method, 174, 181
for loop, 177
print_r command, 176
readerrorlog.php file, 178, 180
row_Count variable, 177
two-dimensional arrays, 175
while loop, 174, 178
security and performance, 169
setException catch block, 173
standard text editor/
log-monitoring software, 168

       
M
match method, 118
Microsoft Azure, 63
Model-View-Controller (MVC) model, 70, 135
Modular programming, 77
constructor method
__construct function, 97
Dog class, 97, 101
error_message property, 99
get_properties method, 97, 99
lab.php file, 99
object, 97
security and performance, 100
set, and get methods, 100
__toString method, 98
TRUE and FALSE, 98
dog class creation
class keyword, 79
class name, 79
errors, 84
lab.php program, 83
$lab property, 83
Method name, 81
object, 83
program design, 82
properties, 80
require_once statement, 82
string concatenation, 81
structure, 79, 81
$this pointer, 81
extensions, 78
Get method, 93
return method, 84
set methods
291■ index
Modular programming (cont.)
$error_message, 88
Dog class, 90, 92–93
get_properties method, 88, 91
lab.php file, 88
Null Coalesce Operator, 90
parameters, 87
performance, 87, 89, 91
PHP 7 Spaceship Operator, 90
program design, 91–92
programming note, 89
reliability, 87
security, 87, 89, 91
set_dog_name method, 87–88
$set_dog_weight method, 91
Strtoupper/strtolower methods, 93
ternary operator, 87, 89
$value property, 89
Multifunctional interfaces
ABC Canine Shelter Reservation System
application, 285
dog_data.php, 286
dog_interface.php, 286
dog.php, 286
lab.php, 286
login.php, 286
register.php, 286
business rules tier, 270
complete application, 249
complete lab.php file, 278–280, 282, 284
complete readerrorlog.php file, 282–283
data handling, JavaScript
AjaxReturnValue, 256
breeds list box, 259
dog_interface program, 257
dog_name and dog_weight values, 258
get_breeds.js file, 256
getlists.js file, 259
HandleResponse method, 256
hidden property, 256
lab.php file, 249, 251–252, 254–255, 260
obj, 258
selectedIndex property, 257
update and delete buttons, 259
displayRecords method, 278
interface tier, 263

       
N
NULL value, 192

       
O
Object-oriented language, 2, 200
292

       
P, Q
Personal Home page Tool (PHP)
alias directories, 30–33
AJAX (see Asynchronous
JavaScript and XML (AJAX))
Apache.org web site, 12
Apache Software Foundation, 13
Apache web server, 12
callmyself.php, 57
conditional statements, 55
definition, 39
Dependency injection, 70
documentation page, 5
download page, 4
dynamic web sites and
web applications creation, 4
EasyPHP
Apache Delays and Hang-ups, 21
configurations, 21
missing C# library, 19
missing files, 20
port conflicts, 19
rerun installation, 20
echo code, 7
facebook
API, 40
code, 43
dashboard, 46
developer’s page, 42
open app failure, 45
Open App page, 44
Quick Start page, 43
settings page, 46
sign in, 42
URL, 47
web page, 41
working app, 47
GET HTTP Request, 16
GET process, 17
home page, 3
HTML, 11, 54–55
index.html file, 16
if statement, 55
isset method, 56
JavaScript, 9–11
manual, 6
Microsoft Internet Information Server, 24
modular programming
(see Modular programming)
MVC, 70
Notepad++, 33
object-oriented language, 2
open source language, 2■ Index
PC applications, 40
PHP 5.6, 8
print function, 11
procedural language, 1
search box, 6
searchprocess.php, 16
smart phone web applications, 40, 52
SQL, 14
static vs. dynamic web pages, 15
testing
administration environment, 25
EasyPHP’s code classroom, 30
PHP environment, 28
three tier architecture
business rules tier, 58, 61, 66
components, 57
data tier, 58, 63, 67
design, 58
internet, 57
IT, 58–59, 65
modules, 57
PDLC, 64
web page, 11
www.php.net source code, 10
XAMPP
Apache Delays and Hang-ups, 24
configurations, 24
editors, 33
errors, 24
missing files, 23
port conflicts, 22–23
rerun installation, 23
PHP simplexml:load_string method, 188
PHP unset method, 192
POST method, 121
preg_replace method, 201
Procedural language, 1
processRecords method, 200
Program Development Life Cycle (PDLC), 64

       
R
readRecords method, 192
Return method, 84

       
S
Secured user interfaces
clean_input method, 120, 122–123
dependency injection
AjaxRequest method, 146
clean_input method, 138
create_breed_app methods, 142
create_object method, 139–140
dog application, 136
dog_container object, 136–137, 142
dog_interface program, 144
dog_interface.php program, 136
$dog_loc, 141
error_check_dog_app method, 145
function_exists, 138
get_breeds class, 142, 145, 147
get_declared_classes, 141
get_dog_application method, 139
get_dog_app_properties method, 145
getElementsByTagName method, 139
lab.html, 145
$last_position, 141
MVC model, 135
properties, 138
$properties_array, 140
require_once statements, 135
security and performance, 135, 138
HTML5 form validation, 110
HTML5 select list box, 124
htmlentities method, 122
isset method, 121
JavaScript validation
allalphabetic method, 117
calling program, 116
error_message property, 116, 118, 120
lab.html file, 119
match method, 118
onSubmit parameter, 116
programming note, 117
security and performance, 120
the_string property, 117
validate_dog_name method, 116
validate_input method, 118
validate_input method, 114
lab.php file, 123
$_POST, 121
POST method, 121
radio buttons, 124
security and performance, 123
$__SERVER global variable, 123
stripslashes method, 122
strip_tags method, 122
str_ireplace method, 122
verification, 110
web form, 110
XML file
dog_breed value, 134
dog class, 129
dog_name field, 134
private function, 129
stristr method, 129
validator_breed function, 129
session_start method, 224
set methods, 79
293■ index
setChangeLogFile method, 202
set_dog_name method, 87–88, 98
$set_dog_weight method, 91
set_error_handler method, 158
Set methods
$error_message, 88
Dog class, 90, 92
get_properties method, 88, 91
lab.php file, 88
Null Coalesce Operator, 90
parameters, 87
performance, 87, 89, 91
PHP 7 Spaceship Operator, 90
program design, 91–92
programming note, 89
reliability, 87
security, 87, 89, 91
set_dog_name method, 87–88
$set_dog_weight method, 91
strtoupper or strtolower methods, 93
ternary operator, 87, 89
$value property, 89
Simple Object Access
Protocol (SOAP), 63
Software Development Kits (SDKs), 40
speak method, 86
294
stripslashes method, 122
strip_tags method, 122
str_ireplace method, 122
stristr method, 129
strlen method, 89
strtolower methods, 93
strtoupper methods, 93
Structured Query Language (SQL), 14

       
T
throwexception method, 160
__toString method, 98

       
U
unserialize method, 201

       
V
validate_dog_name method, 116
validate_input method, 112, 114, 118

       
W, X, Y, Z
Web Services Description Language (WSDL), 63
